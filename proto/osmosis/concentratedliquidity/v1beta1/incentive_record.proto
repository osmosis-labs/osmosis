syntax = "proto3";
package osmosis.concentratedliquidity.v1beta1;

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/osmosis-labs/osmosis/v21/x/concentrated-liquidity/types";

// IncentiveRecord is the high-level struct we use to deal with an independent
// incentive being distributed on a pool. Note that PoolId, Denom, and MinUptime
// are included in the key so we avoid storing them in state, hence the
// distinction between IncentiveRecord and IncentiveRecordBody.
message IncentiveRecord {
  // incentive_id is the id uniquely identifying this incentive record.
  uint64 incentive_id = 1 [ (gogoproto.moretags) = "yaml:\"incentive_id\"" ];
  uint64 pool_id = 2;

  // incentive record body holds necessary
  IncentiveRecordBody incentive_record_body = 4 [
    (gogoproto.moretags) = "yaml:\"incentive_record_body\"",
    (gogoproto.nullable) = false
  ];
  // min_uptime is the minimum uptime required for liquidity to qualify for this
  // incentive. It should be always be one of the supported uptimes in
  // types.SupportedUptimes
  google.protobuf.Duration min_uptime = 5 [
    (gogoproto.nullable) = false,
    (gogoproto.stdduration) = true,
    (gogoproto.moretags) = "yaml:\"min_uptime\""
  ];
}

// IncentiveRecordBody represents the body stored in state for each individual
// record.
message IncentiveRecordBody {
  // remaining_coin is the total amount of incentives to be distributed
  cosmos.base.v1beta1.DecCoin remaining_coin = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.DecCoin",
    (gogoproto.moretags) = "yaml:\"remaining_coins\""
  ];

  // emission_rate is the incentive emission rate per second
  string emission_rate = 2 [

    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.moretags) = "yaml:\"emission_rate\"",
    (gogoproto.nullable) = false
  ];

  // start_time is the time when the incentive starts distributing
  google.protobuf.Timestamp start_time = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.stdtime) = true,
    (gogoproto.moretags) = "yaml:\"start_time\""
  ];
}