syntax = "proto3";
package osmosis.poolmanager.v1beta1;

import "gogoproto/gogo.proto";
import "amino/amino.proto";
import "cosmos/base/v1beta1/coin.proto";
import "osmosis/poolmanager/v1beta1/swap_route.proto";
import "cosmos/msg/v1/msg.proto";

option go_package = "github.com/osmosis-labs/osmosis/v25/x/poolmanager/types";

service Msg {
  rpc SwapExactAmountIn(MsgSwapExactAmountIn)
      returns (MsgSwapExactAmountInResponse);
  rpc SwapExactAmountOut(MsgSwapExactAmountOut)
      returns (MsgSwapExactAmountOutResponse);
  rpc SplitRouteSwapExactAmountIn(MsgSplitRouteSwapExactAmountIn)
      returns (MsgSplitRouteSwapExactAmountInResponse);
  rpc SplitRouteSwapExactAmountOut(MsgSplitRouteSwapExactAmountOut)
      returns (MsgSplitRouteSwapExactAmountOutResponse);
  rpc SetDenomPairTakerFee(MsgSetDenomPairTakerFee)
      returns (MsgSetDenomPairTakerFeeResponse);
  rpc SetTakerFeeShareAgreementForDenom(MsgSetTakerFeeShareAgreementForDenom)
      returns (MsgSetTakerFeeShareAgreementForDenomResponse);
  rpc SetRegisteredAlloyedPool(MsgSetRegisteredAlloyedPool)
      returns (MsgSetRegisteredAlloyedPoolResponse);
}

// ===================== MsgSwapExactAmountIn
message MsgSwapExactAmountIn {
  option (amino.name) = "osmosis/poolmanager/swap-exact-amount-in";
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1 [ (gogoproto.moretags) = "yaml:\"sender\"" ];
  repeated SwapAmountInRoute routes = 2 [ (gogoproto.nullable) = false ];
  cosmos.base.v1beta1.Coin token_in = 3 [
    (gogoproto.moretags) = "yaml:\"token_in\"",
    (gogoproto.nullable) = false
  ];
  string token_out_min_amount = 4 [

    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.moretags) = "yaml:\"token_out_min_amount\"",
    (gogoproto.nullable) = false
  ];
}

message MsgSwapExactAmountInResponse {
  string token_out_amount = 1 [

    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.moretags) = "yaml:\"token_out_amount\"",
    (gogoproto.nullable) = false
  ];
}

// ===================== MsgSplitRouteSwapExactAmountIn
message MsgSplitRouteSwapExactAmountIn {
  option (amino.name) = "osmosis/poolmanager/split-amount-in";
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1 [ (gogoproto.moretags) = "yaml:\"sender\"" ];
  repeated SwapAmountInSplitRoute routes = 2 [ (gogoproto.nullable) = false ];
  string token_in_denom = 3
      [ (gogoproto.moretags) = "yaml:\"token_in_denom\"" ];
  string token_out_min_amount = 4 [

    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.moretags) = "yaml:\"token_out_min_amount\"",
    (gogoproto.nullable) = false
  ];
}

message MsgSplitRouteSwapExactAmountInResponse {
  string token_out_amount = 1 [

    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.moretags) = "yaml:\"token_out_amount\"",
    (gogoproto.nullable) = false
  ];
}

// ===================== MsgSwapExactAmountOut
message MsgSwapExactAmountOut {
  option (amino.name) = "osmosis/poolmanager/swap-exact-amount-out";
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1 [ (gogoproto.moretags) = "yaml:\"sender\"" ];
  repeated SwapAmountOutRoute routes = 2 [ (gogoproto.nullable) = false ];
  string token_in_max_amount = 3 [

    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.moretags) = "yaml:\"token_in_max_amount\"",
    (gogoproto.nullable) = false
  ];
  cosmos.base.v1beta1.Coin token_out = 4 [
    (gogoproto.moretags) = "yaml:\"token_out\"",
    (gogoproto.nullable) = false
  ];
}

message MsgSwapExactAmountOutResponse {
  string token_in_amount = 1 [

    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.moretags) = "yaml:\"token_in_amount\"",
    (gogoproto.nullable) = false
  ];
}

// ===================== MsgSplitRouteSwapExactAmountOut
message MsgSplitRouteSwapExactAmountOut {
  option (amino.name) = "osmosis/poolmanager/split-amount-out";
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1 [ (gogoproto.moretags) = "yaml:\"sender\"" ];
  repeated SwapAmountOutSplitRoute routes = 2 [ (gogoproto.nullable) = false ];
  string token_out_denom = 3
      [ (gogoproto.moretags) = "yaml:\"token_out_denom\"" ];
  string token_in_max_amount = 4 [

    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.moretags) = "yaml:\"token_in_max_amount\"",
    (gogoproto.nullable) = false
  ];
}

message MsgSplitRouteSwapExactAmountOutResponse {
  string token_in_amount = 1 [

    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.moretags) = "yaml:\"token_in_amount\"",
    (gogoproto.nullable) = false
  ];
}

// ===================== MsgSetDenomPairTakerFee
message MsgSetDenomPairTakerFee {
  option (amino.name) = "osmosis/poolmanager/set-denom-pair-taker-fee";
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1 [ (gogoproto.moretags) = "yaml:\"sender\"" ];
  repeated DenomPairTakerFee denom_pair_taker_fee = 2 [
    (gogoproto.moretags) = "yaml:\"denom_pair_taker_fee\"",
    (gogoproto.nullable) = false
  ];
}

message MsgSetDenomPairTakerFeeResponse { bool success = 1; }

// ===================== MsgSetTakerFeeShareAgreementForDenom
message MsgSetTakerFeeShareAgreementForDenom {
  option (amino.name) =
      "osmosis/poolmanager/set-taker-fee-share-agreement-for-denom";
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1 [ (gogoproto.moretags) = "yaml:\"sender\"" ];

  // denom is the denom that the taker fee share agreement is being set for.
  // Ex. If this is set to "nBTC", then any trade route that includes "nBTC"
  // will have the skim_percent skimmed from the taker fees and sent to the
  // skim_address.
  string denom = 2 [ (gogoproto.moretags) = "yaml:\"denom\"" ];

  // skim_percent is the percentage of taker fees that will be skimmed for the
  // bridge provider, in the event that the bridge provider's denom is included
  // in the swap route.
  string skim_percent = 3 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.moretags) = "yaml:\"skim_percent\"",
    (gogoproto.nullable) = false
  ];

  // skim_address is the address belonging to the respective bridge provider
  // that the skimmed taker fees will be sent to at the end of each epoch.
  string skim_address = 4 [ (gogoproto.moretags) = "yaml:\"skim_address\"" ];
}

message MsgSetTakerFeeShareAgreementForDenomResponse {}

// ===================== MsgSetRegisteredAlloyedPool
message MsgSetRegisteredAlloyedPool {
  option (amino.name) = "osmosis/poolmanager/set-registered-alloyed-pool";
  option (cosmos.msg.v1.signer) = "sender";

  string sender = 1 [ (gogoproto.moretags) = "yaml:\"sender\"" ];

  // pool_id is the id of the pool that is being registered as an alloyed pool.
  // Only alloyed pools that intend to be used in taker fee revenue sharing
  // should be registered.
  uint64 pool_id = 2 [ (gogoproto.moretags) = "yaml:\"pool_id\"" ];
}

message MsgSetRegisteredAlloyedPoolResponse {}

message DenomPairTakerFee {
  // DEPRECATED: Now that we are using uni-directional trading pairs, we are
  // using tokenInDenom and tokenOutDenom instead of denom0 and denom1 to
  // prevent confusion.
  string denom0 = 1 [
    (gogoproto.moretags) = "yaml:\"denom0\",deprecated:\"true\"",
    deprecated = true
  ];
  string denom1 = 2 [
    (gogoproto.moretags) = "yaml:\"denom1\",deprecated:\"true\"",
    deprecated = true
  ];
  string taker_fee = 3 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.moretags) = "yaml:\"taker_fee\"",
    (gogoproto.nullable) = false
  ];
  string tokenInDenom = 4 [ (gogoproto.moretags) = "yaml:\"token_in_denom\"" ];
  string tokenOutDenom = 5
      [ (gogoproto.moretags) = "yaml:\"token_out_denom\"" ];
}
