syntax = "proto3";
package osmosis.poolmanager.v1beta1;

import "gogoproto/gogo.proto";
import "osmosis/poolmanager/v1beta1/genesis.proto";
import "osmosis/poolmanager/v1beta1/tx.proto";
import "osmosis/poolmanager/v1beta1/swap_route.proto";
import "osmosis/poolmanager/v1beta1/taker_fee_share.proto";

import "cosmos/base/v1beta1/coin.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "cosmos_proto/cosmos.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/osmosis-labs/osmosis/v26/x/poolmanager/client/queryproto";

service Query {
  rpc Params(ParamsRequest) returns (ParamsResponse) {
    option (google.api.http).get = "/osmosis/poolmanager/v1beta1/Params";
  }

  // Estimates swap amount out given in.
  rpc EstimateSwapExactAmountIn(EstimateSwapExactAmountInRequest)
      returns (EstimateSwapExactAmountInResponse) {
    option (google.api.http).get =
        "/osmosis/poolmanager/v1beta1/{pool_id}/estimate/swap_exact_amount_in";
  }

  // EstimateSwapExactAmountInWithPrimitiveTypes is an alternative query for
  // EstimateSwapExactAmountIn. Supports query via GRPC-Gateway by using
  // primitive types instead of repeated structs. Each index in the
  // routes_pool_id field corresponds to the respective routes_token_out_denom
  // value, thus they are required to have the same length and are grouped
  // together as pairs.
  // example usage:
  // http://0.0.0.0:1317/osmosis/poolmanager/v1beta1/1/estimate/
  // swap_exact_amount_in_with_primitive_types?token_in=100000stake&routes_token_out_denom=uatom
  // &routes_token_out_denom=uion&routes_pool_id=1&routes_pool_id=2
  rpc EstimateSwapExactAmountInWithPrimitiveTypes(
      EstimateSwapExactAmountInWithPrimitiveTypesRequest)
      returns (EstimateSwapExactAmountInResponse) {
    option (google.api.http).get =
        "/osmosis/poolmanager/v1beta1/{pool_id}/estimate/"
        "swap_exact_amount_in_with_primitive_types";
  }

  rpc EstimateSinglePoolSwapExactAmountIn(
      EstimateSinglePoolSwapExactAmountInRequest)
      returns (EstimateSwapExactAmountInResponse) {
    option (google.api.http).get = "/osmosis/poolmanager/v1beta1/{pool_id}/"
                                   "estimate/single_pool_swap_exact_amount_in";
  }

  // Estimates swap amount in given out.
  rpc EstimateSwapExactAmountOut(EstimateSwapExactAmountOutRequest)
      returns (EstimateSwapExactAmountOutResponse) {
    option (google.api.http).get =
        "/osmosis/poolmanager/v1beta1/{pool_id}/estimate/swap_exact_amount_out";
  }

  // Estimates swap amount in given out.
  rpc EstimateSwapExactAmountOutWithPrimitiveTypes(
      EstimateSwapExactAmountOutWithPrimitiveTypesRequest)
      returns (EstimateSwapExactAmountOutResponse) {
    option (google.api.http).get =
        "/osmosis/poolmanager/v1beta1/{pool_id}/estimate/"
        "swap_exact_amount_out_with_primitive_types";
  }

  rpc EstimateSinglePoolSwapExactAmountOut(
      EstimateSinglePoolSwapExactAmountOutRequest)
      returns (EstimateSwapExactAmountOutResponse) {
    option (google.api.http).get =
        "/osmosis/poolmanager/v1beta1/{pool_id}/estimate_out/"
        "single_pool_swap_exact_amount_out";
  }

  // Returns the total number of pools existing in Osmosis.
  rpc NumPools(NumPoolsRequest) returns (NumPoolsResponse) {
    option (google.api.http).get = "/osmosis/poolmanager/v1beta1/num_pools";
  }

  // Pool returns the Pool specified by the pool id
  rpc Pool(PoolRequest) returns (PoolResponse) {
    option (google.api.http).get =
        "/osmosis/poolmanager/v1beta1/pools/{pool_id}";
  }

  // AllPools returns all pools on the Osmosis chain sorted by IDs.
  rpc AllPools(AllPoolsRequest) returns (AllPoolsResponse) {
    option (google.api.http).get = "/osmosis/poolmanager/v1beta1/all-pools";
  }
  // ListPoolsByDenom return all pools by denom
  rpc ListPoolsByDenom(ListPoolsByDenomRequest)
      returns (ListPoolsByDenomResponse) {
    option (google.api.http).get =
        "/osmosis/poolmanager/v1beta1/list-pools-by-denom";
  }

  // SpotPrice defines a gRPC query handler that returns the spot price given
  // a base denomination and a quote denomination.
  rpc SpotPrice(SpotPriceRequest) returns (SpotPriceResponse) {
    option (google.api.http).get =
        "/osmosis/poolmanager/pools/{pool_id}/prices";
  }

  // TotalPoolLiquidity returns the total liquidity of the specified pool.
  rpc TotalPoolLiquidity(TotalPoolLiquidityRequest)
      returns (TotalPoolLiquidityResponse) {
    option (google.api.http).get =
        "/osmosis/poolmanager/v1beta1/pools/{pool_id}/total_pool_liquidity";
  }

  // TotalLiquidity returns the total liquidity across all pools.
  rpc TotalLiquidity(TotalLiquidityRequest) returns (TotalLiquidityResponse) {
    option (google.api.http).get =
        "/osmosis/poolmanager/v1beta1/total_liquidity";
  }

  // TotalVolumeForPool returns the total volume of the specified pool.
  rpc TotalVolumeForPool(TotalVolumeForPoolRequest)
      returns (TotalVolumeForPoolResponse) {
    option (google.api.http).get =
        "/osmosis/poolmanager/v1beta1/pools/{pool_id}/total_volume";
  }

  // TradingPairTakerFee returns the taker fee for a given set of denoms
  rpc TradingPairTakerFee(TradingPairTakerFeeRequest)
      returns (TradingPairTakerFeeResponse) {
    option (google.api.http).get =
        "/osmosis/poolmanager/v1beta1/trading_pair_takerfee";
  }

  // EstimateTradeBasedOnPriceImpact returns an estimated trade based on price
  // impact, if a trade cannot be estimated a 0 input and 0 output would be
  // returned.
  rpc EstimateTradeBasedOnPriceImpact(EstimateTradeBasedOnPriceImpactRequest)
      returns (EstimateTradeBasedOnPriceImpactResponse) {
    option (google.api.http).get =
        "/osmosis/poolmanager/v1beta1/{pool_id}/estimate_trade";
  }

  // AllTakerFeeShareAgreements returns all taker fee share agreements.
  // A taker fee share agreement includes the denom of the denom getting the
  // taker fees, the percent of the taker fees that the denom gets when it is
  // in the route being traded against, and the address that the taker fees are
  // sent to at epoch.
  rpc AllTakerFeeShareAgreements(AllTakerFeeShareAgreementsRequest)
      returns (AllTakerFeeShareAgreementsResponse) {
    option (google.api.http).get =
        "/osmosis/poolmanager/v1beta1/all_taker_fee_share_agreements";
  }

  // TakerFeeShareAgreementFromDenom returns the taker fee share agreement for a
  // given denom. A taker fee share agreement includes the denom of the denom
  // getting the taker fees, the percent of the taker fees that the denom gets
  // when it is in the route being traded against, and the address that the
  // taker fees are sent to at epoch.
  rpc TakerFeeShareAgreementFromDenom(TakerFeeShareAgreementFromDenomRequest)
      returns (TakerFeeShareAgreementFromDenomResponse) {
    option (google.api.http).get = "/osmosis/poolmanager/v1beta1/{denom}/"
                                   "taker_fee_share_agreement_from_denom";
  }

  // TakerFeeShareDenomsToAccruedValue returns the accrued value (as an Int) of
  // the given taker fee denom (the collected fees) for the given fee share
  // denom (the denom with the taker fee share agreement)
  rpc TakerFeeShareDenomsToAccruedValue(
      TakerFeeShareDenomsToAccruedValueRequest)
      returns (TakerFeeShareDenomsToAccruedValueResponse) {
    option (google.api.http).get =
        "/osmosis/poolmanager/v1beta1/{takerFeeDenom}/{denom}/"
        "taker_fee_share_denoms_to_accrued_value";
  }

  // AllTakerFeeShareAccumulators returns all taker fee share accumulators. A
  // taker fee share accumulator includes the denom of the denom getting the
  // taker fees, and an accumulated value of coins that the denom has accrued
  // since the last time it was distributed in the epoch prior.
  rpc AllTakerFeeShareAccumulators(AllTakerFeeShareAccumulatorsRequest)
      returns (AllTakerFeeShareAccumulatorsResponse) {
    option (google.api.http).get =
        "/osmosis/poolmanager/v1beta1/all_taker_fee_share_accumulators";
  }

  // RegisteredAlloyedPoolFromDenom returns the registered alloyed pool state
  // from the given denom. The registered alloyed pool contains the pool's
  // contract address, along with the current distribution composition of taker
  // fee share denoms within the alloyed pool.
  rpc RegisteredAlloyedPoolFromDenom(RegisteredAlloyedPoolFromDenomRequest)
      returns (RegisteredAlloyedPoolFromDenomResponse) {
    option (google.api.http).get = "/osmosis/poolmanager/v1beta1/{denom}/"
                                   "registered_alloyed_pool_from_denom";
  }

  // RegisteredAlloyedPoolFromPoolId returns the registered alloyed pool state
  // from the given pool id. The registered alloyed pool contains the pool's
  // contract address, along with the current distribution composition of taker
  // fee share denoms within the alloyed pool.
  rpc RegisteredAlloyedPoolFromPoolId(RegisteredAlloyedPoolFromPoolIdRequest)
      returns (RegisteredAlloyedPoolFromPoolIdResponse) {
    option (google.api.http).get = "/osmosis/poolmanager/v1beta1/{pool_id}/"
                                   "registered_alloyed_pool_from_pool_id";
  }

  // AllRegisteredAlloyedPools returns all registered alloyed pools. The
  // registered alloyed pool contains the pool's contract address, along with
  // the current distribution composition of taker fee share denoms within the
  // alloyed pool.
  rpc AllRegisteredAlloyedPools(AllRegisteredAlloyedPoolsRequest)
      returns (AllRegisteredAlloyedPoolsResponse) {
    option (google.api.http).get =
        "/osmosis/poolmanager/v1beta1/all_registered_alloyed_pools";
  }
}

//=============================== Params
message ParamsRequest {}
message ParamsResponse { Params params = 1 [ (gogoproto.nullable) = false ]; }

//=============================== EstimateSwapExactAmountIn
message EstimateSwapExactAmountInRequest {
  // DEPRECATED
  string sender = 1 [
    (gogoproto.moretags) = "yaml:\"sender\",deprecated:\"true\"",
    deprecated = true
  ];
  uint64 pool_id = 2 [
    (gogoproto.moretags) = "yaml:\"pool_id\",deprecated:\"true\"",
    deprecated = true
  ];
  string token_in = 3 [ (gogoproto.moretags) = "yaml:\"token_in\"" ];
  repeated SwapAmountInRoute routes = 4 [
    (gogoproto.moretags) = "yaml:\"routes\"",
    (gogoproto.nullable) = false
  ];
}
message EstimateSwapExactAmountInWithPrimitiveTypesRequest {
  uint64 pool_id = 1 [
    (gogoproto.moretags) = "yaml:\"pool_id\",deprecated:\"true\"",
    deprecated = true
  ];
  string token_in = 2 [ (gogoproto.moretags) = "yaml:\"token_in\"" ];
  repeated uint64 routes_pool_id = 3
      [ (gogoproto.moretags) = "yaml:\"routes_pool_id\"" ];
  repeated string routes_token_out_denom = 4
      [ (gogoproto.moretags) = "yaml:\"routes_token_out_denom\"" ];
}

message EstimateSinglePoolSwapExactAmountInRequest {
  uint64 pool_id = 1 [ (gogoproto.moretags) = "yaml:\"pool_id\"" ];
  string token_in = 2 [ (gogoproto.moretags) = "yaml:\"token_in\"" ];
  string token_out_denom = 3
      [ (gogoproto.moretags) = "yaml:\"token_out_denom\"" ];
}

message EstimateSwapExactAmountInResponse {
  string token_out_amount = 1 [

    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.moretags) = "yaml:\"token_out_amount\"",
    (gogoproto.nullable) = false
  ];
}

//=============================== EstimateSwapExactAmountOut
message EstimateSwapExactAmountOutRequest {
  // DEPRECATED
  string sender = 1 [
    (gogoproto.moretags) = "yaml:\"sender\",deprecated:\"true\"",
    deprecated = true
  ];
  uint64 pool_id = 2 [
    (gogoproto.moretags) = "yaml:\"pool_id\",deprecated:\"true\"",
    deprecated = true
  ];
  repeated SwapAmountOutRoute routes = 3 [
    (gogoproto.moretags) = "yaml:\"routes\"",
    (gogoproto.nullable) = false
  ];
  string token_out = 4 [ (gogoproto.moretags) = "yaml:\"token_out\"" ];
}

message EstimateSwapExactAmountOutWithPrimitiveTypesRequest {
  uint64 pool_id = 1 [
    (gogoproto.moretags) = "yaml:\"pool_id\",deprecated:\"true\"",
    deprecated = true
  ];
  repeated uint64 routes_pool_id = 2
      [ (gogoproto.moretags) = "yaml:\"routes_pool_id\"" ];
  repeated string routes_token_in_denom = 3
      [ (gogoproto.moretags) = "yaml:\"routes_token_in_denom\"" ];
  string token_out = 4 [ (gogoproto.moretags) = "yaml:\"token_out\"" ];
}

message EstimateSinglePoolSwapExactAmountOutRequest {
  uint64 pool_id = 1 [ (gogoproto.moretags) = "yaml:\"pool_id\"" ];
  string token_in_denom = 2
      [ (gogoproto.moretags) = "yaml:\"token_in_denom\"" ];
  string token_out = 3 [ (gogoproto.moretags) = "yaml:\"token_out\"" ];
}

message EstimateSwapExactAmountOutResponse {
  string token_in_amount = 1 [

    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.moretags) = "yaml:\"token_in_amount\"",
    (gogoproto.nullable) = false
  ];
}

//=============================== NumPools
message NumPoolsRequest {}
message NumPoolsResponse {
  uint64 num_pools = 1 [ (gogoproto.moretags) = "yaml:\"num_pools\"" ];
}

//=============================== Pool
message PoolRequest {
  uint64 pool_id = 1 [ (gogoproto.moretags) = "yaml:\"pool_id\"" ];
}
message PoolResponse {
  google.protobuf.Any pool = 1 [ (cosmos_proto.accepts_interface) = "PoolI" ];
}

//=============================== AllPools
message AllPoolsRequest {}
message AllPoolsResponse {
  repeated google.protobuf.Any pools = 1
      [ (cosmos_proto.accepts_interface) = "PoolI" ];
}

// =======================================================
// ListPoolsByDenomRequest
message ListPoolsByDenomRequest {
  string denom = 1 [ (gogoproto.moretags) = "yaml:\"denom\"" ];
}

message ListPoolsByDenomResponse {
  repeated google.protobuf.Any pools = 1
      [ (cosmos_proto.accepts_interface) = "PoolI" ];
}
// ==========================================================
// SpotPriceRequest defines the gRPC request structure for a SpotPrice
// query.
message SpotPriceRequest {
  uint64 pool_id = 1 [ (gogoproto.moretags) = "yaml:\"pool_id\"" ];
  string base_asset_denom = 2
      [ (gogoproto.moretags) = "yaml:\"base_asset_denom\"" ];
  string quote_asset_denom = 3
      [ (gogoproto.moretags) = "yaml:\"quote_asset_denom\"" ];
}

// SpotPriceResponse defines the gRPC response structure for a SpotPrice
// query.
message SpotPriceResponse {
  // String of the Dec. Ex) 10.203uatom
  string spot_price = 1 [ (gogoproto.moretags) = "yaml:\"spot_price\"" ];
}

//=============================== TotalPoolLiquidity
message TotalPoolLiquidityRequest {
  uint64 pool_id = 1 [ (gogoproto.moretags) = "yaml:\"pool_id\"" ];
}

message TotalPoolLiquidityResponse {
  repeated cosmos.base.v1beta1.Coin liquidity = 1 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.moretags) = "yaml:\"liquidity\"",
    (gogoproto.nullable) = false
  ];
}

//=============================== TotalLiquidity
message TotalLiquidityRequest {}

message TotalLiquidityResponse {
  repeated cosmos.base.v1beta1.Coin liquidity = 1 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.moretags) = "yaml:\"liquidity\"",
    (gogoproto.nullable) = false
  ];
}

//=============================== TotalVolumeForPool
message TotalVolumeForPoolRequest {
  uint64 pool_id = 1 [ (gogoproto.moretags) = "yaml:\"pool_id\"" ];
}

message TotalVolumeForPoolResponse {
  repeated cosmos.base.v1beta1.Coin volume = 1 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.moretags) = "yaml:\"volume\"",
    (gogoproto.nullable) = false
  ];
}

//=============================== TradingPairTakerFee
message TradingPairTakerFeeRequest {
  string denom_0 = 1 [ (gogoproto.moretags) = "yaml:\"denom_0\"" ];
  string denom_1 = 2 [ (gogoproto.moretags) = "yaml:\"denom_1\"" ];
}

message TradingPairTakerFeeResponse {
  string taker_fee = 1 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
}

//=============================== EstimateTradeBasedOnPriceImpact

// EstimateTradeBasedOnPriceImpactRequest represents a request to estimate a
// trade for Balancer/StableSwap/Concentrated liquidity pool types based on the
// given parameters.
message EstimateTradeBasedOnPriceImpactRequest {
  // from_coin is the total amount of tokens that the user wants to sell.
  cosmos.base.v1beta1.Coin from_coin = 1 [ (gogoproto.nullable) = false ];

  // to_coin_denom is the denom identifier of the token that the user wants to
  // buy.
  string to_coin_denom = 2;

  // pool_id is the identifier of the liquidity pool that the trade will occur
  // on.
  uint64 pool_id = 3;

  // max_price_impact is the maximum percentage that the user is willing
  // to affect the price of the liquidity pool.
  string max_price_impact = 4 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];

  // external_price is an optional external price that the user can enter.
  // It adjusts the MaxPriceImpact as the SpotPrice of a pool can be changed at
  // any time.
  string external_price = 5 [
    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.nullable) = false
  ];
}

// EstimateTradeBasedOnPriceImpactResponse represents the response data
// for an estimated trade based on price impact. If a trade fails to be
// estimated the response would be 0,0 for input_coin and output_coin and will
// not error.
message EstimateTradeBasedOnPriceImpactResponse {
  // input_coin is the actual input amount that would be tradeable
  // under the specified price impact.
  cosmos.base.v1beta1.Coin input_coin = 1 [ (gogoproto.nullable) = false ];

  // output_coin is the amount of tokens of the ToCoinDenom type
  // that will be received for the actual InputCoin trade.
  cosmos.base.v1beta1.Coin output_coin = 2 [ (gogoproto.nullable) = false ];
}

//=============================== AllTakerFeeShareAgreementsRequest

message AllTakerFeeShareAgreementsRequest {}

message AllTakerFeeShareAgreementsResponse {
  repeated TakerFeeShareAgreement taker_fee_share_agreements = 1
      [ (gogoproto.nullable) = false ];
}

//=============================== TakerFeeShareAgreementFromDenomRequest

message TakerFeeShareAgreementFromDenomRequest { string denom = 1; }

message TakerFeeShareAgreementFromDenomResponse {
  TakerFeeShareAgreement taker_fee_share_agreement = 1
      [ (gogoproto.nullable) = false ];
}

//=============================== TakerFeeShareDenomsToAccruedValueRequest

message TakerFeeShareDenomsToAccruedValueRequest {
  string denom = 1;
  string takerFeeDenom = 2;
}

message TakerFeeShareDenomsToAccruedValueResponse {
  string amount = 1 [
    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.moretags) = "yaml:\"amount\"",
    (gogoproto.nullable) = false
  ];
}

//=============================== AllTakerFeeShareAccumulatorsRequest

message AllTakerFeeShareAccumulatorsRequest {}

message AllTakerFeeShareAccumulatorsResponse {
  repeated TakerFeeSkimAccumulator taker_fee_skim_accumulators = 1
      [ (gogoproto.nullable) = false ];
}

//=============================== RegisteredAlloyedPoolFromDenomRequest

message RegisteredAlloyedPoolFromDenomRequest { string denom = 1; }

message RegisteredAlloyedPoolFromDenomResponse {
  AlloyContractTakerFeeShareState contract_state = 1
      [ (gogoproto.nullable) = false ];
}

//=============================== RegisteredAlloyedPoolFromPoolIdRequest

message RegisteredAlloyedPoolFromPoolIdRequest { uint64 pool_id = 1; }

message RegisteredAlloyedPoolFromPoolIdResponse {
  AlloyContractTakerFeeShareState contract_state = 1
      [ (gogoproto.nullable) = false ];
}

// =============================== AllRegisteredAlloyedPoolsRequest

message AllRegisteredAlloyedPoolsRequest {}

message AllRegisteredAlloyedPoolsResponse {
  repeated AlloyContractTakerFeeShareState contract_states = 1
      [ (gogoproto.nullable) = false ];
}
