syntax = "proto3";
package osmosis.gamm.v1beta1;

import "gogoproto/gogo.proto";
import "osmosis/gamm/v1beta1/tx.proto";

import "cosmos/base/v1beta1/coin.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/osmosis-labs/osmosis/v7/x/gamm/types";

service Query {
  rpc Pools(QueryPoolsRequest) returns (QueryPoolsResponse) {
    option (google.api.http).get = "/osmosis/gamm/v1beta1/pools";
  }
  rpc NumPools(QueryNumPoolsRequest) returns (QueryNumPoolsResponse) {
    option (google.api.http).get = "/osmosis/gamm/v1beta1/num_pools";
  }
  rpc TotalLiquidity(QueryTotalLiquidityRequest)
      returns (QueryTotalLiquidityResponse) {
    option (google.api.http).get = "/osmosis/gamm/v1beta1/total_liquidity";
  }

  // Per Pool gRPC Endpoints
  rpc Pool(QueryPoolRequest) returns (QueryPoolResponse) {
    option (google.api.http).get = "/osmosis/gamm/v1beta1/pools/{poolId}";
  }
  rpc PoolParams(QueryPoolParamsRequest) returns (QueryPoolParamsResponse) {
    option (google.api.http).get =
        "/osmosis/gamm/v1beta1/pools/{poolId}/params";
  }

  rpc TotalPoolLiquidity(QueryTotalPoolLiquidityRequest)
      returns (QueryTotalPoolLiquidityResponse) {
    option (google.api.http).get =
        "/osmosis/gamm/v1beta1/pools/{poolId}/total_pool_liquidity";
  }

  rpc TotalShares(QueryTotalSharesRequest) returns (QueryTotalSharesResponse) {
    option (google.api.http).get =
        "/osmosis/gamm/v1beta1/pools/{poolId}/total_shares";
  }

  rpc SpotPrice(QuerySpotPriceRequest) returns (QuerySpotPriceResponse) {
    option (google.api.http).get =
        "/osmosis/gamm/v1beta1/pools/{poolId}/prices";
  }

  // Estimate the swap.
  rpc EstimateSwapExactAmountIn(QuerySwapExactAmountInRequest)
      returns (QuerySwapExactAmountInResponse) {
    option (google.api.http).get =
        "/osmosis/gamm/v1beta1/{poolId}/estimate/swap_exact_amount_in";
  }
  rpc EstimateSwapExactAmountOut(QuerySwapExactAmountOutRequest)
      returns (QuerySwapExactAmountOutResponse) {
    option (google.api.http).get =
        "/osmosis/gamm/v1beta1/{poolId}/estimate/swap_exact_amount_out";
  }
}

//=============================== Pool
message QueryPoolRequest {
  uint64 poolId = 1 [ (gogoproto.moretags) = "yaml:\"pool_id\"" ];
}
message QueryPoolResponse {
  google.protobuf.Any pool = 1 [ (cosmos_proto.accepts_interface) = "PoolI" ];
}

//=============================== Pools
message QueryPoolsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}
message QueryPoolsResponse {
  repeated google.protobuf.Any pools = 1
      [ (cosmos_proto.accepts_interface) = "PoolI" ];

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

//=============================== NumPools
message QueryNumPoolsRequest {}
message QueryNumPoolsResponse {
  uint64 numPools = 1 [ (gogoproto.moretags) = "yaml:\"num_pools\"" ];
}

//=============================== PoolParams
message QueryPoolParamsRequest {
  uint64 poolId = 1 [ (gogoproto.moretags) = "yaml:\"pool_id\"" ];
}
message QueryPoolParamsResponse { google.protobuf.Any params = 1; }

//=============================== PoolLiquidity
message QueryTotalPoolLiquidityRequest {
  uint64 poolId = 1 [ (gogoproto.moretags) = "yaml:\"pool_id\"" ];
}

message QueryTotalPoolLiquidityResponse {
  repeated cosmos.base.v1beta1.Coin liquidity = 1 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.moretags) = "yaml:\"liquidity\"",
    (gogoproto.nullable) = false
  ];
}

//=============================== TotalShares
message QueryTotalSharesRequest {
  uint64 poolId = 1 [ (gogoproto.moretags) = "yaml:\"pool_id\"" ];
}
message QueryTotalSharesResponse {
  cosmos.base.v1beta1.Coin totalShares = 1 [
    (gogoproto.moretags) = "yaml:\"total_shares\"",
    (gogoproto.nullable) = false
  ];
}

//=============================== SpotPrice
message QuerySpotPriceRequest {
  uint64 poolId = 1 [ (gogoproto.moretags) = "yaml:\"pool_id\"" ];
  string tokenInDenom = 2 [ (gogoproto.moretags) = "yaml:\"token_in_denom\"" ];
  string tokenOutDenom = 3
      [ (gogoproto.moretags) = "yaml:\"token_out_denom\"" ];
  reserved 4;
  reserved "withSwapFee";
}
message QuerySpotPriceResponse {
  // String of the Dec. Ex) 10.203uatom
  string spotPrice = 1 [ (gogoproto.moretags) = "yaml:\"spot_price\"" ];
}

//=============================== EstimateSwapExactAmountIn
message QuerySwapExactAmountInRequest {
  string sender = 1 [ (gogoproto.moretags) = "yaml:\"sender\"" ];
  uint64 poolId = 2 [ (gogoproto.moretags) = "yaml:\"pool_id\"" ];
  string tokenIn = 3 [ (gogoproto.moretags) = "yaml:\"token_in\"" ];
  repeated SwapAmountInRoute routes = 4 [
    (gogoproto.moretags) = "yaml:\"routes\"",
    (gogoproto.nullable) = false
  ];
}

message QuerySwapExactAmountInResponse {
  string tokenOutAmount = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.moretags) = "yaml:\"token_out_amount\"",
    (gogoproto.nullable) = false
  ];
}

//=============================== EstimateSwapExactAmountOut
message QuerySwapExactAmountOutRequest {
  string sender = 1 [ (gogoproto.moretags) = "yaml:\"sender\"" ];
  uint64 poolId = 2 [ (gogoproto.moretags) = "yaml:\"pool_id\"" ];
  repeated SwapAmountOutRoute routes = 3 [
    (gogoproto.moretags) = "yaml:\"routes\"",
    (gogoproto.nullable) = false
  ];
  string tokenOut = 4 [ (gogoproto.moretags) = "yaml:\"token_out\"" ];
}

message QuerySwapExactAmountOutResponse {
  string tokenInAmount = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.moretags) = "yaml:\"token_in_amount\"",
    (gogoproto.nullable) = false
  ];
}

message QueryTotalLiquidityRequest {}

message QueryTotalLiquidityResponse {
  repeated cosmos.base.v1beta1.Coin liquidity = 1 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.moretags) = "yaml:\"liquidity\"",
    (gogoproto.nullable) = false
  ];
}
