syntax = "proto3";
// this is a temporary package setup, needs migration logic
package osmosis.gamm.v1beta1;

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";

import "cosmos/auth/v1beta1/auth.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/osmosis-labs/osmosis/v7/x/gamm/pool-models/balancer";

// Parameters for changing the weights in a balancer pool smoothly from
// a start weight and end weight over a period of time.
// Currently, the only smooth change supported is linear changing between
// the two weights, but more types may be added in the future.
// When these parameters are set, the weight w(t) for pool time `t` is the
// following:
//   t <= start_time: w(t) = initial_pool_weights
//   start_time < t <= start_time + duration:
//     w(t) = initial_pool_weights + (t - start_time) *
//       (target_pool_weights - initial_pool_weights) / (duration)
//   t > start_time + duration: w(t) = target_pool_weights
message SmoothWeightChangeParams {
  // The start time for beginning the weight change.
  // If a parameter change / pool instantiation leaves this blank,
  // it should be generated by the state_machine as the current time.
  google.protobuf.Timestamp start_time = 1 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"start_time\""
  ];
  // Duration for the weights to change over
  google.protobuf.Duration duration = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.stdduration) = true,
    (gogoproto.jsontag) = "duration,omitempty",
    (gogoproto.moretags) = "yaml:\"duration\""
  ];
  // The initial pool weights. These are copied from the pool's settings
  // at the time of weight change instantiation.
  // The amount PoolAsset.token.amount field is ignored if present,
  // future type refactorings should just have a type with the denom & weight
  // here.
  repeated osmosis.gamm.v1beta1.PoolAsset initialPoolWeights = 3 [
    (gogoproto.moretags) = "yaml:\"initial_pool_weights\"",
    (gogoproto.nullable) = false
  ];
  // The target pool weights. The pool weights will change linearly with respect
  // to time between start_time, and start_time + duration. The amount
  // PoolAsset.token.amount field is ignored if present, future type
  // refactorings should just have a type with the denom & weight here.
  repeated osmosis.gamm.v1beta1.PoolAsset targetPoolWeights = 4 [
    (gogoproto.moretags) = "yaml:\"target_pool_weights\"",
    (gogoproto.nullable) = false
  ];
  // Intermediate variable for the 'slope' of pool weights. This is equal to
  // (target_pool_weights - initial_pool_weights) / (duration)
  // TODO: Work out precision, and decide if this is good to add
  // repeated PoolAsset poolWeightSlope = 5 [
  //  (gogoproto.moretags) = "yaml:\"pool_weight_slope\"",
  //  (gogoproto.nullable) = false
  // ];
}

// PoolParams defined the parameters that will be managed by the pool
// governance in the future. This params are not managed by the chain
// governance. Instead they will be managed by the token holders of the pool.
// The pool's token holders are specified in future_pool_governor.
message PoolParams {
  string swapFee = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.moretags) = "yaml:\"swap_fee\"",
    (gogoproto.nullable) = false
  ];
  string exitFee = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.moretags) = "yaml:\"exit_fee\"",
    (gogoproto.nullable) = false
  ];
  SmoothWeightChangeParams smoothWeightChangeParams = 3 [
    (gogoproto.moretags) = "yaml:\"smooth_weight_change_params\"",
    (gogoproto.nullable) = true
  ];
}

// Pool asset is an internal struct that combines the amount of the
// token in the pool, and its balancer weight.
// This is an awkward packaging of data,
// and should be revisited in a future state migration.
message PoolAsset {
  // Coins we are talking about,
  // the denomination must be unique amongst all PoolAssets for this pool.
  cosmos.base.v1beta1.Coin token = 1
      [ (gogoproto.moretags) = "yaml:\"token\"", (gogoproto.nullable) = false ];
  // Weight that is not normalized. This weight must be less than 2^50
  string weight = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.moretags) = "yaml:\"weight\"",
    (gogoproto.nullable) = false
  ];
}

message Pool {
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.goproto_stringer) = false;
  option (cosmos_proto.implements_interface) = "PoolI";

  string address = 1 [ (gogoproto.moretags) = "yaml:\"address\"" ];
  uint64 id = 2;

  PoolParams poolParams = 3 [
    (gogoproto.moretags) = "yaml:\"balancer_pool_params\"",
    (gogoproto.nullable) = false
  ];

  // This string specifies who will govern the pool in the future.
  // Valid forms of this are:
  // {token name},{duration}
  // {duration}
  // where {token name} if specified is the token which determines the
  // governor, and if not specified is the LP token for this pool.duration is
  // a time specified as 0w,1w,2w, etc. which specifies how long the token
  // would need to be locked up to count in governance. 0w means no lockup.
  // TODO: Further improve these docs
  string future_pool_governor = 4
      [ (gogoproto.moretags) = "yaml:\"future_pool_governor\"" ];
  // sum of all LP tokens sent out
  cosmos.base.v1beta1.Coin totalShares = 5 [
    (gogoproto.moretags) = "yaml:\"total_shares\"",
    (gogoproto.nullable) = false
  ];
  // These are assumed to be sorted by denomiation.
  // They contain the pool asset and the information about the weight
  repeated osmosis.gamm.v1beta1.PoolAsset poolAssets = 6 [
    (gogoproto.moretags) = "yaml:\"pool_assets\"",
    (gogoproto.nullable) = false
  ];
  // sum of all non-normalized pool weights
  string totalWeight = 7 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.moretags) = "yaml:\"total_weight\"",
    (gogoproto.nullable) = false
  ];
}
