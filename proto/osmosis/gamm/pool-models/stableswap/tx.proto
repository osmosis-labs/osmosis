syntax = "proto3";
package osmosis.gamm.poolmodels.stableswap.v1beta1;

import "cosmos/base/v1beta1/coin.proto";
import "gogoproto/gogo.proto";
import "osmosis/gamm/pool-models/stableswap/stableswap_pool.proto";

option go_package = "github.com/osmosis-labs/osmosis/v9/x/gamm/pool-models/stableswap";

service Msg {
  rpc CreateStableswapPool(MsgCreateStableswapPool)
      returns (MsgCreateStableswapPoolResponse);
  rpc StableSwapAdjustScalingFactors(MsgStableSwapAdjustScalingFactors)
      returns (MsgStableSwapAdjustScalingFactorsResponse);
}

message MsgCreateStableswapPool {
  string sender = 1 [ (gogoproto.moretags) = "yaml:\"sender\"" ];

  PoolParams poolParams = 2 [ (gogoproto.moretags) = "yaml:\"pool_params\"" ];

  repeated cosmos.base.v1beta1.Coin initial_pool_liquidity = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];

  string future_pool_governor = 4
      [ (gogoproto.moretags) = "yaml:\"future_pool_governor\"" ];
}

message MsgCreateStableswapPoolResponse {
  uint64 pool_id = 1 [ (gogoproto.customname) = "PoolID" ];
}

message MsgStableSwapAdjustScalingFactors {
  // Sender must be the pool's scaling_factor_governor in order for the tx to
  // succeed
  string sender = 1 [ (gogoproto.moretags) = "yaml:\"sender\"" ];
  uint64 pool_id = 2 [ (gogoproto.customname) = "PoolID" ];

  repeated uint64 scaling_factors = 3 [
    (gogoproto.moretags) = "yaml:\"stableswap_scaling_factor\"",
    (gogoproto.nullable) = false
  ];
}

message MsgStableSwapAdjustScalingFactorsResponse {}
