syntax = "proto3";

package osmosis.cosmwasmpool.v1beta1;

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/osmosis-labs/osmosis/v21/x/cosmwasmpool/model";

// CosmWasmPool represents the data serialized into state for each CW pool.
//
// Note: CW Pool has 2 pool models:
// - CosmWasmPool which is a proto-generated store model used for serialization
// into state.
// - Pool struct that encapsulates the CosmWasmPool and wasmKeeper for calling
// the contract.
//
// CosmWasmPool implements the poolmanager.PoolI interface but it panics on all
// methods. The reason is that access to wasmKeeper is required to call the
// contract.
//
// Instead, all interactions and poolmanager.PoolI methods are to be performed
// on the Pool struct. The reason why we cannot have a Pool struct only is
// because it cannot be serialized into state due to having a non-serializable
// wasmKeeper field.
message CosmWasmPool {
  option (gogoproto.goproto_getters) = false;
  option (gogoproto.goproto_stringer) = false;
  option (cosmos_proto.implements_interface) = "PoolI";
  string contract_address = 1
      [ (gogoproto.moretags) = "yaml:\"contract_address\"" ];
  uint64 pool_id = 2;
  uint64 code_id = 3;
  bytes instantiate_msg = 4
      [ (gogoproto.moretags) = "yaml:\"instantiate_msg\"" ];
}
