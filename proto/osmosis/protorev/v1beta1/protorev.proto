syntax = "proto3";
package osmosis.protorev.v1beta1;

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/osmosis-labs/osmosis/v14/x/protorev/types";

// TokenPairArbRoutes tracks all of the hot routes for a given pair of tokens
message TokenPairArbRoutes {
  option (gogoproto.equal) = true;

  // Stores all of the possible hot paths for a given pair of tokens
  repeated Route arb_routes = 1;
  // Token denomination of the first asset
  string token_in = 2;
  // Token denomination of the second asset
  string token_out = 3;
}

// Route is a hot route for a given pair of tokens
message Route {
  option (gogoproto.equal) = true;

  // The pool IDs that are travered in the directed cyclic graph (traversed left
  // -> right)
  repeated Trade trades = 1;
  // The step size that will be used to find the optimal swap amount in the
  // binary search
  string step_size = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = true
  ];
}

// Trade is a single trade in a route
message Trade {
  option (gogoproto.equal) = true;

  // The pool IDs that are travered in the directed cyclic graph (traversed left
  // -> right)
  uint64 pool = 1;
  // The denom of token A that is traded
  string token_in = 2;
  // The denom of token B that is traded
  string token_out = 3;
}

// RouteStatistics contains the number of trades the module has executed after a
// swap on a given route and the profits from the trades
message RouteStatistics {
  // profits is the total profit from all trades on this route
  repeated cosmos.base.v1beta1.Coin profits = 1;
  // number_of_trades is the number of trades the module has executed using this
  // route
  string number_of_trades = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
  // route is the route that was used (pool ids along the arbitrage route)
  repeated uint64 route = 3;
}

// PoolWeights contains the weights of all of the different pool types. This
// distinction is made and necessary because the execution time ranges
// significantly between the different pool types. Each weight roughly
// corresponds to the amount of time (in ms) it takes to execute a swap on that
// pool type.
message PoolWeights {
  // The weight of a stableswap pool
  uint64 stable_weight = 1;
  // The weight of a balancer pool
  uint64 balancer_weight = 2;
  // The weight of a concentrated pool
  uint64 concentrated_weight = 3;
}

// BaseDenom represents a single base denom that the module uses for its
// arbitrage trades. It contains the denom name alongside the step size of the
// binary search that is used to find the optimal swap amount
message BaseDenom {
  // The denom i.e. name of the base denom (ex. uosmo)
  string denom = 1;
  // The step size of the binary search that is used to find the optimal swap
  // amount
  string step_size = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}