syntax = "proto3";
package osmosis.protorev.v1beta1;

import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";

import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/osmosis-labs/osmosis/v19/x/protorev/types";

// TokenPairArbRoutes tracks all of the hot routes for a given pair of tokens
message TokenPairArbRoutes {
  option (gogoproto.equal) = true;

  // Stores all of the possible hot paths for a given pair of tokens
  repeated Route arb_routes = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"arb_routes\""
  ];
  // Token denomination of the first asset
  string token_in = 2 [ (gogoproto.moretags) = "yaml:\"token_in\"" ];
  // Token denomination of the second asset
  string token_out = 3 [ (gogoproto.moretags) = "yaml:\"token_out\"" ];
}

// Route is a hot route for a given pair of tokens
message Route {
  option (gogoproto.equal) = true;

  // The pool IDs that are travered in the directed cyclic graph (traversed left
  // -> right)
  repeated Trade trades = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"trades\""
  ];
  // The step size that will be used to find the optimal swap amount in the
  // binary search
  string step_size = 2 [

    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"step_size\""
  ];
}

// Trade is a single trade in a route
message Trade {
  option (gogoproto.equal) = true;

  // The pool id of the pool that is traded on
  uint64 pool = 1 [ (gogoproto.moretags) = "yaml:\"pool\"" ];
  // The denom of the token that is traded
  string token_in = 2 [ (gogoproto.moretags) = "yaml:\"token_in\"" ];
  // The denom of the token that is received
  string token_out = 3 [ (gogoproto.moretags) = "yaml:\"token_out\"" ];
}

// RouteStatistics contains the number of trades the module has executed after a
// swap on a given route and the profits from the trades
message RouteStatistics {
  // profits is the total profit from all trades on this route
  repeated cosmos.base.v1beta1.Coin profits = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"profits\""
  ];
  // number_of_trades is the number of trades the module has executed using this
  // route
  string number_of_trades = 2 [

    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"number_of_trades\""
  ];
  // route is the route that was used (pool ids along the arbitrage route)
  repeated uint64 route = 3 [ (gogoproto.moretags) = "yaml:\"route\"" ];
}

// PoolWeights contains the weights of all of the different pool types. This
// distinction is made and necessary because the execution time ranges
// significantly between the different pool types. Each weight roughly
// corresponds to the amount of time (in ms) it takes to execute a swap on that
// pool type.
//
// DEPRECATED: This field is deprecated and will be removed in the next
// release. It is replaced by the `info_by_pool_type` field.
message PoolWeights {
  // The weight of a stableswap pool
  uint64 stable_weight = 1 [ (gogoproto.moretags) = "yaml:\"stable_weight\"" ];
  // The weight of a balancer pool
  uint64 balancer_weight = 2
      [ (gogoproto.moretags) = "yaml:\"balancer_weight\"" ];
  // The weight of a concentrated pool
  uint64 concentrated_weight = 3
      [ (gogoproto.moretags) = "yaml:\"concentrated_weight\"" ];
  // The weight of a cosmwasm pool
  uint64 cosmwasm_weight = 4
      [ (gogoproto.moretags) = "yaml:\"cosmwasm_weight\"" ];
}

// InfoByPoolType contains information pertaining to how expensive (in terms of
// gas and time) it is to execute a swap on a given pool type. This distinction
// is made and necessary because the execution time ranges significantly between
// the different pool types.
message InfoByPoolType {
  // The stable pool info
  StablePoolInfo stable = 1 [
    (gogoproto.moretags) = "yaml:\"stable\"",
    (gogoproto.nullable) = false
  ];
  // The balancer pool info
  BalancerPoolInfo balancer = 2 [
    (gogoproto.moretags) = "yaml:\"balancer\"",
    (gogoproto.nullable) = false
  ];
  // The concentrated pool info
  ConcentratedPoolInfo concentrated = 3 [
    (gogoproto.moretags) = "yaml:\"concentrated\"",
    (gogoproto.nullable) = false
  ];
  // The cosmwasm pool info
  CosmwasmPoolInfo cosmwasm = 4 [
    (gogoproto.moretags) = "yaml:\"cosmwasm\"",
    (gogoproto.nullable) = false
  ];
}

// StablePoolInfo contains meta data pertaining to a stableswap pool type.
message StablePoolInfo {
  // The weight of a stableswap pool
  uint64 weight = 1 [ (gogoproto.moretags) = "yaml:\"weight\"" ];
}

// BalancerPoolInfo contains meta data pertaining to a balancer pool type.
message BalancerPoolInfo {
  // The weight of a balancer pool
  uint64 weight = 1 [ (gogoproto.moretags) = "yaml:\"weight\"" ];
}

// ConcentratedPoolInfo contains meta data pertaining to a concentrated pool
// type.
message ConcentratedPoolInfo {
  // The weight of a concentrated pool
  uint64 weight = 1 [ (gogoproto.moretags) = "yaml:\"weight\"" ];
  // The maximum number of ticks we can move when rebalancing
  uint64 max_ticks_crossed = 2
      [ (gogoproto.moretags) = "yaml:\"max_ticks_crossed\"" ];
}

// CosmwasmPoolInfo contains meta data pertaining to a cosmwasm pool type.
message CosmwasmPoolInfo {
  // The weight of a cosmwasm pool (by contract address)
  repeated WeightMap weight_maps = 1 [
    (gogoproto.moretags) = "yaml:\"weight_maps\"",
    (gogoproto.nullable) = false
  ];
}

// WeightMap maps a contract address to a weight. The weight of an address
// corresponds to the amount of ms required to execute a swap on that contract.
message WeightMap {
  // The weight of a cosmwasm pool (by contract address)
  uint64 weight = 1 [ (gogoproto.moretags) = "yaml:\"weight\"" ];
  // The contract address
  string contract_address = 2
      [ (gogoproto.moretags) = "yaml:\"contract_address\"" ];
}

// BaseDenom represents a single base denom that the module uses for its
// arbitrage trades. It contains the denom name alongside the step size of the
// binary search that is used to find the optimal swap amount
message BaseDenom {
  // The denom i.e. name of the base denom (ex. uosmo)
  string denom = 1 [ (gogoproto.moretags) = "yaml:\"denom\"" ];
  // The step size of the binary search that is used to find the optimal swap
  // amount
  string step_size = 2 [

    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"step_size\""
  ];
}