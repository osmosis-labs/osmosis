syntax = "proto3";
package osmosis.protorev.v1beta1;

import "gogoproto/gogo.proto";
import "amino/amino.proto";
import "google/api/annotations.proto";
import "osmosis/protorev/v1beta1/protorev.proto";
import "cosmos_proto/cosmos.proto";

option go_package = "github.com/osmosis-labs/osmosis/v19/x/protorev/types";

service Msg {
  // SetHotRoutes sets the hot routes that will be explored when creating
  // cyclic arbitrage routes. Can only be called by the admin account.
  rpc SetHotRoutes(MsgSetHotRoutes) returns (MsgSetHotRoutesResponse) {
    option (google.api.http).post = "/osmosis/protorev/set_hot_routes";
  };

  // SetDeveloperAccount sets the account that can withdraw a portion of the
  // profits from the protorev module. This will be Skip's address.
  rpc SetDeveloperAccount(MsgSetDeveloperAccount)
      returns (MsgSetDeveloperAccountResponse) {
    option (google.api.http).post = "/osmosis/protorev/set_developer_account";
  };

  // SetMaxPoolPointsPerTx sets the maximum number of pool points that can be
  // consumed per transaction. Can only be called by the admin account.
  rpc SetMaxPoolPointsPerTx(MsgSetMaxPoolPointsPerTx)
      returns (MsgSetMaxPoolPointsPerTxResponse) {
    option (google.api.http).post =
        "/osmosis/protorev/set_max_pool_points_per_tx";
  };

  // SetMaxPoolPointsPerBlock sets the maximum number of pool points that can be
  // consumed per block. Can only be called by the admin account.
  rpc SetMaxPoolPointsPerBlock(MsgSetMaxPoolPointsPerBlock)
      returns (MsgSetMaxPoolPointsPerBlockResponse) {
    option (google.api.http).post =
        "/osmosis/protorev/set_max_pool_points_per_block";
  };

  // SetInfoByPoolType sets the pool type information needed to make smart
  // assumptions about swapping on different pool types
  rpc SetInfoByPoolType(MsgSetInfoByPoolType)
      returns (MsgSetInfoByPoolTypeResponse) {
    option (google.api.http).post = "/osmosis/protorev/set_info_by_pool_type";
  };

  // SetBaseDenoms sets the base denoms that will be used to create cyclic
  // arbitrage routes. Can only be called by the admin account.
  rpc SetBaseDenoms(MsgSetBaseDenoms) returns (MsgSetBaseDenomsResponse) {
    option (google.api.http).post = "/osmosis/protorev/set_base_denoms";
  };
}

// MsgSetHotRoutes defines the Msg/SetHotRoutes request type.
message MsgSetHotRoutes {
  option (amino.name) = "osmosis/MsgSetHotRoutes";

  // admin is the account that is authorized to set the hot routes.
  string admin = 1 [
    (gogoproto.moretags) = "yaml:\"admin\"",
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];
  // hot_routes is the list of hot routes to set.
  repeated TokenPairArbRoutes hot_routes = 2 [
    (gogoproto.moretags) = "yaml:\"hot_routes\"",
    (gogoproto.nullable) = false
  ];
}

// MsgSetHotRoutesResponse defines the Msg/SetHotRoutes response type.
message MsgSetHotRoutesResponse {}

// MsgSetDeveloperAccount defines the Msg/SetDeveloperAccount request type.
message MsgSetDeveloperAccount {
  option (amino.name) = "osmosis/MsgSetDeveloperAccount";

  // admin is the account that is authorized to set the developer account.
  string admin = 1 [
    (gogoproto.moretags) = "yaml:\"admin\"",
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];
  // developer_account is the account that will receive a portion of the profits
  // from the protorev module.
  string developer_account = 2
      [ (gogoproto.moretags) = "yaml:\"developer_account\"" ];
}

// MsgSetDeveloperAccountResponse defines the Msg/SetDeveloperAccount response
// type.
message MsgSetDeveloperAccountResponse {}

// MsgSetInfoByPoolType defines the Msg/SetInfoByPoolType request type.
message MsgSetInfoByPoolType {
  option (amino.name) = "osmosis/MsgSetInfoByPoolType";

  // admin is the account that is authorized to set the pool weights.
  string admin = 1 [
    (gogoproto.moretags) = "yaml:\"admin\"",
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];
  // info_by_pool_type contains information about the pool types.
  InfoByPoolType info_by_pool_type = 2 [
    (gogoproto.moretags) = "yaml:\"info_by_pool_type\"",
    (gogoproto.nullable) = false
  ];
}

// MsgSetInfoByPoolTypeResponse defines the Msg/SetInfoByPoolType response type.
message MsgSetInfoByPoolTypeResponse {}

// MsgSetMaxPoolPointsPerTx defines the Msg/SetMaxPoolPointsPerTx request type.
message MsgSetMaxPoolPointsPerTx {
  option (amino.name) = "osmosis/MsgSetMaxPoolPointsPerTx";

  // admin is the account that is authorized to set the max pool points per tx.
  string admin = 1 [
    (gogoproto.moretags) = "yaml:\"admin\"",
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];
  // max_pool_points_per_tx is the maximum number of pool points that can be
  // consumed per transaction.
  uint64 max_pool_points_per_tx = 2
      [ (gogoproto.moretags) = "yaml:\"max_pool_points_per_tx\"" ];
}

// MsgSetMaxPoolPointsPerTxResponse defines the Msg/SetMaxPoolPointsPerTx
// response type.
message MsgSetMaxPoolPointsPerTxResponse {}

// MsgSetMaxPoolPointsPerBlock defines the Msg/SetMaxPoolPointsPerBlock request
// type.
message MsgSetMaxPoolPointsPerBlock {
  option (amino.name) = "osmosis/MsgSetPoolWeights";

  // admin is the account that is authorized to set the max pool points per
  // block.
  string admin = 1 [
    (gogoproto.moretags) = "yaml:\"admin\"",
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];
  // max_pool_points_per_block is the maximum number of pool points that can be
  // consumed per block.
  uint64 max_pool_points_per_block = 2
      [ (gogoproto.moretags) = "yaml:\"max_pool_points_per_block\"" ];
}

// MsgSetMaxPoolPointsPerBlockResponse defines the
// Msg/SetMaxPoolPointsPerBlock response type.
message MsgSetMaxPoolPointsPerBlockResponse {}

// MsgSetBaseDenoms defines the Msg/SetBaseDenoms request type.
message MsgSetBaseDenoms {
  option (amino.name) = "osmosis/MsgSetBaseDenoms";

  // admin is the account that is authorized to set the base denoms.
  string admin = 1 [
    (gogoproto.moretags) = "yaml:\"admin\"",
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];
  // base_denoms is the list of base denoms to set.
  repeated BaseDenom base_denoms = 2 [
    (gogoproto.moretags) = "yaml:\"base_denoms\"",
    (gogoproto.nullable) = false
  ];
}

// MsgSetBaseDenomsResponse defines the Msg/SetBaseDenoms response type.
message MsgSetBaseDenomsResponse {}