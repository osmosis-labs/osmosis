syntax = "proto3";
package osmosis.protorev.v1beta1;

import "gogoproto/gogo.proto";
import "osmosis/protorev/v1beta1/protorev.proto";
import "osmosis/protorev/v1beta1/params.proto";
import "cosmos_proto/cosmos.proto";

import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/osmosis-labs/osmosis/v21/x/protorev/types";

// GenesisState defines the protorev module's genesis state.
message GenesisState {
  // Parameters for the protorev module.
  Params params = 1 [ (gogoproto.nullable) = false ];
  // Token pair arb routes for the protorev module (hot routes).
  repeated TokenPairArbRoutes token_pair_arb_routes = 2 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"token_pair_arb_routes\""
  ];
  // The base denominations being used to create cyclic arbitrage routes via the
  // highest liquidity method.
  repeated BaseDenom base_denoms = 3 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"base_denoms\""
  ];
  // The pool weights that are being used to calculate the weight (compute cost)
  // of each route.
  //
  // DEPRECATED: This field is deprecated and will be removed in the next
  // release. It is replaced by the `info_by_pool_type` field.
  PoolWeights pool_weights = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"pool_weights\""
  ];
  // The number of days since module genesis.
  uint64 days_since_module_genesis = 5
      [ (gogoproto.moretags) = "yaml:\"days_since_module_genesis\"" ];
  // The fees the developer account has accumulated over time.
  repeated cosmos.base.v1beta1.Coin developer_fees = 6 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"developer_fees\""
  ];
  // The latest block height that the module has processed.
  uint64 latest_block_height = 7
      [ (gogoproto.moretags) = "yaml:\"latest_block_height\"" ];
  // The developer account address of the module.
  string developer_address = 8 [
    (cosmos_proto.scalar) = "cosmos.Address",
    (gogoproto.moretags) = "yaml:\"developer_address\""
  ];
  // Max pool points per block i.e. the maximum compute time (in ms)
  // that protorev can use per block.
  uint64 max_pool_points_per_block = 9
      [ (gogoproto.moretags) = "yaml:\"max_pool_points_per_block\"" ];
  // Max pool points per tx i.e. the maximum compute time (in ms) that
  // protorev can use per tx.
  uint64 max_pool_points_per_tx = 10
      [ (gogoproto.moretags) = "yaml:\"max_pool_points_per_tx\"" ];
  // The number of pool points that have been consumed in the current block.
  uint64 point_count_for_block = 11
      [ (gogoproto.moretags) = "yaml:\"point_count_for_block\"" ];
  // All of the profits that have been accumulated by the module.
  repeated cosmos.base.v1beta1.Coin profits = 12 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"profits\""
  ];
  // Information that is used to estimate execution time / gas
  // consumption of a swap on a given pool type.
  InfoByPoolType info_by_pool_type = 13 [
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"info_by_pool_type\""
  ];
  CyclicArbTracker cyclic_arb_tracker = 14
      [ (gogoproto.moretags) = "yaml:\"cyclic_arb_tracker\"" ];
}
