syntax = "proto3";
package osmosis.incentives;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/duration.proto";
import "cosmos/base/v1beta1/coin.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "osmosis/incentives/gauge.proto";
import "osmosis/lockup/lock.proto";

option go_package = "github.com/osmosis-labs/osmosis/v7/x/incentives/types";

// Query defines the gRPC querier service.
service Query {
  // returns coins that is going to be distributed
  rpc ModuleToDistributeCoins(ModuleToDistributeCoinsRequest)
      returns (ModuleToDistributeCoinsResponse) {
    option (google.api.http).get =
        "/osmosis/incentives/v1beta1/module_to_distribute_coins";
  }
  // returns coins that are distributed by module so far
  rpc ModuleDistributedCoins(ModuleDistributedCoinsRequest)
      returns (ModuleDistributedCoinsResponse) {
    option (google.api.http).get =
        "/osmosis/incentives/v1beta1/module_distributed_coins";
  }

  // returns Gauge by id
  rpc GaugeByID(GaugeByIDRequest) returns (GaugeByIDResponse) {
    option (google.api.http).get =
        "/osmosis/incentives/v1beta1/gauge_by_id/{id}";
  }
  // returns gauges both upcoming and active
  rpc Gauges(GaugesRequest) returns (GaugesResponse) {
    option (google.api.http).get = "/osmosis/incentives/v1beta1/gauges";
  }
  // returns active gauges
  rpc ActiveGauges(ActiveGaugesRequest) returns (ActiveGaugesResponse) {
    option (google.api.http).get = "/osmosis/incentives/v1beta1/active_gauges";
  }
  rpc ActiveGaugesPerDenom(ActiveGaugesPerDenomRequest)
      returns (ActiveGaugesPerDenomResponse) {
    option (google.api.http).get =
        "/osmosis/incentives/v1beta1/active_gauges_per_denom";
  }
  // returns scheduled gauges
  rpc UpcomingGauges(UpcomingGaugesRequest) returns (UpcomingGaugesResponse) {
    option (google.api.http).get =
        "/osmosis/incentives/v1beta1/upcoming_gauges";
  }
  // RewardsEst returns an estimate of the rewards at a future specific time.
  // The querier either provides an address or a set of locks
  // for which they want to find the associated rewards.
  rpc RewardsEst(RewardsEstRequest) returns (RewardsEstResponse) {
    option (google.api.http).get =
        "/osmosis/incentives/v1beta1/rewards_est/{owner}";
  }
  // returns lockable durations that are valid to give incentives
  rpc LockableDurations(QueryLockableDurationsRequest)
      returns (QueryLockableDurationsResponse) {
    option (google.api.http).get =
        "/osmosis/incentives/v1beta1/lockable_durations";
  }
}

message ModuleToDistributeCoinsRequest {}
message ModuleToDistributeCoinsResponse {
  repeated cosmos.base.v1beta1.Coin coins = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message ModuleDistributedCoinsRequest {}
message ModuleDistributedCoinsResponse {
  repeated cosmos.base.v1beta1.Coin coins = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message GaugeByIDRequest { uint64 id = 1; }
message GaugeByIDResponse { Gauge gauge = 1; }

message GaugesRequest {
  // pagination defines an pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}
message GaugesResponse {
  repeated Gauge data = 1 [ (gogoproto.nullable) = false ];
  // pagination defines an pagination for the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message ActiveGaugesRequest {
  // pagination defines an pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}
message ActiveGaugesResponse {
  repeated Gauge data = 1 [ (gogoproto.nullable) = false ];
  // pagination defines an pagination for the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message ActiveGaugesPerDenomRequest {
  string denom = 1;
  // pagination defines an pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}
message ActiveGaugesPerDenomResponse {
  repeated Gauge data = 1 [ (gogoproto.nullable) = false ];
  // pagination defines an pagination for the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message UpcomingGaugesRequest {
  // pagination defines an pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}
message UpcomingGaugesResponse {
  repeated Gauge data = 1 [ (gogoproto.nullable) = false ];
  // pagination defines an pagination for the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message RewardsEstRequest {
  string owner = 1 [ (gogoproto.moretags) = "yaml:\"owner\"" ];
  repeated uint64 lock_ids = 2;
  int64 end_epoch = 3;
}
message RewardsEstResponse {
  repeated cosmos.base.v1beta1.Coin coins = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message QueryLockableDurationsRequest {}
message QueryLockableDurationsResponse {
  repeated google.protobuf.Duration lockable_durations = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.stdduration) = true,
    (gogoproto.moretags) = "yaml:\"lockable_durations\""
  ];
}