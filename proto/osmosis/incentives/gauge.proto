syntax = "proto3";
package osmosis.incentives;

import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "cosmos/base/v1beta1/coin.proto";
import "osmosis/lockup/lock.proto";

option go_package = "github.com/osmosis-labs/osmosis/v7/x/incentives/types";

message Gauge {
  // unique ID of a Gauge
  uint64 id = 1;
  // flag to show if it's perpetual or multi-epoch
  // distribution incentives by third party
  bool is_perpetual = 2;
  // Rewards are distributed to lockups that are are returned by at least one of
  // these queries
  osmosis.lockup.QueryCondition distribute_to = 3
      [ (gogoproto.nullable) = false ];
  // total amount of Coins that has been in the gauge.
  // can distribute multiple coins
  repeated cosmos.base.v1beta1.Coin coins = 4 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  // distribution start time
  google.protobuf.Timestamp start_time = 5 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false,
    (gogoproto.moretags) = "yaml:\"start_time\""
  ];
  // number of epochs distribution will be done
  uint64 num_epochs_paid_over = 6;
  // number of epochs distributed already
  uint64 filled_epochs = 7;
  // already distributed coins
  repeated cosmos.base.v1beta1.Coin distributed_coins = 8 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
}

message LockableDurationsInfo {
  repeated google.protobuf.Duration lockable_durations = 1 [
    (gogoproto.nullable) = false,
    (gogoproto.stdduration) = true,
    (gogoproto.moretags) = "yaml:\"lockable_durations\""
  ];
}