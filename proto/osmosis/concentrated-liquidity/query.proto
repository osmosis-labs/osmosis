syntax = "proto3";
package osmosis.concentratedliquidity.v1beta1;

import "gogoproto/gogo.proto";
import "osmosis/concentrated-liquidity/params.proto";

import "cosmos/base/v1beta1/coin.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "cosmos_proto/cosmos.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

import "osmosis/concentrated-liquidity/position.proto";

option go_package = "github.com/osmosis-labs/osmosis/v15/x/concentrated-liquidity/client/queryproto";

service Query {
  // Pools returns all concentrated liquidity pools
  rpc Pools(PoolsRequest) returns (PoolsResponse) {
    option (google.api.http).get =
        "/osmosis/concentratedliquidity/v1beta1/pools";
  }

  // Params returns concentrated liquidity module params.
  rpc Params(ParamsRequest) returns (ParamsResponse) {
    option (google.api.http).get =
        "/osmosis/concentratedliquidity/v1beta1/params";
  }

  // UserPositions returns all concentrated postitions of some address.
  rpc UserPositions(UserPositionsRequest) returns (UserPositionsResponse) {
    option (google.api.http).get =
        "/osmosis/concentratedliquidity/v1beta1/positions/{address}";
  }

  // LiquidityPerTickRange returns the amount of liquidity per every tick range
  // existing within the given pool
  rpc LiquidityPerTickRange(LiquidityPerTickRangeRequest)
      returns (LiquidityPerTickRangeResponse) {
    option (google.api.http).get =
        "/osmosis/concentratedliquidity/v1beta1/liquidity_per_tick_range";
  }

  // LiquidityNetInDirection returns liquidity net in the direction given.
  // Uses the bound if specified, if not uses either min tick / max tick
  // depending on the direction.
  rpc LiquidityNetInDirection(LiquidityNetInDirectionRequest)
      returns (LiquidityNetInDirectionResponse) {
    option (google.api.http).get = "/osmosis/concentratedliquidity/v1beta1/"
                                   "liquidity_net_in_direction";
  }

  // ClaimableFees returns the amount of fees that can be claimed by a position
  // with the given id.
  rpc ClaimableFees(ClaimableFeesRequest) returns (ClaimableFeesResponse) {
    option (google.api.http).get =
        "/osmosis/concentratedliquidity/v1beta1/claimable_fees";
  };

  // ClaimableIncentives returns the amount of incentives that can be claimed
  // and how many would be forfeited by a position with the given id.
  rpc ClaimableIncentives(ClaimableIncentivesRequest)
      returns (ClaimableIncentivesResponse) {
    option (google.api.http).get =
        "/osmosis/concentratedliquidity/v1beta1/claimable_incentives";
  };

  // PositionById returns a position with the given id.
  rpc PositionById(PositionByIdRequest) returns (PositionByIdResponse) {
    option (google.api.http).get =
        "/osmosis/concentratedliquidity/v1beta1/position_by_id";
  };
}

//=============================== UserPositions
message UserPositionsRequest {
  string address = 1 [ (gogoproto.moretags) = "yaml:\"address\"" ];
  uint64 pool_id = 2 [ (gogoproto.moretags) = "yaml:\"pool_id\"" ];
}

message UserPositionsResponse {
  repeated FullPositionBreakdown positions = 1 [ (gogoproto.nullable) = false ];
}

//=============================== PositionById
message PositionByIdRequest {
  uint64 position_id = 1 [ (gogoproto.moretags) = "yaml:\"position_id\"" ];
}

message PositionByIdResponse {
  FullPositionBreakdown position = 1 [ (gogoproto.nullable) = false ];
}

//=============================== Pools
message PoolsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}
message PoolsResponse {
  repeated google.protobuf.Any pools = 1
      [ (cosmos_proto.accepts_interface) = "PoolI" ];

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

//=============================== ModuleParams
message ParamsRequest {}
message ParamsResponse { Params params = 1 [ (gogoproto.nullable) = false ]; }

message TickLiquidityNet {
  string liquidity_net = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.moretags) = "yaml:\"liquidity_net\"",
    (gogoproto.nullable) = false
  ];
  int64 tick_index = 2 [ (gogoproto.moretags) = "yaml:\"tick_index\"" ];
}

message LiquidityDepthWithRange {
  string liquidity_amount = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.moretags) = "yaml:\"liquidity_net\"",
    (gogoproto.nullable) = false
  ];
  int64 lower_tick = 2 [ (gogoproto.moretags) = "yaml:\"lower_tick\"" ];
  int64 upper_tick = 3 [ (gogoproto.moretags) = "yaml:\"upper_tick\"" ];
}

//=============================== LiquidityNetInDirection
message LiquidityNetInDirectionRequest {
  uint64 pool_id = 1 [ (gogoproto.moretags) = "yaml:\"pool_id\"" ];
  string token_in = 2 [ (gogoproto.moretags) = "yaml:\"token_in\"" ];
  int64 start_tick = 3 [ (gogoproto.moretags) = "yaml:\"start_tick\"" ];
  bool use_cur_tick = 4 [ (gogoproto.moretags) = "yaml:\"use_cur_tick\"" ];
  int64 bound_tick = 5 [ (gogoproto.moretags) = "yaml:\"bound_tick\"" ];
  bool use_no_bound = 6 [ (gogoproto.moretags) = "yaml:\"use_no_bound\"" ];
}
message LiquidityNetInDirectionResponse {
  repeated TickLiquidityNet liquidity_depths = 1
      [ (gogoproto.nullable) = false ];
  int64 current_tick = 2;
  string current_liquidity = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.moretags) = "yaml:\"current_liquidity\"",
    (gogoproto.nullable) = false
  ];
}

//=============================== LiquidityPerTickRange
message LiquidityPerTickRangeRequest {
  uint64 pool_id = 1 [ (gogoproto.moretags) = "yaml:\"pool_id\"" ];
}
message LiquidityPerTickRangeResponse {
  repeated LiquidityDepthWithRange liquidity = 1
      [ (gogoproto.nullable) = false ];
}

// ===================== QueryClaimableFees
message ClaimableFeesRequest {
  uint64 position_id = 1 [ (gogoproto.moretags) = "yaml:\"position_id\"" ];
}

message ClaimableFeesResponse {
  repeated cosmos.base.v1beta1.Coin claimable_fees = 1 [
    (gogoproto.moretags) = "yaml:\"claimable_fees\"",
    (gogoproto.nullable) = false
  ];
}

// ===================== QueryClaimableIncentives
message ClaimableIncentivesRequest {
  uint64 position_id = 1 [ (gogoproto.moretags) = "yaml:\"position_id\"" ];
}

message ClaimableIncentivesResponse {
  repeated cosmos.base.v1beta1.Coin claimable_incentives = 1 [
    (gogoproto.moretags) = "yaml:\"claimable_incentives\"",
    (gogoproto.nullable) = false
  ];
  repeated cosmos.base.v1beta1.Coin forfeited_incentives = 2 [
    (gogoproto.moretags) = "yaml:\"forfeited_incentives\"",
    (gogoproto.nullable) = false
  ];
}