syntax = "proto3";
package osmosis.concentratedliquidity.v1beta1;

import "gogoproto/gogo.proto";
import "amino/amino.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/osmosis-labs/osmosis/v19/x/concentrated-liquidity/types";

service Msg {
  rpc CreatePosition(MsgCreatePosition) returns (MsgCreatePositionResponse);
  rpc WithdrawPosition(MsgWithdrawPosition)
      returns (MsgWithdrawPositionResponse);
  // AddToPosition attempts to add amount0 and amount1 to a position
  // with the given position id.
  // To maintain backwards-compatibility with future implementations of
  // charging, this function deletes the old position and creates a new one with
  // the resulting amount after addition.
  rpc AddToPosition(MsgAddToPosition) returns (MsgAddToPositionResponse);
  rpc CollectSpreadRewards(MsgCollectSpreadRewards)
      returns (MsgCollectSpreadRewardsResponse);
  rpc CollectIncentives(MsgCollectIncentives)
      returns (MsgCollectIncentivesResponse);
}

// ===================== MsgCreatePosition
message MsgCreatePosition {
  option (amino.name) = "osmosis/cl-create-position";

  uint64 pool_id = 1 [ (gogoproto.moretags) = "yaml:\"pool_id\"" ];
  string sender = 2 [ (gogoproto.moretags) = "yaml:\"sender\"" ];
  int64 lower_tick = 3 [ (gogoproto.moretags) = "yaml:\"lower_tick\"" ];
  int64 upper_tick = 4 [ (gogoproto.moretags) = "yaml:\"upper_tick\"" ];
  // tokens_provided is the amount of tokens provided for the position.
  // It must at a minimum be of length 1 (for a single sided position)
  // and at a maximum be of length 2 (for a position that straddles the current
  // tick).
  repeated cosmos.base.v1beta1.Coin tokens_provided = 5 [
    (gogoproto.nullable) = false,
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins"
  ];
  string token_min_amount0 = 6 [

    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.moretags) = "yaml:\"token_min_amount0\"",
    (gogoproto.nullable) = false
  ];
  string token_min_amount1 = 7 [

    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.moretags) = "yaml:\"token_min_amount1\"",
    (gogoproto.nullable) = false
  ];
}

message MsgCreatePositionResponse {
  uint64 position_id = 1 [ (gogoproto.moretags) = "yaml:\"position_id\"" ];
  string amount0 = 2 [

    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.moretags) = "yaml:\"amount0\"",
    (gogoproto.nullable) = false
  ];
  string amount1 = 3 [

    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.moretags) = "yaml:\"amount1\"",
    (gogoproto.nullable) = false
  ];
  string liquidity_created = 5 [

    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.moretags) = "yaml:\"liquidity_created\"",
    (gogoproto.nullable) = false
  ];
  // the lower and upper tick are in the response because there are
  // instances in which multiple ticks represent the same price, so
  // we may move their provided tick to the canonical tick that represents
  // the same price.
  int64 lower_tick = 6 [ (gogoproto.moretags) = "yaml:\"lower_tick\"" ];
  int64 upper_tick = 7 [ (gogoproto.moretags) = "yaml:\"upper_tick\"" ];
}

// ===================== MsgAddToPosition
message MsgAddToPosition {
  option (amino.name) = "osmosis/cl-add-to-position";

  uint64 position_id = 1 [ (gogoproto.moretags) = "yaml:\"position_id\"" ];
  string sender = 2 [ (gogoproto.moretags) = "yaml:\"sender\"" ];
  // amount0 represents the amount of token0 willing to put in.
  string amount0 = 3 [

    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.moretags) = "yaml:\"amount_0\"",
    (gogoproto.nullable) = false
  ];
  // amount1 represents the amount of token1 willing to put in.
  string amount1 = 4 [

    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.moretags) = "yaml:\"amount_1\"",
    (gogoproto.nullable) = false
  ];
  // token_min_amount0 represents the minimum amount of token0 desired from the
  // new position being created. Note that this field indicates the min amount0
  // corresponding to the liquidity that is being added, not the total
  // liquidity of the position.
  string token_min_amount0 = 5 [

    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.moretags) = "yaml:\"token_min_amount0\"",
    (gogoproto.nullable) = false
  ];
  // token_min_amount1 represents the minimum amount of token1 desired from the
  // new position being created. Note that this field indicates the min amount1
  // corresponding to the liquidity that is being added, not the total
  // liquidity of the position.
  string token_min_amount1 = 6 [

    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.moretags) = "yaml:\"token_min_amount1\"",
    (gogoproto.nullable) = false
  ];
}

message MsgAddToPositionResponse {
  uint64 position_id = 1 [ (gogoproto.moretags) = "yaml:\"position_id\"" ];
  string amount0 = 2 [

    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.moretags) = "yaml:\"amount0\"",
    (gogoproto.nullable) = false
  ];
  string amount1 = 3 [

    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.moretags) = "yaml:\"amount1\"",
    (gogoproto.nullable) = false
  ];
}

// ===================== MsgWithdrawPosition
message MsgWithdrawPosition {
  option (amino.name) = "osmosis/cl-withdraw-position";

  uint64 position_id = 1 [ (gogoproto.moretags) = "yaml:\"position_id\"" ];
  string sender = 2 [ (gogoproto.moretags) = "yaml:\"sender\"" ];
  string liquidity_amount = 3 [

    (gogoproto.customtype) = "cosmossdk.io/math.LegacyDec",
    (gogoproto.moretags) = "yaml:\"liquidity_amount\"",
    (gogoproto.nullable) = false
  ];
}

message MsgWithdrawPositionResponse {
  string amount0 = 1 [

    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.moretags) = "yaml:\"amount0\"",
    (gogoproto.nullable) = false
  ];
  string amount1 = 2 [

    (gogoproto.customtype) = "cosmossdk.io/math.Int",
    (gogoproto.moretags) = "yaml:\"amount1\"",
    (gogoproto.nullable) = false
  ];
}

// ===================== MsgCollectSpreadRewards
message MsgCollectSpreadRewards {
  option (amino.name) = "osmosis/cl-col-sp-rewards";

  repeated uint64 position_ids = 1
      [ (gogoproto.moretags) = "yaml:\"position_ids\"" ];
  string sender = 2 [ (gogoproto.moretags) = "yaml:\"sender\"" ];
}

message MsgCollectSpreadRewardsResponse {
  repeated cosmos.base.v1beta1.Coin collected_spread_rewards = 1 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.moretags) = "yaml:\"collected_spread_rewards\"",
    (gogoproto.nullable) = false
  ];
}

// ===================== MsgCollectIncentives
message MsgCollectIncentives {
  option (amino.name) = "osmosis/cl-collect-incentives";

  repeated uint64 position_ids = 1
      [ (gogoproto.moretags) = "yaml:\"position_ids\"" ];
  string sender = 2 [ (gogoproto.moretags) = "yaml:\"sender\"" ];
}

message MsgCollectIncentivesResponse {
  repeated cosmos.base.v1beta1.Coin collected_incentives = 1 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.moretags) = "yaml:\"collected_incentives\"",
    (gogoproto.nullable) = false
  ];
  repeated cosmos.base.v1beta1.Coin forfeited_incentives = 2 [
    (gogoproto.castrepeated) = "github.com/cosmos/cosmos-sdk/types.Coins",
    (gogoproto.moretags) = "yaml:\"forfeited_incentives\"",
    (gogoproto.nullable) = false
  ];
}

// ===================== MsgFungifyChargedPositions
message MsgFungifyChargedPositions {
  option (amino.name) = "osmosis/cl-fungify-charged-positions";

  repeated uint64 position_ids = 1
      [ (gogoproto.moretags) = "yaml:\"position_ids\"" ];
  string sender = 2 [ (gogoproto.moretags) = "yaml:\"sender\"" ];
}

message MsgFungifyChargedPositionsResponse {
  uint64 new_position_id = 1
      [ (gogoproto.moretags) = "yaml:\"new_position_id\"" ];
}