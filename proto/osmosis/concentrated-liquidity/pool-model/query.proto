syntax = "proto3";
package osmosis.concentratedliquidity.v1beta1;

import "gogoproto/gogo.proto";
import "osmosis/concentrated-liquidity/params.proto";

import "cosmos/base/v1beta1/coin.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "google/api/annotations.proto";
import "google/protobuf/any.proto";
import "cosmos_proto/cosmos.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

import "osmosis/concentrated-liquidity/position.proto";

option go_package = "github.com/osmosis-labs/osmosis/v15/x/concentrated-liquidity/types/query";

service Query {
  // Pools returns all concentrated liquidity pools
  rpc Pools(QueryPoolsRequest) returns (QueryPoolsResponse) {
    option (google.api.http).get =
        "/osmosis/concentratedliquidity/v1beta1/pools";
  }

  // Params returns concentrated liquidity module params.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get =
        "/osmosis/concentratedliquidity/v1beta1/params";
  }

  // LiquidityDepthsForRange returns Liqiudity Depths for given range
  rpc LiquidityDepthsForRange(QueryLiquidityDepthsForRangeRequest)
      returns (QueryLiquidityDepthsForRangeResponse) {
    option (google.api.http).get =
        "/osmosis/concentratedliquidity/v1beta1/liquidity_depths_for_range";
  }
  // UserPositions returns all concentrated postitions of some address.
  rpc UserPositions(QueryUserPositionsRequest)
      returns (QueryUserPositionsResponse) {
    option (google.api.http).get =
        "/osmosis/concentratedliquidity/v1beta1/positions/{address}";
  }

  rpc ClaimableFees(QueryClaimableFeesRequest)
      returns (QueryClaimableFeesResponse);
}

//=============================== Positions
message QueryUserPositionsRequest {
  string address = 1 [ (gogoproto.moretags) = "yaml:\"address\"" ];
  uint64 pool_id = 2 [ (gogoproto.moretags) = "yaml:\"pool_id\"" ];
}

message QueryUserPositionsResponse {
  repeated PositionWithUnderlyingAssetBreakdown positions = 1
      [ (gogoproto.nullable) = false ];
}

//=============================== Pools
message QueryPoolsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}
message QueryPoolsResponse {
  repeated google.protobuf.Any pools = 1
      [ (cosmos_proto.accepts_interface) = "PoolI" ];

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

//=============================== ModuleParams
message QueryParamsRequest {}
message QueryParamsResponse {
  Params params = 1 [ (gogoproto.nullable) = false ];
}

//=============================== LiquidityDepthsForRange
message QueryLiquidityDepthsForRangeRequest {
  uint64 pool_id = 1 [ (gogoproto.moretags) = "yaml:\"pool_id\"" ];
  string lower_tick = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.moretags) = "yaml:\"lower_tick\"",
    (gogoproto.nullable) = false
  ];
  string upper_tick = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.moretags) = "yaml:\"upper_tick\"",
    (gogoproto.nullable) = false
  ];
}
message QueryLiquidityDepthsForRangeResponse {
  repeated LiquidityDepth liquidity_depths = 1 [ (gogoproto.nullable) = false ];
}

message LiquidityDepth {
  string liquidity_net = 1 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.moretags) = "yaml:\"liquidity_net\"",
    (gogoproto.nullable) = false
  ];
  string tick_index = 2 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.moretags) = "yaml:\"tick\"",
    (gogoproto.nullable) = false
  ];
}

// ===================== MsgQueryClaimableFees
message QueryClaimableFeesRequest {
  uint64 pool_id = 1 [ (gogoproto.moretags) = "yaml:\"pool_id\"" ];
  string sender = 2 [ (gogoproto.moretags) = "yaml:\"sender\"" ];
  int64 lower_tick = 3 [ (gogoproto.moretags) = "yaml:\"lower_tick\"" ];
  int64 upper_tick = 4 [ (gogoproto.moretags) = "yaml:\"upper_tick\"" ];
}

message QueryClaimableFeesResponse {
  repeated cosmos.base.v1beta1.Coin claimable_fees = 1 [
    (gogoproto.moretags) = "yaml:\"claimable_fees\"",
    (gogoproto.nullable) = false
  ];
}