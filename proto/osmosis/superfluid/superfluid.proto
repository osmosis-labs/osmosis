syntax = "proto3";
package osmosis.superfluid;

import "gogoproto/gogo.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/timestamp.proto";
import "cosmos/base/v1beta1/coin.proto";

option go_package = "github.com/osmosis-labs/osmosis/v7/x/superfluid/types";

enum SuperfluidAssetType {
  option (gogoproto.goproto_enum_prefix) = false;

  SuperfluidAssetTypeNative = 0;
  SuperfluidAssetTypeLPShare = 1;
  // SuperfluidAssetTypeLendingShare = 2; // for now not exist
}

// SuperfluidAsset stores the pair of superfluid asset type and denom pair
message SuperfluidAsset {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_getters) = false;

  string denom = 1;
  SuperfluidAssetType asset_type = 2;
}

// SuperfluidIntermediaryAccount takes the role of intermediary between LP token
// and OSMO tokens for superfluid staking
message SuperfluidIntermediaryAccount {
  string denom = 1;
  string val_addr = 2;
  uint64 gauge_id = 3; // perpetual gauge for rewards distribution
}

// The Osmo-Equivalent-TWAP for epoch N refers to the osmo worth we treat an LP
// share as having, for all of epoch N. This is intended to be set as the
// Time-weighted-average-osmo-backing for the entire duration of epoch N-1.
// (Thereby locking whats in use for epoch N as based on the prior epochs
// rewards) However for now, this is not the TWAP but instead the spot price at
// the boundary.
message EpochOsmoEquivalentTWAP {
  int64 epoch_number = 1;
  string denom = 2; // superfluid asset denom, can be LP token or native token
  string epoch_twap_price = 3 [
    (gogoproto.moretags) = "yaml:\"epoch_twap_price\"",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable) = false
  ];
}
