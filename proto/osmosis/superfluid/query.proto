syntax = "proto3";
package osmosis.superfluid;

import "gogoproto/gogo.proto";
import "cosmos/base/v1beta1/coin.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "osmosis/superfluid/superfluid.proto";
import "cosmos/base/query/v1beta1/pagination.proto";

option go_package = "github.com/osmosis-labs/osmosis/v7/x/superfluid/types";

// Query defines the gRPC querier service.
service Query {
  // Returns superfluid asset type
  rpc AssetType(AssetTypeRequest) returns (AssetTypeResponse) {
    option (google.api.http).get =
        "/osmosis/superfluid/v1beta1/asset_type/{denom}";
  }
  // Returns all superfluid asset types
  rpc AllAssets(AllAssetsRequest) returns (AllAssetsResponse) {
    option (google.api.http).get = "/osmosis/superfluid/v1beta1/all_assets";
  }
  // Returns superfluid asset TWAP
  rpc AssetTwap(AssetTwapRequest) returns (AssetTwapResponse) {
    option (google.api.http).get =
        "/osmosis/superfluid/v1beta1/asset_twap/{denom}";
  }
  // Returns all superfluid intermediary account
  rpc AllIntermediaryAccounts(AllIntermediaryAccountsRequest)
      returns (AllIntermediaryAccountsResponse) {
    option (google.api.http).get =
        "/osmosis/superfluid/v1beta1/all_intermediary_accounts";
  }
  // Returns intermediary account connected to a superfluid staked lock by id
  rpc ConnectedIntermediaryAccount(ConnectedIntermediaryAccountRequest)
      returns (ConnectedIntermediaryAccountResponse) {
    option (google.api.http).get =
        "/osmosis/superfluid/v1beta1/connected_intermediary_account/{lock_id}";
  }
}

message AssetTypeRequest { string denom = 1; };
message AssetTypeResponse { SuperfluidAssetType asset_type = 1; };

message AllAssetsRequest {};
message AllAssetsResponse {
  repeated SuperfluidAsset assets = 1 [ (gogoproto.nullable) = false ];
};

message AssetTwapRequest { string denom = 1; };
message AssetTwapResponse { EpochOsmoEquivalentTWAP twap = 1; };

message SuperfluidIntermediaryAccountInfo {
  string denom = 1;
  string val_addr = 2;
  uint64 gauge_id = 3;
  string address = 4;
}
message AllIntermediaryAccountsRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
};
message AllIntermediaryAccountsResponse {
  repeated SuperfluidIntermediaryAccountInfo accounts = 1
      [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
};

message ConnectedIntermediaryAccountRequest { uint64 lock_id = 1; }
message ConnectedIntermediaryAccountResponse {
  SuperfluidIntermediaryAccountInfo account = 1;
}
