// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cosmos/cosmos-sdk/types/tx (interfaces: ServiceServer)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	tx "github.com/cosmos/cosmos-sdk/types/tx"
	gomock "github.com/golang/mock/gomock"
)

// MockServiceServer is a mock of ServiceServer interface.
type MockServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockServiceServerMockRecorder
}

// MockServiceServerMockRecorder is the mock recorder for MockServiceServer.
type MockServiceServerMockRecorder struct {
	mock *MockServiceServer
}

// NewMockServiceServer creates a new mock instance.
func NewMockServiceServer(ctrl *gomock.Controller) *MockServiceServer {
	mock := &MockServiceServer{ctrl: ctrl}
	mock.recorder = &MockServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServiceServer) EXPECT() *MockServiceServerMockRecorder {
	return m.recorder
}

// BroadcastTx mocks base method.
func (m *MockServiceServer) BroadcastTx(arg0 context.Context, arg1 *tx.BroadcastTxRequest) (*tx.BroadcastTxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastTx", arg0, arg1)
	ret0, _ := ret[0].(*tx.BroadcastTxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BroadcastTx indicates an expected call of BroadcastTx.
func (mr *MockServiceServerMockRecorder) BroadcastTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastTx", reflect.TypeOf((*MockServiceServer)(nil).BroadcastTx), arg0, arg1)
}

// GetBlockWithTxs mocks base method.
func (m *MockServiceServer) GetBlockWithTxs(arg0 context.Context, arg1 *tx.GetBlockWithTxsRequest) (*tx.GetBlockWithTxsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockWithTxs", arg0, arg1)
	ret0, _ := ret[0].(*tx.GetBlockWithTxsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockWithTxs indicates an expected call of GetBlockWithTxs.
func (mr *MockServiceServerMockRecorder) GetBlockWithTxs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockWithTxs", reflect.TypeOf((*MockServiceServer)(nil).GetBlockWithTxs), arg0, arg1)
}

// GetTx mocks base method.
func (m *MockServiceServer) GetTx(arg0 context.Context, arg1 *tx.GetTxRequest) (*tx.GetTxResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTx", arg0, arg1)
	ret0, _ := ret[0].(*tx.GetTxResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTx indicates an expected call of GetTx.
func (mr *MockServiceServerMockRecorder) GetTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTx", reflect.TypeOf((*MockServiceServer)(nil).GetTx), arg0, arg1)
}

// GetTxsEvent mocks base method.
func (m *MockServiceServer) GetTxsEvent(arg0 context.Context, arg1 *tx.GetTxsEventRequest) (*tx.GetTxsEventResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxsEvent", arg0, arg1)
	ret0, _ := ret[0].(*tx.GetTxsEventResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxsEvent indicates an expected call of GetTxsEvent.
func (mr *MockServiceServerMockRecorder) GetTxsEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxsEvent", reflect.TypeOf((*MockServiceServer)(nil).GetTxsEvent), arg0, arg1)
}

// Simulate mocks base method.
func (m *MockServiceServer) Simulate(arg0 context.Context, arg1 *tx.SimulateRequest) (*tx.SimulateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Simulate", arg0, arg1)
	ret0, _ := ret[0].(*tx.SimulateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Simulate indicates an expected call of Simulate.
func (mr *MockServiceServerMockRecorder) Simulate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Simulate", reflect.TypeOf((*MockServiceServer)(nil).Simulate), arg0, arg1)
}

// TxDecode mocks base method.
func (m *MockServiceServer) TxDecode(arg0 context.Context, arg1 *tx.TxDecodeRequest) (*tx.TxDecodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxDecode", arg0, arg1)
	ret0, _ := ret[0].(*tx.TxDecodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxDecode indicates an expected call of TxDecode.
func (mr *MockServiceServerMockRecorder) TxDecode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxDecode", reflect.TypeOf((*MockServiceServer)(nil).TxDecode), arg0, arg1)
}

// TxDecodeAmino mocks base method.
func (m *MockServiceServer) TxDecodeAmino(arg0 context.Context, arg1 *tx.TxDecodeAminoRequest) (*tx.TxDecodeAminoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxDecodeAmino", arg0, arg1)
	ret0, _ := ret[0].(*tx.TxDecodeAminoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxDecodeAmino indicates an expected call of TxDecodeAmino.
func (mr *MockServiceServerMockRecorder) TxDecodeAmino(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxDecodeAmino", reflect.TypeOf((*MockServiceServer)(nil).TxDecodeAmino), arg0, arg1)
}

// TxEncode mocks base method.
func (m *MockServiceServer) TxEncode(arg0 context.Context, arg1 *tx.TxEncodeRequest) (*tx.TxEncodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxEncode", arg0, arg1)
	ret0, _ := ret[0].(*tx.TxEncodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxEncode indicates an expected call of TxEncode.
func (mr *MockServiceServerMockRecorder) TxEncode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxEncode", reflect.TypeOf((*MockServiceServer)(nil).TxEncode), arg0, arg1)
}

// TxEncodeAmino mocks base method.
func (m *MockServiceServer) TxEncodeAmino(arg0 context.Context, arg1 *tx.TxEncodeAminoRequest) (*tx.TxEncodeAminoResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TxEncodeAmino", arg0, arg1)
	ret0, _ := ret[0].(*tx.TxEncodeAminoResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TxEncodeAmino indicates an expected call of TxEncodeAmino.
func (mr *MockServiceServerMockRecorder) TxEncodeAmino(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxEncodeAmino", reflect.TypeOf((*MockServiceServer)(nil).TxEncodeAmino), arg0, arg1)
}
