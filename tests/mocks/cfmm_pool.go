// Code generated by MockGen. DO NOT EDIT.
// Source: x/gamm/types/pool.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	types "github.com/cosmos/cosmos-sdk/types"
	gomock "github.com/golang/mock/gomock"
	types0 "github.com/osmosis-labs/osmosis/v17/x/poolmanager/types"
)

// MockCFMMPoolI is a mock of CFMMPoolI interface.
type MockCFMMPoolI struct {
	ctrl     *gomock.Controller
	recorder *MockCFMMPoolIMockRecorder
}

// MockCFMMPoolIMockRecorder is the mock recorder for MockCFMMPoolI.
type MockCFMMPoolIMockRecorder struct {
	mock *MockCFMMPoolI
}

// NewMockCFMMPoolI creates a new mock instance.
func NewMockCFMMPoolI(ctrl *gomock.Controller) *MockCFMMPoolI {
	mock := &MockCFMMPoolI{ctrl: ctrl}
	mock.recorder = &MockCFMMPoolIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCFMMPoolI) EXPECT() *MockCFMMPoolIMockRecorder {
	return m.recorder
}

// AsSerializablePool mocks base method.
func (m *MockCFMMPoolI) AsSerializablePool() types0.PoolI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsSerializablePool")
	ret0, _ := ret[0].(types0.PoolI)
	return ret0
}

// AsSerializablePool indicates an expected call of AsSerializablePool.
func (mr *MockCFMMPoolIMockRecorder) AsSerializablePool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsSerializablePool", reflect.TypeOf((*MockCFMMPoolI)(nil).AsSerializablePool))
}

// CalcExitPoolCoinsFromShares mocks base method.
func (m *MockCFMMPoolI) CalcExitPoolCoinsFromShares(ctx types.Context, numShares types.Int, exitFee types.Dec) (types.Coins, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalcExitPoolCoinsFromShares", ctx, numShares, exitFee)
	ret0, _ := ret[0].(types.Coins)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalcExitPoolCoinsFromShares indicates an expected call of CalcExitPoolCoinsFromShares.
func (mr *MockCFMMPoolIMockRecorder) CalcExitPoolCoinsFromShares(ctx, numShares, exitFee interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalcExitPoolCoinsFromShares", reflect.TypeOf((*MockCFMMPoolI)(nil).CalcExitPoolCoinsFromShares), ctx, numShares, exitFee)
}

// CalcInAmtGivenOut mocks base method.
func (m *MockCFMMPoolI) CalcInAmtGivenOut(ctx types.Context, tokenOut types.Coins, tokenInDenom string, spreadFactor types.Dec) (types.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalcInAmtGivenOut", ctx, tokenOut, tokenInDenom, spreadFactor)
	ret0, _ := ret[0].(types.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalcInAmtGivenOut indicates an expected call of CalcInAmtGivenOut.
func (mr *MockCFMMPoolIMockRecorder) CalcInAmtGivenOut(ctx, tokenOut, tokenInDenom, spreadFactor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalcInAmtGivenOut", reflect.TypeOf((*MockCFMMPoolI)(nil).CalcInAmtGivenOut), ctx, tokenOut, tokenInDenom, spreadFactor)
}

// CalcJoinPoolNoSwapShares mocks base method.
func (m *MockCFMMPoolI) CalcJoinPoolNoSwapShares(ctx types.Context, tokensIn types.Coins, spreadFactor types.Dec) (types.Int, types.Coins, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalcJoinPoolNoSwapShares", ctx, tokensIn, spreadFactor)
	ret0, _ := ret[0].(types.Int)
	ret1, _ := ret[1].(types.Coins)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CalcJoinPoolNoSwapShares indicates an expected call of CalcJoinPoolNoSwapShares.
func (mr *MockCFMMPoolIMockRecorder) CalcJoinPoolNoSwapShares(ctx, tokensIn, spreadFactor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalcJoinPoolNoSwapShares", reflect.TypeOf((*MockCFMMPoolI)(nil).CalcJoinPoolNoSwapShares), ctx, tokensIn, spreadFactor)
}

// CalcJoinPoolShares mocks base method.
func (m *MockCFMMPoolI) CalcJoinPoolShares(ctx types.Context, tokensIn types.Coins, spreadFactor types.Dec) (types.Int, types.Coins, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalcJoinPoolShares", ctx, tokensIn, spreadFactor)
	ret0, _ := ret[0].(types.Int)
	ret1, _ := ret[1].(types.Coins)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CalcJoinPoolShares indicates an expected call of CalcJoinPoolShares.
func (mr *MockCFMMPoolIMockRecorder) CalcJoinPoolShares(ctx, tokensIn, spreadFactor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalcJoinPoolShares", reflect.TypeOf((*MockCFMMPoolI)(nil).CalcJoinPoolShares), ctx, tokensIn, spreadFactor)
}

// CalcOutAmtGivenIn mocks base method.
func (m *MockCFMMPoolI) CalcOutAmtGivenIn(ctx types.Context, tokenIn types.Coins, tokenOutDenom string, spreadFactor types.Dec) (types.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalcOutAmtGivenIn", ctx, tokenIn, tokenOutDenom, spreadFactor)
	ret0, _ := ret[0].(types.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalcOutAmtGivenIn indicates an expected call of CalcOutAmtGivenIn.
func (mr *MockCFMMPoolIMockRecorder) CalcOutAmtGivenIn(ctx, tokenIn, tokenOutDenom, spreadFactor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalcOutAmtGivenIn", reflect.TypeOf((*MockCFMMPoolI)(nil).CalcOutAmtGivenIn), ctx, tokenIn, tokenOutDenom, spreadFactor)
}

// ExitPool mocks base method.
func (m *MockCFMMPoolI) ExitPool(ctx types.Context, numShares types.Int, exitFee types.Dec) (types.Coins, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExitPool", ctx, numShares, exitFee)
	ret0, _ := ret[0].(types.Coins)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExitPool indicates an expected call of ExitPool.
func (mr *MockCFMMPoolIMockRecorder) ExitPool(ctx, numShares, exitFee interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExitPool", reflect.TypeOf((*MockCFMMPoolI)(nil).ExitPool), ctx, numShares, exitFee)
}

// GetAddress mocks base method.
func (m *MockCFMMPoolI) GetAddress() types.AccAddress {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress")
	ret0, _ := ret[0].(types.AccAddress)
	return ret0
}

// GetAddress indicates an expected call of GetAddress.
func (mr *MockCFMMPoolIMockRecorder) GetAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockCFMMPoolI)(nil).GetAddress))
}

// GetExitFee mocks base method.
func (m *MockCFMMPoolI) GetExitFee(ctx types.Context) types.Dec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExitFee", ctx)
	ret0, _ := ret[0].(types.Dec)
	return ret0
}

// GetExitFee indicates an expected call of GetExitFee.
func (mr *MockCFMMPoolIMockRecorder) GetExitFee(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExitFee", reflect.TypeOf((*MockCFMMPoolI)(nil).GetExitFee), ctx)
}

// GetId mocks base method.
func (m *MockCFMMPoolI) GetId() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetId")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetId indicates an expected call of GetId.
func (mr *MockCFMMPoolIMockRecorder) GetId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetId", reflect.TypeOf((*MockCFMMPoolI)(nil).GetId))
}

// GetSpreadFactor mocks base method.
func (m *MockCFMMPoolI) GetSpreadFactor(ctx types.Context) types.Dec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpreadFactor", ctx)
	ret0, _ := ret[0].(types.Dec)
	return ret0
}

// GetSpreadFactor indicates an expected call of GetSpreadFactor.
func (mr *MockCFMMPoolIMockRecorder) GetSpreadFactor(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpreadFactor", reflect.TypeOf((*MockCFMMPoolI)(nil).GetSpreadFactor), ctx)
}

// GetTotalPoolLiquidity mocks base method.
func (m *MockCFMMPoolI) GetTotalPoolLiquidity(ctx types.Context) types.Coins {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalPoolLiquidity", ctx)
	ret0, _ := ret[0].(types.Coins)
	return ret0
}

// GetTotalPoolLiquidity indicates an expected call of GetTotalPoolLiquidity.
func (mr *MockCFMMPoolIMockRecorder) GetTotalPoolLiquidity(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalPoolLiquidity", reflect.TypeOf((*MockCFMMPoolI)(nil).GetTotalPoolLiquidity), ctx)
}

// GetTotalShares mocks base method.
func (m *MockCFMMPoolI) GetTotalShares() types.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalShares")
	ret0, _ := ret[0].(types.Int)
	return ret0
}

// GetTotalShares indicates an expected call of GetTotalShares.
func (mr *MockCFMMPoolIMockRecorder) GetTotalShares() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalShares", reflect.TypeOf((*MockCFMMPoolI)(nil).GetTotalShares))
}

// GetType mocks base method.
func (m *MockCFMMPoolI) GetType() types0.PoolType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(types0.PoolType)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockCFMMPoolIMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockCFMMPoolI)(nil).GetType))
}

// IsActive mocks base method.
func (m *MockCFMMPoolI) IsActive(ctx types.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsActive", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsActive indicates an expected call of IsActive.
func (mr *MockCFMMPoolIMockRecorder) IsActive(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsActive", reflect.TypeOf((*MockCFMMPoolI)(nil).IsActive), ctx)
}

// JoinPool mocks base method.
func (m *MockCFMMPoolI) JoinPool(ctx types.Context, tokensIn types.Coins, spreadFactor types.Dec) (types.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinPool", ctx, tokensIn, spreadFactor)
	ret0, _ := ret[0].(types.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinPool indicates an expected call of JoinPool.
func (mr *MockCFMMPoolIMockRecorder) JoinPool(ctx, tokensIn, spreadFactor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinPool", reflect.TypeOf((*MockCFMMPoolI)(nil).JoinPool), ctx, tokensIn, spreadFactor)
}

// JoinPoolNoSwap mocks base method.
func (m *MockCFMMPoolI) JoinPoolNoSwap(ctx types.Context, tokensIn types.Coins, spreadFactor types.Dec) (types.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinPoolNoSwap", ctx, tokensIn, spreadFactor)
	ret0, _ := ret[0].(types.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinPoolNoSwap indicates an expected call of JoinPoolNoSwap.
func (mr *MockCFMMPoolIMockRecorder) JoinPoolNoSwap(ctx, tokensIn, spreadFactor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinPoolNoSwap", reflect.TypeOf((*MockCFMMPoolI)(nil).JoinPoolNoSwap), ctx, tokensIn, spreadFactor)
}

// ProtoMessage mocks base method.
func (m *MockCFMMPoolI) ProtoMessage() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProtoMessage")
}

// ProtoMessage indicates an expected call of ProtoMessage.
func (mr *MockCFMMPoolIMockRecorder) ProtoMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtoMessage", reflect.TypeOf((*MockCFMMPoolI)(nil).ProtoMessage))
}

// Reset mocks base method.
func (m *MockCFMMPoolI) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockCFMMPoolIMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockCFMMPoolI)(nil).Reset))
}

// SpotPrice mocks base method.
func (m *MockCFMMPoolI) SpotPrice(ctx types.Context, quoteAssetDenom, baseAssetDenom string) (types.Dec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpotPrice", ctx, quoteAssetDenom, baseAssetDenom)
	ret0, _ := ret[0].(types.Dec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SpotPrice indicates an expected call of SpotPrice.
func (mr *MockCFMMPoolIMockRecorder) SpotPrice(ctx, quoteAssetDenom, baseAssetDenom interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpotPrice", reflect.TypeOf((*MockCFMMPoolI)(nil).SpotPrice), ctx, quoteAssetDenom, baseAssetDenom)
}

// String mocks base method.
func (m *MockCFMMPoolI) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockCFMMPoolIMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockCFMMPoolI)(nil).String))
}

// SwapInAmtGivenOut mocks base method.
func (m *MockCFMMPoolI) SwapInAmtGivenOut(ctx types.Context, tokenOut types.Coins, tokenInDenom string, spreadFactor types.Dec) (types.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwapInAmtGivenOut", ctx, tokenOut, tokenInDenom, spreadFactor)
	ret0, _ := ret[0].(types.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SwapInAmtGivenOut indicates an expected call of SwapInAmtGivenOut.
func (mr *MockCFMMPoolIMockRecorder) SwapInAmtGivenOut(ctx, tokenOut, tokenInDenom, spreadFactor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwapInAmtGivenOut", reflect.TypeOf((*MockCFMMPoolI)(nil).SwapInAmtGivenOut), ctx, tokenOut, tokenInDenom, spreadFactor)
}

// SwapOutAmtGivenIn mocks base method.
func (m *MockCFMMPoolI) SwapOutAmtGivenIn(ctx types.Context, tokenIn types.Coins, tokenOutDenom string, spreadFactor types.Dec) (types.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwapOutAmtGivenIn", ctx, tokenIn, tokenOutDenom, spreadFactor)
	ret0, _ := ret[0].(types.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SwapOutAmtGivenIn indicates an expected call of SwapOutAmtGivenIn.
func (mr *MockCFMMPoolIMockRecorder) SwapOutAmtGivenIn(ctx, tokenIn, tokenOutDenom, spreadFactor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwapOutAmtGivenIn", reflect.TypeOf((*MockCFMMPoolI)(nil).SwapOutAmtGivenIn), ctx, tokenIn, tokenOutDenom, spreadFactor)
}

// MockPoolAmountOutExtension is a mock of PoolAmountOutExtension interface.
type MockPoolAmountOutExtension struct {
	ctrl     *gomock.Controller
	recorder *MockPoolAmountOutExtensionMockRecorder
}

// MockPoolAmountOutExtensionMockRecorder is the mock recorder for MockPoolAmountOutExtension.
type MockPoolAmountOutExtensionMockRecorder struct {
	mock *MockPoolAmountOutExtension
}

// NewMockPoolAmountOutExtension creates a new mock instance.
func NewMockPoolAmountOutExtension(ctrl *gomock.Controller) *MockPoolAmountOutExtension {
	mock := &MockPoolAmountOutExtension{ctrl: ctrl}
	mock.recorder = &MockPoolAmountOutExtensionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPoolAmountOutExtension) EXPECT() *MockPoolAmountOutExtensionMockRecorder {
	return m.recorder
}

// AsSerializablePool mocks base method.
func (m *MockPoolAmountOutExtension) AsSerializablePool() types0.PoolI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsSerializablePool")
	ret0, _ := ret[0].(types0.PoolI)
	return ret0
}

// AsSerializablePool indicates an expected call of AsSerializablePool.
func (mr *MockPoolAmountOutExtensionMockRecorder) AsSerializablePool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsSerializablePool", reflect.TypeOf((*MockPoolAmountOutExtension)(nil).AsSerializablePool))
}

// CalcExitPoolCoinsFromShares mocks base method.
func (m *MockPoolAmountOutExtension) CalcExitPoolCoinsFromShares(ctx types.Context, numShares types.Int, exitFee types.Dec) (types.Coins, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalcExitPoolCoinsFromShares", ctx, numShares, exitFee)
	ret0, _ := ret[0].(types.Coins)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalcExitPoolCoinsFromShares indicates an expected call of CalcExitPoolCoinsFromShares.
func (mr *MockPoolAmountOutExtensionMockRecorder) CalcExitPoolCoinsFromShares(ctx, numShares, exitFee interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalcExitPoolCoinsFromShares", reflect.TypeOf((*MockPoolAmountOutExtension)(nil).CalcExitPoolCoinsFromShares), ctx, numShares, exitFee)
}

// CalcInAmtGivenOut mocks base method.
func (m *MockPoolAmountOutExtension) CalcInAmtGivenOut(ctx types.Context, tokenOut types.Coins, tokenInDenom string, spreadFactor types.Dec) (types.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalcInAmtGivenOut", ctx, tokenOut, tokenInDenom, spreadFactor)
	ret0, _ := ret[0].(types.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalcInAmtGivenOut indicates an expected call of CalcInAmtGivenOut.
func (mr *MockPoolAmountOutExtensionMockRecorder) CalcInAmtGivenOut(ctx, tokenOut, tokenInDenom, spreadFactor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalcInAmtGivenOut", reflect.TypeOf((*MockPoolAmountOutExtension)(nil).CalcInAmtGivenOut), ctx, tokenOut, tokenInDenom, spreadFactor)
}

// CalcJoinPoolNoSwapShares mocks base method.
func (m *MockPoolAmountOutExtension) CalcJoinPoolNoSwapShares(ctx types.Context, tokensIn types.Coins, spreadFactor types.Dec) (types.Int, types.Coins, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalcJoinPoolNoSwapShares", ctx, tokensIn, spreadFactor)
	ret0, _ := ret[0].(types.Int)
	ret1, _ := ret[1].(types.Coins)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CalcJoinPoolNoSwapShares indicates an expected call of CalcJoinPoolNoSwapShares.
func (mr *MockPoolAmountOutExtensionMockRecorder) CalcJoinPoolNoSwapShares(ctx, tokensIn, spreadFactor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalcJoinPoolNoSwapShares", reflect.TypeOf((*MockPoolAmountOutExtension)(nil).CalcJoinPoolNoSwapShares), ctx, tokensIn, spreadFactor)
}

// CalcJoinPoolShares mocks base method.
func (m *MockPoolAmountOutExtension) CalcJoinPoolShares(ctx types.Context, tokensIn types.Coins, spreadFactor types.Dec) (types.Int, types.Coins, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalcJoinPoolShares", ctx, tokensIn, spreadFactor)
	ret0, _ := ret[0].(types.Int)
	ret1, _ := ret[1].(types.Coins)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CalcJoinPoolShares indicates an expected call of CalcJoinPoolShares.
func (mr *MockPoolAmountOutExtensionMockRecorder) CalcJoinPoolShares(ctx, tokensIn, spreadFactor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalcJoinPoolShares", reflect.TypeOf((*MockPoolAmountOutExtension)(nil).CalcJoinPoolShares), ctx, tokensIn, spreadFactor)
}

// CalcOutAmtGivenIn mocks base method.
func (m *MockPoolAmountOutExtension) CalcOutAmtGivenIn(ctx types.Context, tokenIn types.Coins, tokenOutDenom string, spreadFactor types.Dec) (types.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalcOutAmtGivenIn", ctx, tokenIn, tokenOutDenom, spreadFactor)
	ret0, _ := ret[0].(types.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalcOutAmtGivenIn indicates an expected call of CalcOutAmtGivenIn.
func (mr *MockPoolAmountOutExtensionMockRecorder) CalcOutAmtGivenIn(ctx, tokenIn, tokenOutDenom, spreadFactor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalcOutAmtGivenIn", reflect.TypeOf((*MockPoolAmountOutExtension)(nil).CalcOutAmtGivenIn), ctx, tokenIn, tokenOutDenom, spreadFactor)
}

// CalcTokenInShareAmountOut mocks base method.
func (m *MockPoolAmountOutExtension) CalcTokenInShareAmountOut(ctx types.Context, tokenInDenom string, shareOutAmount types.Int, spreadFactor types.Dec) (types.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalcTokenInShareAmountOut", ctx, tokenInDenom, shareOutAmount, spreadFactor)
	ret0, _ := ret[0].(types.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalcTokenInShareAmountOut indicates an expected call of CalcTokenInShareAmountOut.
func (mr *MockPoolAmountOutExtensionMockRecorder) CalcTokenInShareAmountOut(ctx, tokenInDenom, shareOutAmount, spreadFactor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalcTokenInShareAmountOut", reflect.TypeOf((*MockPoolAmountOutExtension)(nil).CalcTokenInShareAmountOut), ctx, tokenInDenom, shareOutAmount, spreadFactor)
}

// ExitPool mocks base method.
func (m *MockPoolAmountOutExtension) ExitPool(ctx types.Context, numShares types.Int, exitFee types.Dec) (types.Coins, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExitPool", ctx, numShares, exitFee)
	ret0, _ := ret[0].(types.Coins)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExitPool indicates an expected call of ExitPool.
func (mr *MockPoolAmountOutExtensionMockRecorder) ExitPool(ctx, numShares, exitFee interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExitPool", reflect.TypeOf((*MockPoolAmountOutExtension)(nil).ExitPool), ctx, numShares, exitFee)
}

// ExitSwapExactAmountOut mocks base method.
func (m *MockPoolAmountOutExtension) ExitSwapExactAmountOut(ctx types.Context, tokenOut types.Coin, shareInMaxAmount types.Int) (types.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExitSwapExactAmountOut", ctx, tokenOut, shareInMaxAmount)
	ret0, _ := ret[0].(types.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExitSwapExactAmountOut indicates an expected call of ExitSwapExactAmountOut.
func (mr *MockPoolAmountOutExtensionMockRecorder) ExitSwapExactAmountOut(ctx, tokenOut, shareInMaxAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExitSwapExactAmountOut", reflect.TypeOf((*MockPoolAmountOutExtension)(nil).ExitSwapExactAmountOut), ctx, tokenOut, shareInMaxAmount)
}

// GetAddress mocks base method.
func (m *MockPoolAmountOutExtension) GetAddress() types.AccAddress {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress")
	ret0, _ := ret[0].(types.AccAddress)
	return ret0
}

// GetAddress indicates an expected call of GetAddress.
func (mr *MockPoolAmountOutExtensionMockRecorder) GetAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockPoolAmountOutExtension)(nil).GetAddress))
}

// GetExitFee mocks base method.
func (m *MockPoolAmountOutExtension) GetExitFee(ctx types.Context) types.Dec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExitFee", ctx)
	ret0, _ := ret[0].(types.Dec)
	return ret0
}

// GetExitFee indicates an expected call of GetExitFee.
func (mr *MockPoolAmountOutExtensionMockRecorder) GetExitFee(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExitFee", reflect.TypeOf((*MockPoolAmountOutExtension)(nil).GetExitFee), ctx)
}

// GetId mocks base method.
func (m *MockPoolAmountOutExtension) GetId() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetId")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetId indicates an expected call of GetId.
func (mr *MockPoolAmountOutExtensionMockRecorder) GetId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetId", reflect.TypeOf((*MockPoolAmountOutExtension)(nil).GetId))
}

// GetSpreadFactor mocks base method.
func (m *MockPoolAmountOutExtension) GetSpreadFactor(ctx types.Context) types.Dec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpreadFactor", ctx)
	ret0, _ := ret[0].(types.Dec)
	return ret0
}

// GetSpreadFactor indicates an expected call of GetSpreadFactor.
func (mr *MockPoolAmountOutExtensionMockRecorder) GetSpreadFactor(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpreadFactor", reflect.TypeOf((*MockPoolAmountOutExtension)(nil).GetSpreadFactor), ctx)
}

// GetTotalPoolLiquidity mocks base method.
func (m *MockPoolAmountOutExtension) GetTotalPoolLiquidity(ctx types.Context) types.Coins {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalPoolLiquidity", ctx)
	ret0, _ := ret[0].(types.Coins)
	return ret0
}

// GetTotalPoolLiquidity indicates an expected call of GetTotalPoolLiquidity.
func (mr *MockPoolAmountOutExtensionMockRecorder) GetTotalPoolLiquidity(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalPoolLiquidity", reflect.TypeOf((*MockPoolAmountOutExtension)(nil).GetTotalPoolLiquidity), ctx)
}

// GetTotalShares mocks base method.
func (m *MockPoolAmountOutExtension) GetTotalShares() types.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalShares")
	ret0, _ := ret[0].(types.Int)
	return ret0
}

// GetTotalShares indicates an expected call of GetTotalShares.
func (mr *MockPoolAmountOutExtensionMockRecorder) GetTotalShares() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalShares", reflect.TypeOf((*MockPoolAmountOutExtension)(nil).GetTotalShares))
}

// GetType mocks base method.
func (m *MockPoolAmountOutExtension) GetType() types0.PoolType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(types0.PoolType)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockPoolAmountOutExtensionMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockPoolAmountOutExtension)(nil).GetType))
}

// IncreaseLiquidity mocks base method.
func (m *MockPoolAmountOutExtension) IncreaseLiquidity(sharesOut types.Int, coinsIn types.Coins) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncreaseLiquidity", sharesOut, coinsIn)
}

// IncreaseLiquidity indicates an expected call of IncreaseLiquidity.
func (mr *MockPoolAmountOutExtensionMockRecorder) IncreaseLiquidity(sharesOut, coinsIn interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseLiquidity", reflect.TypeOf((*MockPoolAmountOutExtension)(nil).IncreaseLiquidity), sharesOut, coinsIn)
}

// IsActive mocks base method.
func (m *MockPoolAmountOutExtension) IsActive(ctx types.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsActive", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsActive indicates an expected call of IsActive.
func (mr *MockPoolAmountOutExtensionMockRecorder) IsActive(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsActive", reflect.TypeOf((*MockPoolAmountOutExtension)(nil).IsActive), ctx)
}

// JoinPool mocks base method.
func (m *MockPoolAmountOutExtension) JoinPool(ctx types.Context, tokensIn types.Coins, spreadFactor types.Dec) (types.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinPool", ctx, tokensIn, spreadFactor)
	ret0, _ := ret[0].(types.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinPool indicates an expected call of JoinPool.
func (mr *MockPoolAmountOutExtensionMockRecorder) JoinPool(ctx, tokensIn, spreadFactor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinPool", reflect.TypeOf((*MockPoolAmountOutExtension)(nil).JoinPool), ctx, tokensIn, spreadFactor)
}

// JoinPoolNoSwap mocks base method.
func (m *MockPoolAmountOutExtension) JoinPoolNoSwap(ctx types.Context, tokensIn types.Coins, spreadFactor types.Dec) (types.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinPoolNoSwap", ctx, tokensIn, spreadFactor)
	ret0, _ := ret[0].(types.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinPoolNoSwap indicates an expected call of JoinPoolNoSwap.
func (mr *MockPoolAmountOutExtensionMockRecorder) JoinPoolNoSwap(ctx, tokensIn, spreadFactor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinPoolNoSwap", reflect.TypeOf((*MockPoolAmountOutExtension)(nil).JoinPoolNoSwap), ctx, tokensIn, spreadFactor)
}

// JoinPoolTokenInMaxShareAmountOut mocks base method.
func (m *MockPoolAmountOutExtension) JoinPoolTokenInMaxShareAmountOut(ctx types.Context, tokenInDenom string, shareOutAmount types.Int) (types.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinPoolTokenInMaxShareAmountOut", ctx, tokenInDenom, shareOutAmount)
	ret0, _ := ret[0].(types.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinPoolTokenInMaxShareAmountOut indicates an expected call of JoinPoolTokenInMaxShareAmountOut.
func (mr *MockPoolAmountOutExtensionMockRecorder) JoinPoolTokenInMaxShareAmountOut(ctx, tokenInDenom, shareOutAmount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinPoolTokenInMaxShareAmountOut", reflect.TypeOf((*MockPoolAmountOutExtension)(nil).JoinPoolTokenInMaxShareAmountOut), ctx, tokenInDenom, shareOutAmount)
}

// ProtoMessage mocks base method.
func (m *MockPoolAmountOutExtension) ProtoMessage() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProtoMessage")
}

// ProtoMessage indicates an expected call of ProtoMessage.
func (mr *MockPoolAmountOutExtensionMockRecorder) ProtoMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtoMessage", reflect.TypeOf((*MockPoolAmountOutExtension)(nil).ProtoMessage))
}

// Reset mocks base method.
func (m *MockPoolAmountOutExtension) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockPoolAmountOutExtensionMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockPoolAmountOutExtension)(nil).Reset))
}

// SpotPrice mocks base method.
func (m *MockPoolAmountOutExtension) SpotPrice(ctx types.Context, quoteAssetDenom, baseAssetDenom string) (types.Dec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpotPrice", ctx, quoteAssetDenom, baseAssetDenom)
	ret0, _ := ret[0].(types.Dec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SpotPrice indicates an expected call of SpotPrice.
func (mr *MockPoolAmountOutExtensionMockRecorder) SpotPrice(ctx, quoteAssetDenom, baseAssetDenom interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpotPrice", reflect.TypeOf((*MockPoolAmountOutExtension)(nil).SpotPrice), ctx, quoteAssetDenom, baseAssetDenom)
}

// String mocks base method.
func (m *MockPoolAmountOutExtension) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockPoolAmountOutExtensionMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockPoolAmountOutExtension)(nil).String))
}

// SwapInAmtGivenOut mocks base method.
func (m *MockPoolAmountOutExtension) SwapInAmtGivenOut(ctx types.Context, tokenOut types.Coins, tokenInDenom string, spreadFactor types.Dec) (types.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwapInAmtGivenOut", ctx, tokenOut, tokenInDenom, spreadFactor)
	ret0, _ := ret[0].(types.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SwapInAmtGivenOut indicates an expected call of SwapInAmtGivenOut.
func (mr *MockPoolAmountOutExtensionMockRecorder) SwapInAmtGivenOut(ctx, tokenOut, tokenInDenom, spreadFactor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwapInAmtGivenOut", reflect.TypeOf((*MockPoolAmountOutExtension)(nil).SwapInAmtGivenOut), ctx, tokenOut, tokenInDenom, spreadFactor)
}

// SwapOutAmtGivenIn mocks base method.
func (m *MockPoolAmountOutExtension) SwapOutAmtGivenIn(ctx types.Context, tokenIn types.Coins, tokenOutDenom string, spreadFactor types.Dec) (types.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwapOutAmtGivenIn", ctx, tokenIn, tokenOutDenom, spreadFactor)
	ret0, _ := ret[0].(types.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SwapOutAmtGivenIn indicates an expected call of SwapOutAmtGivenIn.
func (mr *MockPoolAmountOutExtensionMockRecorder) SwapOutAmtGivenIn(ctx, tokenIn, tokenOutDenom, spreadFactor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwapOutAmtGivenIn", reflect.TypeOf((*MockPoolAmountOutExtension)(nil).SwapOutAmtGivenIn), ctx, tokenIn, tokenOutDenom, spreadFactor)
}

// MockWeightedPoolExtension is a mock of WeightedPoolExtension interface.
type MockWeightedPoolExtension struct {
	ctrl     *gomock.Controller
	recorder *MockWeightedPoolExtensionMockRecorder
}

// MockWeightedPoolExtensionMockRecorder is the mock recorder for MockWeightedPoolExtension.
type MockWeightedPoolExtensionMockRecorder struct {
	mock *MockWeightedPoolExtension
}

// NewMockWeightedPoolExtension creates a new mock instance.
func NewMockWeightedPoolExtension(ctrl *gomock.Controller) *MockWeightedPoolExtension {
	mock := &MockWeightedPoolExtension{ctrl: ctrl}
	mock.recorder = &MockWeightedPoolExtensionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeightedPoolExtension) EXPECT() *MockWeightedPoolExtensionMockRecorder {
	return m.recorder
}

// AsSerializablePool mocks base method.
func (m *MockWeightedPoolExtension) AsSerializablePool() types0.PoolI {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsSerializablePool")
	ret0, _ := ret[0].(types0.PoolI)
	return ret0
}

// AsSerializablePool indicates an expected call of AsSerializablePool.
func (mr *MockWeightedPoolExtensionMockRecorder) AsSerializablePool() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsSerializablePool", reflect.TypeOf((*MockWeightedPoolExtension)(nil).AsSerializablePool))
}

// CalcExitPoolCoinsFromShares mocks base method.
func (m *MockWeightedPoolExtension) CalcExitPoolCoinsFromShares(ctx types.Context, numShares types.Int, exitFee types.Dec) (types.Coins, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalcExitPoolCoinsFromShares", ctx, numShares, exitFee)
	ret0, _ := ret[0].(types.Coins)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalcExitPoolCoinsFromShares indicates an expected call of CalcExitPoolCoinsFromShares.
func (mr *MockWeightedPoolExtensionMockRecorder) CalcExitPoolCoinsFromShares(ctx, numShares, exitFee interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalcExitPoolCoinsFromShares", reflect.TypeOf((*MockWeightedPoolExtension)(nil).CalcExitPoolCoinsFromShares), ctx, numShares, exitFee)
}

// CalcInAmtGivenOut mocks base method.
func (m *MockWeightedPoolExtension) CalcInAmtGivenOut(ctx types.Context, tokenOut types.Coins, tokenInDenom string, spreadFactor types.Dec) (types.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalcInAmtGivenOut", ctx, tokenOut, tokenInDenom, spreadFactor)
	ret0, _ := ret[0].(types.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalcInAmtGivenOut indicates an expected call of CalcInAmtGivenOut.
func (mr *MockWeightedPoolExtensionMockRecorder) CalcInAmtGivenOut(ctx, tokenOut, tokenInDenom, spreadFactor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalcInAmtGivenOut", reflect.TypeOf((*MockWeightedPoolExtension)(nil).CalcInAmtGivenOut), ctx, tokenOut, tokenInDenom, spreadFactor)
}

// CalcJoinPoolNoSwapShares mocks base method.
func (m *MockWeightedPoolExtension) CalcJoinPoolNoSwapShares(ctx types.Context, tokensIn types.Coins, spreadFactor types.Dec) (types.Int, types.Coins, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalcJoinPoolNoSwapShares", ctx, tokensIn, spreadFactor)
	ret0, _ := ret[0].(types.Int)
	ret1, _ := ret[1].(types.Coins)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CalcJoinPoolNoSwapShares indicates an expected call of CalcJoinPoolNoSwapShares.
func (mr *MockWeightedPoolExtensionMockRecorder) CalcJoinPoolNoSwapShares(ctx, tokensIn, spreadFactor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalcJoinPoolNoSwapShares", reflect.TypeOf((*MockWeightedPoolExtension)(nil).CalcJoinPoolNoSwapShares), ctx, tokensIn, spreadFactor)
}

// CalcJoinPoolShares mocks base method.
func (m *MockWeightedPoolExtension) CalcJoinPoolShares(ctx types.Context, tokensIn types.Coins, spreadFactor types.Dec) (types.Int, types.Coins, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalcJoinPoolShares", ctx, tokensIn, spreadFactor)
	ret0, _ := ret[0].(types.Int)
	ret1, _ := ret[1].(types.Coins)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CalcJoinPoolShares indicates an expected call of CalcJoinPoolShares.
func (mr *MockWeightedPoolExtensionMockRecorder) CalcJoinPoolShares(ctx, tokensIn, spreadFactor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalcJoinPoolShares", reflect.TypeOf((*MockWeightedPoolExtension)(nil).CalcJoinPoolShares), ctx, tokensIn, spreadFactor)
}

// CalcOutAmtGivenIn mocks base method.
func (m *MockWeightedPoolExtension) CalcOutAmtGivenIn(ctx types.Context, tokenIn types.Coins, tokenOutDenom string, spreadFactor types.Dec) (types.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalcOutAmtGivenIn", ctx, tokenIn, tokenOutDenom, spreadFactor)
	ret0, _ := ret[0].(types.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalcOutAmtGivenIn indicates an expected call of CalcOutAmtGivenIn.
func (mr *MockWeightedPoolExtensionMockRecorder) CalcOutAmtGivenIn(ctx, tokenIn, tokenOutDenom, spreadFactor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalcOutAmtGivenIn", reflect.TypeOf((*MockWeightedPoolExtension)(nil).CalcOutAmtGivenIn), ctx, tokenIn, tokenOutDenom, spreadFactor)
}

// ExitPool mocks base method.
func (m *MockWeightedPoolExtension) ExitPool(ctx types.Context, numShares types.Int, exitFee types.Dec) (types.Coins, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExitPool", ctx, numShares, exitFee)
	ret0, _ := ret[0].(types.Coins)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExitPool indicates an expected call of ExitPool.
func (mr *MockWeightedPoolExtensionMockRecorder) ExitPool(ctx, numShares, exitFee interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExitPool", reflect.TypeOf((*MockWeightedPoolExtension)(nil).ExitPool), ctx, numShares, exitFee)
}

// GetAddress mocks base method.
func (m *MockWeightedPoolExtension) GetAddress() types.AccAddress {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddress")
	ret0, _ := ret[0].(types.AccAddress)
	return ret0
}

// GetAddress indicates an expected call of GetAddress.
func (mr *MockWeightedPoolExtensionMockRecorder) GetAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddress", reflect.TypeOf((*MockWeightedPoolExtension)(nil).GetAddress))
}

// GetExitFee mocks base method.
func (m *MockWeightedPoolExtension) GetExitFee(ctx types.Context) types.Dec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExitFee", ctx)
	ret0, _ := ret[0].(types.Dec)
	return ret0
}

// GetExitFee indicates an expected call of GetExitFee.
func (mr *MockWeightedPoolExtensionMockRecorder) GetExitFee(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExitFee", reflect.TypeOf((*MockWeightedPoolExtension)(nil).GetExitFee), ctx)
}

// GetId mocks base method.
func (m *MockWeightedPoolExtension) GetId() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetId")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetId indicates an expected call of GetId.
func (mr *MockWeightedPoolExtensionMockRecorder) GetId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetId", reflect.TypeOf((*MockWeightedPoolExtension)(nil).GetId))
}

// GetSpreadFactor mocks base method.
func (m *MockWeightedPoolExtension) GetSpreadFactor(ctx types.Context) types.Dec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpreadFactor", ctx)
	ret0, _ := ret[0].(types.Dec)
	return ret0
}

// GetSpreadFactor indicates an expected call of GetSpreadFactor.
func (mr *MockWeightedPoolExtensionMockRecorder) GetSpreadFactor(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpreadFactor", reflect.TypeOf((*MockWeightedPoolExtension)(nil).GetSpreadFactor), ctx)
}

// GetTokenWeight mocks base method.
func (m *MockWeightedPoolExtension) GetTokenWeight(denom string) (types.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenWeight", denom)
	ret0, _ := ret[0].(types.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenWeight indicates an expected call of GetTokenWeight.
func (mr *MockWeightedPoolExtensionMockRecorder) GetTokenWeight(denom interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenWeight", reflect.TypeOf((*MockWeightedPoolExtension)(nil).GetTokenWeight), denom)
}

// GetTotalPoolLiquidity mocks base method.
func (m *MockWeightedPoolExtension) GetTotalPoolLiquidity(ctx types.Context) types.Coins {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalPoolLiquidity", ctx)
	ret0, _ := ret[0].(types.Coins)
	return ret0
}

// GetTotalPoolLiquidity indicates an expected call of GetTotalPoolLiquidity.
func (mr *MockWeightedPoolExtensionMockRecorder) GetTotalPoolLiquidity(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalPoolLiquidity", reflect.TypeOf((*MockWeightedPoolExtension)(nil).GetTotalPoolLiquidity), ctx)
}

// GetTotalShares mocks base method.
func (m *MockWeightedPoolExtension) GetTotalShares() types.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTotalShares")
	ret0, _ := ret[0].(types.Int)
	return ret0
}

// GetTotalShares indicates an expected call of GetTotalShares.
func (mr *MockWeightedPoolExtensionMockRecorder) GetTotalShares() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTotalShares", reflect.TypeOf((*MockWeightedPoolExtension)(nil).GetTotalShares))
}

// GetType mocks base method.
func (m *MockWeightedPoolExtension) GetType() types0.PoolType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetType")
	ret0, _ := ret[0].(types0.PoolType)
	return ret0
}

// GetType indicates an expected call of GetType.
func (mr *MockWeightedPoolExtensionMockRecorder) GetType() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetType", reflect.TypeOf((*MockWeightedPoolExtension)(nil).GetType))
}

// IsActive mocks base method.
func (m *MockWeightedPoolExtension) IsActive(ctx types.Context) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsActive", ctx)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsActive indicates an expected call of IsActive.
func (mr *MockWeightedPoolExtensionMockRecorder) IsActive(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsActive", reflect.TypeOf((*MockWeightedPoolExtension)(nil).IsActive), ctx)
}

// JoinPool mocks base method.
func (m *MockWeightedPoolExtension) JoinPool(ctx types.Context, tokensIn types.Coins, spreadFactor types.Dec) (types.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinPool", ctx, tokensIn, spreadFactor)
	ret0, _ := ret[0].(types.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinPool indicates an expected call of JoinPool.
func (mr *MockWeightedPoolExtensionMockRecorder) JoinPool(ctx, tokensIn, spreadFactor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinPool", reflect.TypeOf((*MockWeightedPoolExtension)(nil).JoinPool), ctx, tokensIn, spreadFactor)
}

// JoinPoolNoSwap mocks base method.
func (m *MockWeightedPoolExtension) JoinPoolNoSwap(ctx types.Context, tokensIn types.Coins, spreadFactor types.Dec) (types.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JoinPoolNoSwap", ctx, tokensIn, spreadFactor)
	ret0, _ := ret[0].(types.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JoinPoolNoSwap indicates an expected call of JoinPoolNoSwap.
func (mr *MockWeightedPoolExtensionMockRecorder) JoinPoolNoSwap(ctx, tokensIn, spreadFactor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JoinPoolNoSwap", reflect.TypeOf((*MockWeightedPoolExtension)(nil).JoinPoolNoSwap), ctx, tokensIn, spreadFactor)
}

// PokePool mocks base method.
func (m *MockWeightedPoolExtension) PokePool(blockTime time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PokePool", blockTime)
}

// PokePool indicates an expected call of PokePool.
func (mr *MockWeightedPoolExtensionMockRecorder) PokePool(blockTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PokePool", reflect.TypeOf((*MockWeightedPoolExtension)(nil).PokePool), blockTime)
}

// ProtoMessage mocks base method.
func (m *MockWeightedPoolExtension) ProtoMessage() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ProtoMessage")
}

// ProtoMessage indicates an expected call of ProtoMessage.
func (mr *MockWeightedPoolExtensionMockRecorder) ProtoMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProtoMessage", reflect.TypeOf((*MockWeightedPoolExtension)(nil).ProtoMessage))
}

// Reset mocks base method.
func (m *MockWeightedPoolExtension) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockWeightedPoolExtensionMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockWeightedPoolExtension)(nil).Reset))
}

// SpotPrice mocks base method.
func (m *MockWeightedPoolExtension) SpotPrice(ctx types.Context, quoteAssetDenom, baseAssetDenom string) (types.Dec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpotPrice", ctx, quoteAssetDenom, baseAssetDenom)
	ret0, _ := ret[0].(types.Dec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SpotPrice indicates an expected call of SpotPrice.
func (mr *MockWeightedPoolExtensionMockRecorder) SpotPrice(ctx, quoteAssetDenom, baseAssetDenom interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpotPrice", reflect.TypeOf((*MockWeightedPoolExtension)(nil).SpotPrice), ctx, quoteAssetDenom, baseAssetDenom)
}

// String mocks base method.
func (m *MockWeightedPoolExtension) String() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "String")
	ret0, _ := ret[0].(string)
	return ret0
}

// String indicates an expected call of String.
func (mr *MockWeightedPoolExtensionMockRecorder) String() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "String", reflect.TypeOf((*MockWeightedPoolExtension)(nil).String))
}

// SwapInAmtGivenOut mocks base method.
func (m *MockWeightedPoolExtension) SwapInAmtGivenOut(ctx types.Context, tokenOut types.Coins, tokenInDenom string, spreadFactor types.Dec) (types.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwapInAmtGivenOut", ctx, tokenOut, tokenInDenom, spreadFactor)
	ret0, _ := ret[0].(types.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SwapInAmtGivenOut indicates an expected call of SwapInAmtGivenOut.
func (mr *MockWeightedPoolExtensionMockRecorder) SwapInAmtGivenOut(ctx, tokenOut, tokenInDenom, spreadFactor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwapInAmtGivenOut", reflect.TypeOf((*MockWeightedPoolExtension)(nil).SwapInAmtGivenOut), ctx, tokenOut, tokenInDenom, spreadFactor)
}

// SwapOutAmtGivenIn mocks base method.
func (m *MockWeightedPoolExtension) SwapOutAmtGivenIn(ctx types.Context, tokenIn types.Coins, tokenOutDenom string, spreadFactor types.Dec) (types.Coin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SwapOutAmtGivenIn", ctx, tokenIn, tokenOutDenom, spreadFactor)
	ret0, _ := ret[0].(types.Coin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SwapOutAmtGivenIn indicates an expected call of SwapOutAmtGivenIn.
func (mr *MockWeightedPoolExtensionMockRecorder) SwapOutAmtGivenIn(ctx, tokenIn, tokenOutDenom, spreadFactor interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SwapOutAmtGivenIn", reflect.TypeOf((*MockWeightedPoolExtension)(nil).SwapOutAmtGivenIn), ctx, tokenIn, tokenOutDenom, spreadFactor)
}
