// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/osmosis-labs/osmosis/v24/x/bridge/types (interfaces: QueryServer)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "github.com/osmosis-labs/osmosis/v24/x/bridge/types"
)

// MockBridgeQueryServer is a mock of QueryServer interface.
type MockBridgeQueryServer struct {
	ctrl     *gomock.Controller
	recorder *MockBridgeQueryServerMockRecorder
}

// MockBridgeQueryServerMockRecorder is the mock recorder for MockQueryServer.
type MockBridgeQueryServerMockRecorder struct {
	mock *MockBridgeQueryServer
}

// NewMockBridgeQueryServer creates a new mock instance.
func NewMockBridgeQueryServer(ctrl *gomock.Controller) *MockBridgeQueryServer {
	mock := &MockBridgeQueryServer{ctrl: ctrl}
	mock.recorder = &MockBridgeQueryServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBridgeQueryServer) EXPECT() *MockBridgeQueryServerMockRecorder {
	return m.recorder
}

// LastTransferHeight mocks base method.
func (m *MockBridgeQueryServer) LastTransferHeight(arg0 context.Context, arg1 *types.LastTransferHeightRequest) (*types.LastTransferHeightResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastTransferHeight", arg0, arg1)
	ret0, _ := ret[0].(*types.LastTransferHeightResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastTransferHeight indicates an expected call of LastTransferHeight.
func (mr *MockBridgeQueryServerMockRecorder) LastTransferHeight(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastTransferHeight", reflect.TypeOf((*MockBridgeQueryServer)(nil).LastTransferHeight), arg0, arg1)
}

// Params mocks base method.
func (m *MockBridgeQueryServer) Params(arg0 context.Context, arg1 *types.QueryParamsRequest) (*types.QueryParamsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Params", arg0, arg1)
	ret0, _ := ret[0].(*types.QueryParamsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Params indicates an expected call of Params.
func (mr *MockBridgeQueryServerMockRecorder) Params(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Params", reflect.TypeOf((*MockBridgeQueryServer)(nil).Params), arg0, arg1)
}
