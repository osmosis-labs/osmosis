# This workflow checks that a specific commit / branch / tag is state compatible
# with the latest osmosis version by:

# - building the new `osmosisd` binary with the latest changes
# - replaying a configurable number of previous blocks from chain history

# Currently, the node starts from a snapshot taken some blocks before the last epoch
# and waits `DELTA_HALT_HEIGHT` blocks after epoch before finally halting.

# Important Caveat:

# The fact that this workflow succeeds and the binary doesn't fail doesn't
# directly imply that the new binary is state-compatible.
# It could be that the binary is not state-compatible, but the condition
# which would break state compatibility was not present in the chunk of block history used.

# On the other hand, if the workflow fails, the binary is not state-compatible.

name: Check state compatibility

# ************************************ NOTE ************************************
#
# DO NOT TRIGGER THIS WORKFLOW ON PUBLIC FORKS
#
# This workflow runs on a self-hosted runner and forks to this repository
# can potentially run dangerous code on the self-hosted runner machine
# by creating a pull request that executes the code in a workflow.
#
# ******************************************************************************

on:
  pull_request:
    branches:
      - "v[0-9]+.x"

env:
  GOLANG_VERSION: 1.18
  GENESIS_URL: https://github.com/osmosis-labs/networks/raw/main/osmosis-1/genesis.json
  ADDRBOOK_URL: https://dl2.quicksync.io/json/addrbook.osmosis.json
  SNAPSHOT_BUCKET: https://snapshots.osmosis.zone
  RPC_ENDPOINT: https://rpc.osmosis.zone
  LCD_ENDPOINT: https://lcd.osmosis.zone
  DELTA_HALT_HEIGHT: 50

jobs:
  compare_versions:
    # Compare current mainnet osmosis major version with the major version of github branch
    # Skip the next job if the current github major is greater than the current mainnet major
    runs-on: self-hosted
    outputs:
      should_i_run: ${{ steps.compare_versions.outputs.should_i_run }}
      mainnet_major_version: ${{ steps.mainnet_version.outputs.mainnet_major_version }}
    steps:
      - name: Get mainnet major version
        id: mainnet_version
        run: |
          # Find current major version via rpc.osmosis.zone/abci_info
          RPC_ABCI_INFO=$(curl -s --retry 5 --retry-delay 5 --connect-timeout 30 -H "Accept: application/json" ${{ env.RPC_ENDPOINT }}/abci_info)
          MAINNET_MAJOR_VERSION=$(echo $RPC_ABCI_INFO | dasel --plain -r json  'result.response.version' | cut -f 1 -d '.')

          echo "MAINNET_MAJOR_VERSION=$MAINNET_MAJOR_VERSION" >> $GITHUB_ENV
          echo "mainnet_major_version=$MAINNET_MAJOR_VERSION" >> $GITHUB_OUTPUT
      - name: Get GitHub branch major version
        id: compare_versions
        run: |
          CURRENT_BRANCH_MAJOR_VERSION=$(echo ${{ github.event.pull_request.base.ref }} | tr -dc '0-9')
          SHOULD_I_RUN=$(( $CURRENT_BRANCH_MAJOR_VERSION <= $MAINNET_MAJOR_VERSION ))

          echo -n "Mainnet version: $MAINNET_MAJOR_VERSION | Branch version: $CURRENT_BRANCH_MAJOR_VERSION | Should I run: "
          if (( $CURRENT_BRANCH_MAJOR_VERSION <= $MAINNET_MAJOR_VERSION )); 
          then
            echo 'should_i_run=true' >> $GITHUB_OUTPUT;
            echo "true"
          else
            echo 'should_i_run=false' >> $GITHUB_OUTPUT;
            echo "false"
          fi

  check_state_compatibility:
    # DO NOT CHANGE THIS: please read the note above
    if: ${{ github.event.pull_request.head.repo.full_name == 'osmosis-labs/osmosis' && needs.compare_versions.outputs.should_i_run == 'true' }}
    needs: compare_versions
    runs-on: self-hosted
    steps:
      - name: Checkout branch
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: üêø Setup Golang
        uses: actions/setup-go@v3
        with:
          go-version: "^${{ env.GOLANG_VERSION }}"
      - name: üî® Build the osmosisd binary
        run: |
          make build
          build/osmosisd version
      - name: üß™ Initialize Osmosis Node
        run: |
          rm -rf $HOME/.osmosisd/ || true
          build/osmosisd init runner -o

          # Download genesis file if not present
          mkdir -p /mnt/data/genesis/osmosis-1/
          if [ ! -f "/mnt/data/genesis/osmosis-1/genesis.json" ]; then
            wget -q -O /mnt/data/genesis/osmosis-1/genesis.json ${{ env.GENESIS_URL }}
          fi

          # Copy genesis to config folder
          cp /mnt/data/genesis/osmosis-1/genesis.json $HOME/.osmosisd/config/genesis.json
      - name: ‚è¨ Download last pre-epoch snapshot
        run: |
          REPO_MAJOR_VERSION=v14
          SNAPSHOT_INFO_URL=${{ env.SNAPSHOT_BUCKET }}/$REPO_MAJOR_VERSION/snapshots.json

          # Get the latest pre-epoch snapshot information from bucket
          SNAPSHOT_INFO=$(curl -s --retry 5 --retry-delay 5 --connect-timeout 30 -H "Accept: application/json" $SNAPSHOT_INFO_URL)
          SNAPSHOT_URL=$(echo $SNAPSHOT_INFO | jq -r '.[] | select(.type == "pre-epoch").url')
          SNAPSHOT_ID=$(echo $SNAPSHOT_INFO |  jq -r '.[] | select(.type == "pre-epoch").filename' | cut -f 1 -d '.')

          # Download snapshot if not already present
          mkdir -p /mnt/data/snapshots/$REPO_MAJOR_VERSION/
          if [ ! -d "/mnt/data/snapshots/$REPO_MAJOR_VERSION/$SNAPSHOT_ID" ]; then
              rm -rf /mnt/data/snapshots/$REPO_MAJOR_VERSION/*
              mkdir /mnt/data/snapshots/$REPO_MAJOR_VERSION/$SNAPSHOT_ID
              wget -q -O - $SNAPSHOT_URL | lz4 -d | tar -C /mnt/data/snapshots/$REPO_MAJOR_VERSION/$SNAPSHOT_ID -xvf -
          fi

          # Copy snapshot in Data folder
          cp -R /mnt/data/snapshots/$REPO_MAJOR_VERSION/$SNAPSHOT_ID/* $HOME/.osmosisd/
      - name: üß™ Configure Osmosis Node
        run: |
          CONFIG_FOLDER=$HOME/.osmosisd/config

          # Find last epoch block comparing repo version to current chain version
          REPO_MAJOR_VERSION=14

          if [ $REPO_MAJOR_VERSION == $MAINNET_MAJOR_VERSION ]; then
            # I'm in the latest major, fetch the epoch info from the lcd endpoint
            LAST_EPOCH_BLOCK_HEIGHT=$(curl -s --retry 5 --retry-delay 5 --connect-timeout 30 ${{ env.LCD_ENDPOINT }}/osmosis/epochs/v1beta1/epochs | dasel --plain -r json 'epochs.(identifier=day).current_epoch_start_height')
          else
            # I'm in a previous major, calculate the epoch height from the snapshot height
            # (Snapshot is taken 100 blocks before epoch)

            SNAPSHOT_INFO_URL=${{ env.SNAPSHOT_BUCKET }}/v$REPO_MAJOR_VERSION/snapshots.json
            SNAPSHOT_INFO=$(curl -s --retry 5 --retry-delay 5 --connect-timeout 30 -H "Accept: application/json" $SNAPSHOT_INFO_URL)
            SNAPSHOT_BLOCK_HEIGHT=$(echo $SNAPSHOT_INFO | jq -r '.[] | select(.type == "pre-epoch").height')
            LAST_EPOCH_BLOCK_HEIGHT=$(($SNAPSHOT_BLOCK_HEIGHT + 100))
          fi

          HALT_HEIGHT=$(($LAST_EPOCH_BLOCK_HEIGHT + ${{ env.DELTA_HALT_HEIGHT }}))

          echo "Osmosis repo version: $REPO_MAJOR_VERSION"
          echo "Last Epoch Height: $LAST_EPOCH_BLOCK_HEIGHT"
          echo "Halt Height: $HALT_HEIGHT"

          # Edit config.toml
          dasel put string -f $CONFIG_FOLDER/config.toml '.tx_index.indexer' null
          dasel put string -f $CONFIG_FOLDER/config.toml '.p2p.persistent_peers' 'b59016320a74525f92dbc3348521c64f2bf3f006@p2p.archive.osmosis.zone:26656'
          dasel put string -f $CONFIG_FOLDER/config.toml 'seeds' ''

          # Edit app.toml
          dasel put string -f $CONFIG_FOLDER/app.toml '.halt-height' $HALT_HEIGHT
          dasel put string -f $CONFIG_FOLDER/app.toml '.pruning' everything
          dasel put string -f $CONFIG_FOLDER/app.toml '.state-sync.snapshot-interval' 0

          # Download addrbook
          wget -q -O $CONFIG_FOLDER/addrbook.json ${{ env.ADDRBOOK_URL }}
      - name: üß™ Start Osmosis Node
        run: build/osmosisd start
      - name: üßπ Clean up Osmosis Home
        if: always()
        run: rm -rf $HOME/.osmosisd/ || true
