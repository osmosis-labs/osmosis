// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/validator-preference/v1beta1/state.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ValidatorPreference defines the message structure for
// CreateValidatorSetPreference. It allows a user to set {val_addr, weight} in
// state. If a user does not have a validator set preference list set, and has
// staked, make their preference list default to their current staking
// distribution.
type ValidatorPreference struct {
	// val_oper_address holds the validator address the user wants to delegate
	// funds to.
	ValOperAddress string `protobuf:"bytes,1,opt,name=val_oper_address,json=valOperAddress,proto3" json:"val_oper_address,omitempty" yaml:"val_oper_address"`
	// weight is decimal between 0 and 1, and they all sum to 1.
	Weight github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=weight,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"weight"`
}

func (m *ValidatorPreference) Reset()         { *m = ValidatorPreference{} }
func (m *ValidatorPreference) String() string { return proto.CompactTextString(m) }
func (*ValidatorPreference) ProtoMessage()    {}
func (*ValidatorPreference) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f4199f1be974865, []int{0}
}
func (m *ValidatorPreference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorPreference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorPreference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorPreference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorPreference.Merge(m, src)
}
func (m *ValidatorPreference) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorPreference) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorPreference.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorPreference proto.InternalMessageInfo

// ValidatorSetPreferences is a wrapper that holds a list of {valAddr, weights}.
// The weights are arranged in decimal notation from 0 to 1 and must add up
// to 1. A delegator can only have one validator-set and they have the ability
// to modify the weights and the validator.
type ValidatorSetPreferences struct {
	// delegator is the address of the user who created the validator-set.
	Delegator string `protobuf:"bytes,1,opt,name=delegator,proto3" json:"delegator,omitempty" yaml:"owner"`
	// preference holds {valAddr, weight} for the user who created it.
	Preferences []ValidatorPreference `protobuf:"bytes,2,rep,name=preferences,proto3" json:"preferences" yaml:"preferences"`
}

func (m *ValidatorSetPreferences) Reset()         { *m = ValidatorSetPreferences{} }
func (m *ValidatorSetPreferences) String() string { return proto.CompactTextString(m) }
func (*ValidatorSetPreferences) ProtoMessage()    {}
func (*ValidatorSetPreferences) Descriptor() ([]byte, []int) {
	return fileDescriptor_2f4199f1be974865, []int{1}
}
func (m *ValidatorSetPreferences) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorSetPreferences) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorSetPreferences.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorSetPreferences) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorSetPreferences.Merge(m, src)
}
func (m *ValidatorSetPreferences) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorSetPreferences) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorSetPreferences.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorSetPreferences proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ValidatorPreference)(nil), "osmosis.validatorpreference.v1beta1.ValidatorPreference")
	proto.RegisterType((*ValidatorSetPreferences)(nil), "osmosis.validatorpreference.v1beta1.ValidatorSetPreferences")
}

func init() {
	proto.RegisterFile("osmosis/validator-preference/v1beta1/state.proto", fileDescriptor_2f4199f1be974865)
}

var fileDescriptor_2f4199f1be974865 = []byte{
	// 383 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xc1, 0x4a, 0xf3, 0x40,
	0x10, 0xc7, 0x93, 0x7e, 0x50, 0x68, 0xfa, 0x21, 0x25, 0x0a, 0x2d, 0x55, 0x92, 0x12, 0x41, 0x7a,
	0xe9, 0xae, 0xad, 0x17, 0xf1, 0xa4, 0x45, 0xbd, 0x2a, 0x11, 0x3c, 0x78, 0xb0, 0x6c, 0x92, 0x31,
	0x0d, 0xa6, 0xd9, 0xb0, 0xbb, 0xa6, 0xf6, 0x2d, 0x7c, 0x08, 0x5f, 0xc4, 0x5b, 0x8f, 0x3d, 0x8a,
	0x87, 0xa0, 0xed, 0x1b, 0xf4, 0x09, 0xa4, 0x49, 0x4c, 0x8a, 0xf4, 0xe0, 0x69, 0x97, 0x9d, 0xf9,
	0xcd, 0xfc, 0xe7, 0xbf, 0xa3, 0x1c, 0x52, 0x3e, 0xa2, 0xdc, 0xe3, 0x38, 0x22, 0xbe, 0xe7, 0x10,
	0x41, 0x59, 0x27, 0x64, 0xf0, 0x00, 0x0c, 0x02, 0x1b, 0x70, 0xd4, 0xb5, 0x40, 0x90, 0x2e, 0xe6,
	0x82, 0x08, 0x40, 0x21, 0xa3, 0x82, 0xaa, 0xfb, 0x19, 0x81, 0x72, 0xa2, 0x00, 0x50, 0x06, 0x34,
	0x77, 0x5c, 0xea, 0xd2, 0x24, 0x1f, 0xaf, 0x6e, 0x29, 0xda, 0xdc, 0x73, 0x29, 0x75, 0x7d, 0xc0,
	0x24, 0xf4, 0x30, 0x09, 0x02, 0x2a, 0x88, 0xf0, 0x68, 0xc0, 0xd3, 0xa8, 0xf1, 0x2a, 0x2b, 0xdb,
	0xb7, 0x3f, 0x35, 0xaf, 0xf3, 0x9a, 0xea, 0x85, 0x52, 0x8b, 0x88, 0x3f, 0xa0, 0x21, 0xb0, 0x01,
	0x71, 0x1c, 0x06, 0x9c, 0x37, 0xe4, 0x96, 0xdc, 0xae, 0xf4, 0x77, 0x97, 0xb1, 0x5e, 0x9f, 0x90,
	0x91, 0x7f, 0x62, 0xfc, 0xce, 0x30, 0xcc, 0xad, 0x88, 0xf8, 0x57, 0x21, 0xb0, 0xb3, 0xf4, 0x41,
	0xbd, 0x54, 0xca, 0x63, 0xf0, 0xdc, 0xa1, 0x68, 0x94, 0x12, 0x18, 0x4d, 0x63, 0x5d, 0xfa, 0x88,
	0xf5, 0x03, 0xd7, 0x13, 0xc3, 0x27, 0x0b, 0xd9, 0x74, 0x84, 0xed, 0x64, 0xb6, 0xec, 0xe8, 0x70,
	0xe7, 0x11, 0x8b, 0x49, 0x08, 0x1c, 0x9d, 0x83, 0x6d, 0x66, 0xb4, 0xf1, 0x26, 0x2b, 0xf5, 0x5c,
	0xe6, 0x0d, 0x88, 0x42, 0x29, 0x57, 0x91, 0x52, 0x71, 0xc0, 0x07, 0x77, 0x15, 0xca, 0x34, 0xd6,
	0x96, 0xb1, 0xfe, 0x3f, 0xd5, 0x48, 0xc7, 0x01, 0x30, 0xc3, 0x2c, 0x52, 0xd4, 0x48, 0xa9, 0x16,
	0xe6, 0xf1, 0x46, 0xa9, 0xf5, 0xaf, 0x5d, 0xed, 0x1d, 0xa3, 0x3f, 0x38, 0x8c, 0x36, 0x38, 0xd5,
	0x6f, 0xae, 0x46, 0x5a, 0xc6, 0xba, 0x9a, 0xf6, 0x5b, 0x2b, 0x6d, 0x98, 0xeb, 0x8d, 0xfa, 0xf7,
	0xd3, 0x2f, 0x4d, 0x9a, 0xce, 0x35, 0x79, 0x36, 0xd7, 0xe4, 0xcf, 0xb9, 0x26, 0xbf, 0x2c, 0x34,
	0x69, 0xb6, 0xd0, 0xa4, 0xf7, 0x85, 0x26, 0xdd, 0x9d, 0xae, 0x39, 0x92, 0x49, 0xe9, 0xf8, 0xc4,
	0xe2, 0x38, 0xdf, 0x95, 0x6e, 0x0f, 0x3f, 0x6f, 0xde, 0x98, 0xc4, 0x2f, 0xab, 0x9c, 0xfc, 0xe8,
	0xd1, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x89, 0xa4, 0x66, 0xf4, 0x5e, 0x02, 0x00, 0x00,
}

func (m *ValidatorPreference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorPreference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorPreference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Weight.Size()
		i -= size
		if _, err := m.Weight.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintState(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ValOperAddress) > 0 {
		i -= len(m.ValOperAddress)
		copy(dAtA[i:], m.ValOperAddress)
		i = encodeVarintState(dAtA, i, uint64(len(m.ValOperAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorSetPreferences) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorSetPreferences) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorSetPreferences) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Preferences) > 0 {
		for iNdEx := len(m.Preferences) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Preferences[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintState(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintState(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintState(dAtA []byte, offset int, v uint64) int {
	offset -= sovState(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ValidatorPreference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValOperAddress)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	l = m.Weight.Size()
	n += 1 + l + sovState(uint64(l))
	return n
}

func (m *ValidatorSetPreferences) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovState(uint64(l))
	}
	if len(m.Preferences) > 0 {
		for _, e := range m.Preferences {
			l = e.Size()
			n += 1 + l + sovState(uint64(l))
		}
	}
	return n
}

func sovState(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozState(x uint64) (n int) {
	return sovState(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ValidatorPreference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorPreference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorPreference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValOperAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValOperAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Weight.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorSetPreferences) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowState
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorSetPreferences: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorSetPreferences: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowState
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthState
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthState
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Preferences = append(m.Preferences, ValidatorPreference{})
			if err := m.Preferences[len(m.Preferences)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipState(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthState
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipState(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowState
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowState
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthState
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupState
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthState
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthState        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowState          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupState = fmt.Errorf("proto: unexpected end of group")
)
