// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/validator-preference/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCreateValidatorSetPreference is a list that holds validator-set.
type MsgCreateValidatorSetPreference struct {
	// delegator is the user who is trying to create a validator-set.
	Delegator string `protobuf:"bytes,1,opt,name=delegator,proto3" json:"delegator,omitempty" yaml:"owner"`
	// list of {valAddr, weight} to delegate to
	Preferences []ValidatorPreference `protobuf:"bytes,2,rep,name=preferences,proto3" json:"preferences" yaml:"preferences"`
}

func (m *MsgCreateValidatorSetPreference) Reset()         { *m = MsgCreateValidatorSetPreference{} }
func (m *MsgCreateValidatorSetPreference) String() string { return proto.CompactTextString(m) }
func (*MsgCreateValidatorSetPreference) ProtoMessage()    {}
func (*MsgCreateValidatorSetPreference) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa9fa79f914b826d, []int{0}
}
func (m *MsgCreateValidatorSetPreference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateValidatorSetPreference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateValidatorSetPreference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateValidatorSetPreference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateValidatorSetPreference.Merge(m, src)
}
func (m *MsgCreateValidatorSetPreference) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateValidatorSetPreference) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateValidatorSetPreference.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateValidatorSetPreference proto.InternalMessageInfo

func (m *MsgCreateValidatorSetPreference) GetDelegator() string {
	if m != nil {
		return m.Delegator
	}
	return ""
}

func (m *MsgCreateValidatorSetPreference) GetPreferences() []ValidatorPreference {
	if m != nil {
		return m.Preferences
	}
	return nil
}

type MsgCreateValidatorSetPreferenceResponse struct {
}

func (m *MsgCreateValidatorSetPreferenceResponse) Reset() {
	*m = MsgCreateValidatorSetPreferenceResponse{}
}
func (m *MsgCreateValidatorSetPreferenceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateValidatorSetPreferenceResponse) ProtoMessage()    {}
func (*MsgCreateValidatorSetPreferenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa9fa79f914b826d, []int{1}
}
func (m *MsgCreateValidatorSetPreferenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateValidatorSetPreferenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateValidatorSetPreferenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateValidatorSetPreferenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateValidatorSetPreferenceResponse.Merge(m, src)
}
func (m *MsgCreateValidatorSetPreferenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateValidatorSetPreferenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateValidatorSetPreferenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateValidatorSetPreferenceResponse proto.InternalMessageInfo

// MsgCreateValidatorSetPreference is a set of list that holds validator-preference.
type MsgUpdateValidatorSetPreference struct {
	// delegator is the user who is trying to update a validator-set.
	Delegator string `protobuf:"bytes,1,opt,name=delegator,proto3" json:"delegator,omitempty" yaml:"owner"`
	// updated list of delegators validator-set {valAddr, weight}
	Preferences []ValidatorPreference `protobuf:"bytes,2,rep,name=preferences,proto3" json:"preferences" yaml:"preferences"`
}

func (m *MsgUpdateValidatorSetPreference) Reset()         { *m = MsgUpdateValidatorSetPreference{} }
func (m *MsgUpdateValidatorSetPreference) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateValidatorSetPreference) ProtoMessage()    {}
func (*MsgUpdateValidatorSetPreference) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa9fa79f914b826d, []int{2}
}
func (m *MsgUpdateValidatorSetPreference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateValidatorSetPreference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateValidatorSetPreference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateValidatorSetPreference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateValidatorSetPreference.Merge(m, src)
}
func (m *MsgUpdateValidatorSetPreference) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateValidatorSetPreference) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateValidatorSetPreference.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateValidatorSetPreference proto.InternalMessageInfo

func (m *MsgUpdateValidatorSetPreference) GetDelegator() string {
	if m != nil {
		return m.Delegator
	}
	return ""
}

func (m *MsgUpdateValidatorSetPreference) GetPreferences() []ValidatorPreference {
	if m != nil {
		return m.Preferences
	}
	return nil
}

type MsgUpdateValidatorSetPreferenceResponse struct {
}

func (m *MsgUpdateValidatorSetPreferenceResponse) Reset() {
	*m = MsgUpdateValidatorSetPreferenceResponse{}
}
func (m *MsgUpdateValidatorSetPreferenceResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateValidatorSetPreferenceResponse) ProtoMessage()    {}
func (*MsgUpdateValidatorSetPreferenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa9fa79f914b826d, []int{3}
}
func (m *MsgUpdateValidatorSetPreferenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateValidatorSetPreferenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateValidatorSetPreferenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateValidatorSetPreferenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateValidatorSetPreferenceResponse.Merge(m, src)
}
func (m *MsgUpdateValidatorSetPreferenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateValidatorSetPreferenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateValidatorSetPreferenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateValidatorSetPreferenceResponse proto.InternalMessageInfo

// MsgStakeToValidatorSet allows users to stake to an existing validator-set
type MsgStakeToValidatorSet struct {
	// delegator is the user who is trying to stake.
	Delegator string `protobuf:"bytes,1,opt,name=delegator,proto3" json:"delegator,omitempty" yaml:"owner"`
	// the amount of tokens the user is trying to stake.
	// For ex: UnStake 10osmo with validator-set {ValA -> 0.5, ValB -> 0.3, ValC -> 0.2}
	// our unstake logic would attempt to stake 5osmo to A , 3osmo to B, 2osmo to C.
	Coin types.Coin `protobuf:"bytes,2,opt,name=coin,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"coin"`
}

func (m *MsgStakeToValidatorSet) Reset()         { *m = MsgStakeToValidatorSet{} }
func (m *MsgStakeToValidatorSet) String() string { return proto.CompactTextString(m) }
func (*MsgStakeToValidatorSet) ProtoMessage()    {}
func (*MsgStakeToValidatorSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa9fa79f914b826d, []int{4}
}
func (m *MsgStakeToValidatorSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStakeToValidatorSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStakeToValidatorSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStakeToValidatorSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStakeToValidatorSet.Merge(m, src)
}
func (m *MsgStakeToValidatorSet) XXX_Size() int {
	return m.Size()
}
func (m *MsgStakeToValidatorSet) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStakeToValidatorSet.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStakeToValidatorSet proto.InternalMessageInfo

func (m *MsgStakeToValidatorSet) GetDelegator() string {
	if m != nil {
		return m.Delegator
	}
	return ""
}

func (m *MsgStakeToValidatorSet) GetCoin() types.Coin {
	if m != nil {
		return m.Coin
	}
	return types.Coin{}
}

type MsgStakeToValidatorSetResponse struct {
}

func (m *MsgStakeToValidatorSetResponse) Reset()         { *m = MsgStakeToValidatorSetResponse{} }
func (m *MsgStakeToValidatorSetResponse) String() string { return proto.CompactTextString(m) }
func (*MsgStakeToValidatorSetResponse) ProtoMessage()    {}
func (*MsgStakeToValidatorSetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa9fa79f914b826d, []int{5}
}
func (m *MsgStakeToValidatorSetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStakeToValidatorSetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStakeToValidatorSetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStakeToValidatorSetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStakeToValidatorSetResponse.Merge(m, src)
}
func (m *MsgStakeToValidatorSetResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgStakeToValidatorSetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStakeToValidatorSetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStakeToValidatorSetResponse proto.InternalMessageInfo

type MsgUnStakeFromValidatorSet struct {
	// delegator is the user who is trying to unstake.
	Delegator string `protobuf:"bytes,1,opt,name=delegator,proto3" json:"delegator,omitempty" yaml:"owner"`
	// the amount the user wants to unstake
	// For ex: UnStake 10osmo with validator-set {ValA -> 0.5, ValB -> 0.3, ValC -> 0.2}
	// our unstake logic would attempt to unstake 5osmo from A , 3osmo from B, 2osmo from C
	Coin types.Coin `protobuf:"bytes,3,opt,name=coin,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"coin"`
}

func (m *MsgUnStakeFromValidatorSet) Reset()         { *m = MsgUnStakeFromValidatorSet{} }
func (m *MsgUnStakeFromValidatorSet) String() string { return proto.CompactTextString(m) }
func (*MsgUnStakeFromValidatorSet) ProtoMessage()    {}
func (*MsgUnStakeFromValidatorSet) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa9fa79f914b826d, []int{6}
}
func (m *MsgUnStakeFromValidatorSet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnStakeFromValidatorSet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnStakeFromValidatorSet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnStakeFromValidatorSet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnStakeFromValidatorSet.Merge(m, src)
}
func (m *MsgUnStakeFromValidatorSet) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnStakeFromValidatorSet) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnStakeFromValidatorSet.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnStakeFromValidatorSet proto.InternalMessageInfo

func (m *MsgUnStakeFromValidatorSet) GetDelegator() string {
	if m != nil {
		return m.Delegator
	}
	return ""
}

func (m *MsgUnStakeFromValidatorSet) GetCoin() types.Coin {
	if m != nil {
		return m.Coin
	}
	return types.Coin{}
}

type MsgUnStakeFromValidatorSetResponse struct {
}

func (m *MsgUnStakeFromValidatorSetResponse) Reset()         { *m = MsgUnStakeFromValidatorSetResponse{} }
func (m *MsgUnStakeFromValidatorSetResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUnStakeFromValidatorSetResponse) ProtoMessage()    {}
func (*MsgUnStakeFromValidatorSetResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa9fa79f914b826d, []int{7}
}
func (m *MsgUnStakeFromValidatorSetResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUnStakeFromValidatorSetResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUnStakeFromValidatorSetResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUnStakeFromValidatorSetResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUnStakeFromValidatorSetResponse.Merge(m, src)
}
func (m *MsgUnStakeFromValidatorSetResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUnStakeFromValidatorSetResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUnStakeFromValidatorSetResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUnStakeFromValidatorSetResponse proto.InternalMessageInfo

// MsgWithdrawDelegationRewards allows user to claim staking rewards from the validator set.
// This message
type MsgWithdrawDelegationRewards struct {
	// delegator is the user who is trying to claim staking rewards.
	Delegator string `protobuf:"bytes,1,opt,name=delegator,proto3" json:"delegator,omitempty" yaml:"owner"`
}

func (m *MsgWithdrawDelegationRewards) Reset()         { *m = MsgWithdrawDelegationRewards{} }
func (m *MsgWithdrawDelegationRewards) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawDelegationRewards) ProtoMessage()    {}
func (*MsgWithdrawDelegationRewards) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa9fa79f914b826d, []int{8}
}
func (m *MsgWithdrawDelegationRewards) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawDelegationRewards) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawDelegationRewards.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawDelegationRewards) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawDelegationRewards.Merge(m, src)
}
func (m *MsgWithdrawDelegationRewards) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawDelegationRewards) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawDelegationRewards.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawDelegationRewards proto.InternalMessageInfo

func (m *MsgWithdrawDelegationRewards) GetDelegator() string {
	if m != nil {
		return m.Delegator
	}
	return ""
}

type MsgWithdrawDelegationRewardsResponse struct {
}

func (m *MsgWithdrawDelegationRewardsResponse) Reset()         { *m = MsgWithdrawDelegationRewardsResponse{} }
func (m *MsgWithdrawDelegationRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgWithdrawDelegationRewardsResponse) ProtoMessage()    {}
func (*MsgWithdrawDelegationRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_fa9fa79f914b826d, []int{9}
}
func (m *MsgWithdrawDelegationRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgWithdrawDelegationRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgWithdrawDelegationRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgWithdrawDelegationRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgWithdrawDelegationRewardsResponse.Merge(m, src)
}
func (m *MsgWithdrawDelegationRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgWithdrawDelegationRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgWithdrawDelegationRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgWithdrawDelegationRewardsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCreateValidatorSetPreference)(nil), "osmosis.validatorpreference.v1beta1.MsgCreateValidatorSetPreference")
	proto.RegisterType((*MsgCreateValidatorSetPreferenceResponse)(nil), "osmosis.validatorpreference.v1beta1.MsgCreateValidatorSetPreferenceResponse")
	proto.RegisterType((*MsgUpdateValidatorSetPreference)(nil), "osmosis.validatorpreference.v1beta1.MsgUpdateValidatorSetPreference")
	proto.RegisterType((*MsgUpdateValidatorSetPreferenceResponse)(nil), "osmosis.validatorpreference.v1beta1.MsgUpdateValidatorSetPreferenceResponse")
	proto.RegisterType((*MsgStakeToValidatorSet)(nil), "osmosis.validatorpreference.v1beta1.MsgStakeToValidatorSet")
	proto.RegisterType((*MsgStakeToValidatorSetResponse)(nil), "osmosis.validatorpreference.v1beta1.MsgStakeToValidatorSetResponse")
	proto.RegisterType((*MsgUnStakeFromValidatorSet)(nil), "osmosis.validatorpreference.v1beta1.MsgUnStakeFromValidatorSet")
	proto.RegisterType((*MsgUnStakeFromValidatorSetResponse)(nil), "osmosis.validatorpreference.v1beta1.MsgUnStakeFromValidatorSetResponse")
	proto.RegisterType((*MsgWithdrawDelegationRewards)(nil), "osmosis.validatorpreference.v1beta1.MsgWithdrawDelegationRewards")
	proto.RegisterType((*MsgWithdrawDelegationRewardsResponse)(nil), "osmosis.validatorpreference.v1beta1.MsgWithdrawDelegationRewardsResponse")
}

func init() {
	proto.RegisterFile("osmosis/validator-preference/v1beta1/tx.proto", fileDescriptor_fa9fa79f914b826d)
}

var fileDescriptor_fa9fa79f914b826d = []byte{
	// 564 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xdc, 0x55, 0xcd, 0x6a, 0x13, 0x41,
	0x1c, 0xcf, 0x34, 0x52, 0xe8, 0xc4, 0x83, 0xac, 0xa2, 0xe9, 0x52, 0x36, 0x61, 0x2d, 0x36, 0x1e,
	0xb2, 0x63, 0xe2, 0x45, 0xf4, 0xa0, 0x26, 0x45, 0x11, 0x8c, 0xc8, 0xd6, 0x0f, 0xe8, 0x41, 0x98,
	0xcd, 0x8e, 0xdb, 0xa5, 0xc9, 0xce, 0xb2, 0x33, 0x26, 0xed, 0x5b, 0x78, 0xf3, 0x01, 0xbc, 0xa8,
	0x78, 0xf2, 0x29, 0xea, 0xad, 0x47, 0x41, 0x88, 0x92, 0xbc, 0x41, 0x9f, 0x40, 0xf6, 0x6b, 0x36,
	0x87, 0xcd, 0x76, 0x4a, 0xea, 0xa5, 0xa7, 0x04, 0xe6, 0xf7, 0xb9, 0xfc, 0xff, 0x33, 0xb0, 0x49,
	0xd9, 0x90, 0x32, 0x97, 0xa1, 0x11, 0x1e, 0xb8, 0x36, 0xe6, 0x34, 0x68, 0xfa, 0x01, 0x79, 0x4f,
	0x02, 0xe2, 0xf5, 0x09, 0x1a, 0xb5, 0x2c, 0xc2, 0x71, 0x0b, 0xf1, 0x03, 0xc3, 0x0f, 0x28, 0xa7,
	0xca, 0xcd, 0x04, 0x6e, 0x08, 0x78, 0x86, 0x36, 0x12, 0xb4, 0x7a, 0xcd, 0xa1, 0x0e, 0x8d, 0xf0,
	0x28, 0xfc, 0x17, 0x53, 0x55, 0xad, 0x1f, 0x71, 0x91, 0x85, 0x59, 0x26, 0xdc, 0xa7, 0xae, 0x97,
	0x9c, 0xdf, 0x91, 0x4a, 0xc2, 0x38, 0xe6, 0x24, 0x66, 0xe8, 0x3f, 0x01, 0xac, 0xf5, 0x98, 0xd3,
	0x0d, 0x08, 0xe6, 0xe4, 0x4d, 0xca, 0xda, 0x21, 0xfc, 0xa5, 0xe0, 0x29, 0x06, 0x5c, 0xb3, 0xc9,
	0x80, 0x38, 0xe1, 0x49, 0x15, 0xd4, 0x41, 0x63, 0xad, 0x73, 0xe5, 0x64, 0x52, 0xbb, 0x7c, 0x88,
	0x87, 0x83, 0xfb, 0x3a, 0x1d, 0x7b, 0x24, 0xd0, 0xcd, 0x0c, 0xa2, 0x8c, 0x60, 0x25, 0x73, 0x65,
	0xd5, 0x95, 0x7a, 0xb9, 0x51, 0x69, 0xdf, 0x33, 0x24, 0x6a, 0x1b, 0x22, 0x41, 0x66, 0xdf, 0x51,
	0x8f, 0x26, 0xb5, 0xd2, 0xc9, 0xa4, 0xa6, 0xc4, 0x7e, 0x73, 0xd2, 0xba, 0x39, 0x6f, 0xa4, 0xdf,
	0x86, 0x5b, 0xa7, 0x54, 0x31, 0x09, 0xf3, 0xa9, 0xc7, 0x48, 0x5a, 0xfb, 0xb5, 0x6f, 0x5f, 0x94,
	0xda, 0x45, 0x55, 0x44, 0xed, 0x2f, 0x00, 0x5e, 0xef, 0x31, 0x67, 0x87, 0xe3, 0x7d, 0xf2, 0x8a,
	0xce, 0x83, 0xcf, 0xdc, 0xf6, 0x1d, 0xbc, 0x14, 0x0e, 0x5e, 0x75, 0xa5, 0x0e, 0x1a, 0x95, 0xf6,
	0xba, 0x11, 0x4f, 0xa6, 0x11, 0x4e, 0xa6, 0xa8, 0xd5, 0xa5, 0xae, 0xd7, 0x41, 0x61, 0x8f, 0x6f,
	0x7f, 0x6a, 0x5b, 0x8e, 0xcb, 0xf7, 0x3e, 0x58, 0x46, 0x9f, 0x0e, 0x51, 0x32, 0xc6, 0xf1, 0x4f,
	0x93, 0xd9, 0xfb, 0x88, 0x1f, 0xfa, 0x84, 0x45, 0x04, 0x33, 0xd2, 0xd5, 0xeb, 0x50, 0xcb, 0x4f,
	0x2a, 0xca, 0x7c, 0x07, 0x50, 0x0d, 0x8b, 0x7b, 0x11, 0xe8, 0x49, 0x40, 0x87, 0xe7, 0x52, 0xa8,
	0xfc, 0x9f, 0x0a, 0x6d, 0x42, 0x7d, 0x71, 0x5a, 0x51, 0xea, 0x05, 0xdc, 0xe8, 0x31, 0xe7, 0xad,
	0xcb, 0xf7, 0xec, 0x00, 0x8f, 0xb7, 0xe3, 0x74, 0x2e, 0xf5, 0x4c, 0x32, 0xc6, 0x81, 0xcd, 0xce,
	0xda, 0x4a, 0xbf, 0x05, 0x37, 0x8b, 0xf4, 0x52, 0xdf, 0xf6, 0xef, 0x55, 0x58, 0xee, 0x31, 0x47,
	0xf9, 0x01, 0xe0, 0x46, 0xe1, 0x65, 0xb0, 0x2d, 0x35, 0xd0, 0xa7, 0xec, 0xa1, 0xfa, 0xfc, 0x3c,
	0x54, 0xd2, 0xf0, 0x51, 0xe8, 0xc2, 0x55, 0x96, 0x0e, 0x5d, 0xa4, 0x22, 0x1f, 0x5a, 0x66, 0x17,
	0x95, 0x4f, 0x00, 0x5e, 0xcd, 0x5b, 0xc4, 0x07, 0xb2, 0x2e, 0x39, 0x64, 0xb5, 0xbb, 0x04, 0x59,
	0x24, 0xfb, 0x0c, 0xe0, 0x8d, 0x45, 0x5b, 0xf5, 0x50, 0xfa, 0x1b, 0xe4, 0x0b, 0xa8, 0x4f, 0x97,
	0x14, 0x10, 0x29, 0xbf, 0x02, 0xb8, 0xbe, 0x78, 0x4f, 0x1e, 0xcb, 0xda, 0x2c, 0x94, 0x50, 0x9f,
	0x2d, 0x2d, 0x91, 0x66, 0xed, 0xec, 0x1e, 0x4d, 0x35, 0x70, 0x3c, 0xd5, 0xc0, 0xdf, 0xa9, 0x06,
	0x3e, 0xce, 0xb4, 0xd2, 0xf1, 0x4c, 0x2b, 0xfd, 0x9a, 0x69, 0xa5, 0xdd, 0x47, 0x73, 0x97, 0x48,
	0x62, 0xd7, 0x1c, 0x60, 0x8b, 0x21, 0xf1, 0x92, 0xb7, 0xda, 0xe8, 0x20, 0xff, 0x3d, 0x8f, 0xae,
	0x18, 0x6b, 0x35, 0x7a, 0xc8, 0xef, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0xee, 0xae, 0xc0, 0x9a,
	0x86, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CreateValidatorSetPreference creates a set of validator preference.
	CreateValidatorSetPreference(ctx context.Context, in *MsgCreateValidatorSetPreference, opts ...grpc.CallOption) (*MsgCreateValidatorSetPreferenceResponse, error)
	// UpdateValidatorSetPreference updates an existing set of validator preference.
	UpdateValidatorSetPreference(ctx context.Context, in *MsgUpdateValidatorSetPreference, opts ...grpc.CallOption) (*MsgUpdateValidatorSetPreferenceResponse, error)
	// StakeToValidatorSet gets the owner, coins and stakes to a validator-set.
	StakeToValidatorSet(ctx context.Context, in *MsgStakeToValidatorSet, opts ...grpc.CallOption) (*MsgStakeToValidatorSetResponse, error)
	// UnStakeFromValidatorSet gets the owner and coins and unstakes from
	// validator-set. The unbonding logic will follow the `Undelegate` logic from the sdk.
	UnStakeFromValidatorSet(ctx context.Context, in *MsgUnStakeFromValidatorSet, opts ...grpc.CallOption) (*MsgUnStakeFromValidatorSetResponse, error)
	// WithdrawDelegationRewards allows users to claim rewards from the validator-set.
	WithdrawDelegationRewards(ctx context.Context, in *MsgWithdrawDelegationRewards, opts ...grpc.CallOption) (*MsgWithdrawDelegationRewardsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateValidatorSetPreference(ctx context.Context, in *MsgCreateValidatorSetPreference, opts ...grpc.CallOption) (*MsgCreateValidatorSetPreferenceResponse, error) {
	out := new(MsgCreateValidatorSetPreferenceResponse)
	err := c.cc.Invoke(ctx, "/osmosis.validatorpreference.v1beta1.Msg/CreateValidatorSetPreference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateValidatorSetPreference(ctx context.Context, in *MsgUpdateValidatorSetPreference, opts ...grpc.CallOption) (*MsgUpdateValidatorSetPreferenceResponse, error) {
	out := new(MsgUpdateValidatorSetPreferenceResponse)
	err := c.cc.Invoke(ctx, "/osmosis.validatorpreference.v1beta1.Msg/UpdateValidatorSetPreference", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StakeToValidatorSet(ctx context.Context, in *MsgStakeToValidatorSet, opts ...grpc.CallOption) (*MsgStakeToValidatorSetResponse, error) {
	out := new(MsgStakeToValidatorSetResponse)
	err := c.cc.Invoke(ctx, "/osmosis.validatorpreference.v1beta1.Msg/StakeToValidatorSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UnStakeFromValidatorSet(ctx context.Context, in *MsgUnStakeFromValidatorSet, opts ...grpc.CallOption) (*MsgUnStakeFromValidatorSetResponse, error) {
	out := new(MsgUnStakeFromValidatorSetResponse)
	err := c.cc.Invoke(ctx, "/osmosis.validatorpreference.v1beta1.Msg/UnStakeFromValidatorSet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) WithdrawDelegationRewards(ctx context.Context, in *MsgWithdrawDelegationRewards, opts ...grpc.CallOption) (*MsgWithdrawDelegationRewardsResponse, error) {
	out := new(MsgWithdrawDelegationRewardsResponse)
	err := c.cc.Invoke(ctx, "/osmosis.validatorpreference.v1beta1.Msg/WithdrawDelegationRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CreateValidatorSetPreference creates a set of validator preference.
	CreateValidatorSetPreference(context.Context, *MsgCreateValidatorSetPreference) (*MsgCreateValidatorSetPreferenceResponse, error)
	// UpdateValidatorSetPreference updates an existing set of validator preference.
	UpdateValidatorSetPreference(context.Context, *MsgUpdateValidatorSetPreference) (*MsgUpdateValidatorSetPreferenceResponse, error)
	// StakeToValidatorSet gets the owner, coins and stakes to a validator-set.
	StakeToValidatorSet(context.Context, *MsgStakeToValidatorSet) (*MsgStakeToValidatorSetResponse, error)
	// UnStakeFromValidatorSet gets the owner and coins and unstakes from
	// validator-set. The unbonding logic will follow the `Undelegate` logic from the sdk.
	UnStakeFromValidatorSet(context.Context, *MsgUnStakeFromValidatorSet) (*MsgUnStakeFromValidatorSetResponse, error)
	// WithdrawDelegationRewards allows users to claim rewards from the validator-set.
	WithdrawDelegationRewards(context.Context, *MsgWithdrawDelegationRewards) (*MsgWithdrawDelegationRewardsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateValidatorSetPreference(ctx context.Context, req *MsgCreateValidatorSetPreference) (*MsgCreateValidatorSetPreferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateValidatorSetPreference not implemented")
}
func (*UnimplementedMsgServer) UpdateValidatorSetPreference(ctx context.Context, req *MsgUpdateValidatorSetPreference) (*MsgUpdateValidatorSetPreferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateValidatorSetPreference not implemented")
}
func (*UnimplementedMsgServer) StakeToValidatorSet(ctx context.Context, req *MsgStakeToValidatorSet) (*MsgStakeToValidatorSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StakeToValidatorSet not implemented")
}
func (*UnimplementedMsgServer) UnStakeFromValidatorSet(ctx context.Context, req *MsgUnStakeFromValidatorSet) (*MsgUnStakeFromValidatorSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnStakeFromValidatorSet not implemented")
}
func (*UnimplementedMsgServer) WithdrawDelegationRewards(ctx context.Context, req *MsgWithdrawDelegationRewards) (*MsgWithdrawDelegationRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WithdrawDelegationRewards not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateValidatorSetPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateValidatorSetPreference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateValidatorSetPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.validatorpreference.v1beta1.Msg/CreateValidatorSetPreference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateValidatorSetPreference(ctx, req.(*MsgCreateValidatorSetPreference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateValidatorSetPreference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateValidatorSetPreference)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateValidatorSetPreference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.validatorpreference.v1beta1.Msg/UpdateValidatorSetPreference",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateValidatorSetPreference(ctx, req.(*MsgUpdateValidatorSetPreference))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StakeToValidatorSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStakeToValidatorSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StakeToValidatorSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.validatorpreference.v1beta1.Msg/StakeToValidatorSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StakeToValidatorSet(ctx, req.(*MsgStakeToValidatorSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UnStakeFromValidatorSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUnStakeFromValidatorSet)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UnStakeFromValidatorSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.validatorpreference.v1beta1.Msg/UnStakeFromValidatorSet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UnStakeFromValidatorSet(ctx, req.(*MsgUnStakeFromValidatorSet))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_WithdrawDelegationRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgWithdrawDelegationRewards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).WithdrawDelegationRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.validatorpreference.v1beta1.Msg/WithdrawDelegationRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).WithdrawDelegationRewards(ctx, req.(*MsgWithdrawDelegationRewards))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "osmosis.validatorpreference.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateValidatorSetPreference",
			Handler:    _Msg_CreateValidatorSetPreference_Handler,
		},
		{
			MethodName: "UpdateValidatorSetPreference",
			Handler:    _Msg_UpdateValidatorSetPreference_Handler,
		},
		{
			MethodName: "StakeToValidatorSet",
			Handler:    _Msg_StakeToValidatorSet_Handler,
		},
		{
			MethodName: "UnStakeFromValidatorSet",
			Handler:    _Msg_UnStakeFromValidatorSet_Handler,
		},
		{
			MethodName: "WithdrawDelegationRewards",
			Handler:    _Msg_WithdrawDelegationRewards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "osmosis/validator-preference/v1beta1/tx.proto",
}

func (m *MsgCreateValidatorSetPreference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateValidatorSetPreference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateValidatorSetPreference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Preferences) > 0 {
		for iNdEx := len(m.Preferences) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Preferences[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateValidatorSetPreferenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateValidatorSetPreferenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateValidatorSetPreferenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateValidatorSetPreference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateValidatorSetPreference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateValidatorSetPreference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Preferences) > 0 {
		for iNdEx := len(m.Preferences) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Preferences[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateValidatorSetPreferenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateValidatorSetPreferenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateValidatorSetPreferenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgStakeToValidatorSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStakeToValidatorSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStakeToValidatorSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgStakeToValidatorSetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStakeToValidatorSetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStakeToValidatorSetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUnStakeFromValidatorSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnStakeFromValidatorSet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnStakeFromValidatorSet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Coin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUnStakeFromValidatorSetResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUnStakeFromValidatorSetResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUnStakeFromValidatorSetResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawDelegationRewards) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawDelegationRewards) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawDelegationRewards) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Delegator) > 0 {
		i -= len(m.Delegator)
		copy(dAtA[i:], m.Delegator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Delegator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgWithdrawDelegationRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgWithdrawDelegationRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgWithdrawDelegationRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateValidatorSetPreference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Preferences) > 0 {
		for _, e := range m.Preferences {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgCreateValidatorSetPreferenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateValidatorSetPreference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Preferences) > 0 {
		for _, e := range m.Preferences {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgUpdateValidatorSetPreferenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgStakeToValidatorSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Coin.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgStakeToValidatorSetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUnStakeFromValidatorSet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.Coin.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUnStakeFromValidatorSetResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgWithdrawDelegationRewards) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Delegator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgWithdrawDelegationRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateValidatorSetPreference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateValidatorSetPreference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateValidatorSetPreference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Preferences = append(m.Preferences, ValidatorPreference{})
			if err := m.Preferences[len(m.Preferences)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateValidatorSetPreferenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateValidatorSetPreferenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateValidatorSetPreferenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateValidatorSetPreference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateValidatorSetPreference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateValidatorSetPreference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Preferences", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Preferences = append(m.Preferences, ValidatorPreference{})
			if err := m.Preferences[len(m.Preferences)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateValidatorSetPreferenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateValidatorSetPreferenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateValidatorSetPreferenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStakeToValidatorSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStakeToValidatorSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStakeToValidatorSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStakeToValidatorSetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStakeToValidatorSetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStakeToValidatorSetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnStakeFromValidatorSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnStakeFromValidatorSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnStakeFromValidatorSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Coin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Coin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUnStakeFromValidatorSetResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUnStakeFromValidatorSetResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUnStakeFromValidatorSetResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawDelegationRewards) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawDelegationRewards: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawDelegationRewards: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Delegator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Delegator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgWithdrawDelegationRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgWithdrawDelegationRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgWithdrawDelegationRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
