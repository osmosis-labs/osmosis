// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/cosmwasmpool/v1beta1/model/module_sudo_msg.proto

package msg

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ===================== SwapExactAmountIn
type SwapExactAmountIn struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// token_in is the token to be sent to the pool.
	TokenIn types.Coin `protobuf:"bytes,2,opt,name=token_in,json=tokenIn,proto3" json:"token_in"`
	// token_out_denom is the token denom to be received from the pool.
	TokenOutDenom string `protobuf:"bytes,3,opt,name=token_out_denom,json=tokenOutDenom,proto3" json:"token_out_denom,omitempty"`
	// token_out_min_amount is the minimum amount of token_out to be received from
	// the pool.
	TokenOutMinAmount cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=token_out_min_amount,json=tokenOutMinAmount,proto3,customtype=cosmossdk.io/math.Int" json:"token_out_min_amount"`
	// swap_fee is the swap fee for this swap estimate.
	SwapFee cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=swap_fee,json=swapFee,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"swap_fee"`
}

func (m *SwapExactAmountIn) Reset()         { *m = SwapExactAmountIn{} }
func (m *SwapExactAmountIn) String() string { return proto.CompactTextString(m) }
func (*SwapExactAmountIn) ProtoMessage()    {}
func (*SwapExactAmountIn) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3b9879c5388a3a5, []int{0}
}
func (m *SwapExactAmountIn) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapExactAmountIn) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapExactAmountIn.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapExactAmountIn) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapExactAmountIn.Merge(m, src)
}
func (m *SwapExactAmountIn) XXX_Size() int {
	return m.Size()
}
func (m *SwapExactAmountIn) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapExactAmountIn.DiscardUnknown(m)
}

var xxx_messageInfo_SwapExactAmountIn proto.InternalMessageInfo

func (m *SwapExactAmountIn) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *SwapExactAmountIn) GetTokenIn() types.Coin {
	if m != nil {
		return m.TokenIn
	}
	return types.Coin{}
}

func (m *SwapExactAmountIn) GetTokenOutDenom() string {
	if m != nil {
		return m.TokenOutDenom
	}
	return ""
}

type SwapExactAmountInSudoMsg struct {
	// swap_exact_amount_in is the structure containing all the request
	// information for this message.
	SwapExactAmountIn SwapExactAmountIn `protobuf:"bytes,1,opt,name=swap_exact_amount_in,json=swapExactAmountIn,proto3" json:"swap_exact_amount_in"`
}

func (m *SwapExactAmountInSudoMsg) Reset()         { *m = SwapExactAmountInSudoMsg{} }
func (m *SwapExactAmountInSudoMsg) String() string { return proto.CompactTextString(m) }
func (*SwapExactAmountInSudoMsg) ProtoMessage()    {}
func (*SwapExactAmountInSudoMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3b9879c5388a3a5, []int{1}
}
func (m *SwapExactAmountInSudoMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapExactAmountInSudoMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapExactAmountInSudoMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapExactAmountInSudoMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapExactAmountInSudoMsg.Merge(m, src)
}
func (m *SwapExactAmountInSudoMsg) XXX_Size() int {
	return m.Size()
}
func (m *SwapExactAmountInSudoMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapExactAmountInSudoMsg.DiscardUnknown(m)
}

var xxx_messageInfo_SwapExactAmountInSudoMsg proto.InternalMessageInfo

func (m *SwapExactAmountInSudoMsg) GetSwapExactAmountIn() SwapExactAmountIn {
	if m != nil {
		return m.SwapExactAmountIn
	}
	return SwapExactAmountIn{}
}

type SwapExactAmountInSudoMsgResponse struct {
	// token_out_amount is the token out computed from this swap estimate call.
	TokenOutAmount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=token_out_amount,json=tokenOutAmount,proto3,customtype=cosmossdk.io/math.Int" json:"token_out_amount"`
}

func (m *SwapExactAmountInSudoMsgResponse) Reset()         { *m = SwapExactAmountInSudoMsgResponse{} }
func (m *SwapExactAmountInSudoMsgResponse) String() string { return proto.CompactTextString(m) }
func (*SwapExactAmountInSudoMsgResponse) ProtoMessage()    {}
func (*SwapExactAmountInSudoMsgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3b9879c5388a3a5, []int{2}
}
func (m *SwapExactAmountInSudoMsgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapExactAmountInSudoMsgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapExactAmountInSudoMsgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapExactAmountInSudoMsgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapExactAmountInSudoMsgResponse.Merge(m, src)
}
func (m *SwapExactAmountInSudoMsgResponse) XXX_Size() int {
	return m.Size()
}
func (m *SwapExactAmountInSudoMsgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapExactAmountInSudoMsgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SwapExactAmountInSudoMsgResponse proto.InternalMessageInfo

// ===================== SwapExactAmountOut
type SwapExactAmountOut struct {
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty"`
	// token_out is the token to be sent out of the pool.
	TokenOut types.Coin `protobuf:"bytes,2,opt,name=token_out,json=tokenOut,proto3" json:"token_out"`
	// token_in_denom is the token denom to be sent too the pool.
	TokenInDenom string `protobuf:"bytes,3,opt,name=token_in_denom,json=tokenInDenom,proto3" json:"token_in_denom,omitempty"`
	// token_in_max_amount is the maximum amount of token_in to be sent to the
	// pool.
	TokenInMaxAmount cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=token_in_max_amount,json=tokenInMaxAmount,proto3,customtype=cosmossdk.io/math.Int" json:"token_in_max_amount"`
	// swap_fee is the swap fee for this swap estimate.
	SwapFee cosmossdk_io_math.LegacyDec `protobuf:"bytes,5,opt,name=swap_fee,json=swapFee,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"swap_fee"`
}

func (m *SwapExactAmountOut) Reset()         { *m = SwapExactAmountOut{} }
func (m *SwapExactAmountOut) String() string { return proto.CompactTextString(m) }
func (*SwapExactAmountOut) ProtoMessage()    {}
func (*SwapExactAmountOut) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3b9879c5388a3a5, []int{3}
}
func (m *SwapExactAmountOut) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapExactAmountOut) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapExactAmountOut.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapExactAmountOut) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapExactAmountOut.Merge(m, src)
}
func (m *SwapExactAmountOut) XXX_Size() int {
	return m.Size()
}
func (m *SwapExactAmountOut) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapExactAmountOut.DiscardUnknown(m)
}

var xxx_messageInfo_SwapExactAmountOut proto.InternalMessageInfo

func (m *SwapExactAmountOut) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *SwapExactAmountOut) GetTokenOut() types.Coin {
	if m != nil {
		return m.TokenOut
	}
	return types.Coin{}
}

func (m *SwapExactAmountOut) GetTokenInDenom() string {
	if m != nil {
		return m.TokenInDenom
	}
	return ""
}

type SwapExactAmountOutSudoMsg struct {
	// swap_exact_amount_out is the structure containing all the request
	// information for this message.
	SwapExactAmountOut SwapExactAmountOut `protobuf:"bytes,1,opt,name=swap_exact_amount_out,json=swapExactAmountOut,proto3" json:"swap_exact_amount_out"`
}

func (m *SwapExactAmountOutSudoMsg) Reset()         { *m = SwapExactAmountOutSudoMsg{} }
func (m *SwapExactAmountOutSudoMsg) String() string { return proto.CompactTextString(m) }
func (*SwapExactAmountOutSudoMsg) ProtoMessage()    {}
func (*SwapExactAmountOutSudoMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3b9879c5388a3a5, []int{4}
}
func (m *SwapExactAmountOutSudoMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapExactAmountOutSudoMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapExactAmountOutSudoMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapExactAmountOutSudoMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapExactAmountOutSudoMsg.Merge(m, src)
}
func (m *SwapExactAmountOutSudoMsg) XXX_Size() int {
	return m.Size()
}
func (m *SwapExactAmountOutSudoMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapExactAmountOutSudoMsg.DiscardUnknown(m)
}

var xxx_messageInfo_SwapExactAmountOutSudoMsg proto.InternalMessageInfo

func (m *SwapExactAmountOutSudoMsg) GetSwapExactAmountOut() SwapExactAmountOut {
	if m != nil {
		return m.SwapExactAmountOut
	}
	return SwapExactAmountOut{}
}

type SwapExactAmountOutSudoMsgResponse struct {
	// token_in_amount is the token in computed from this swap estimate call.
	TokenInAmount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=token_in_amount,json=tokenInAmount,proto3,customtype=cosmossdk.io/math.Int" json:"token_in_amount"`
}

func (m *SwapExactAmountOutSudoMsgResponse) Reset()         { *m = SwapExactAmountOutSudoMsgResponse{} }
func (m *SwapExactAmountOutSudoMsgResponse) String() string { return proto.CompactTextString(m) }
func (*SwapExactAmountOutSudoMsgResponse) ProtoMessage()    {}
func (*SwapExactAmountOutSudoMsgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3b9879c5388a3a5, []int{5}
}
func (m *SwapExactAmountOutSudoMsgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SwapExactAmountOutSudoMsgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SwapExactAmountOutSudoMsgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SwapExactAmountOutSudoMsgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SwapExactAmountOutSudoMsgResponse.Merge(m, src)
}
func (m *SwapExactAmountOutSudoMsgResponse) XXX_Size() int {
	return m.Size()
}
func (m *SwapExactAmountOutSudoMsgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SwapExactAmountOutSudoMsgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SwapExactAmountOutSudoMsgResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SwapExactAmountIn)(nil), "osmosis.cosmwasmpool.v1beta1.SwapExactAmountIn")
	proto.RegisterType((*SwapExactAmountInSudoMsg)(nil), "osmosis.cosmwasmpool.v1beta1.SwapExactAmountInSudoMsg")
	proto.RegisterType((*SwapExactAmountInSudoMsgResponse)(nil), "osmosis.cosmwasmpool.v1beta1.SwapExactAmountInSudoMsgResponse")
	proto.RegisterType((*SwapExactAmountOut)(nil), "osmosis.cosmwasmpool.v1beta1.SwapExactAmountOut")
	proto.RegisterType((*SwapExactAmountOutSudoMsg)(nil), "osmosis.cosmwasmpool.v1beta1.SwapExactAmountOutSudoMsg")
	proto.RegisterType((*SwapExactAmountOutSudoMsgResponse)(nil), "osmosis.cosmwasmpool.v1beta1.SwapExactAmountOutSudoMsgResponse")
}

func init() {
	proto.RegisterFile("osmosis/cosmwasmpool/v1beta1/model/module_sudo_msg.proto", fileDescriptor_e3b9879c5388a3a5)
}

var fileDescriptor_e3b9879c5388a3a5 = []byte{
	// 564 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcf, 0x6f, 0xd3, 0x30,
	0x18, 0x6d, 0xc6, 0xd8, 0x0f, 0xc3, 0xc6, 0x6a, 0x3a, 0x94, 0x0d, 0xc8, 0x4a, 0x41, 0x68, 0x17,
	0xec, 0x6d, 0x5c, 0x10, 0x42, 0x20, 0xca, 0x06, 0xaa, 0xb4, 0x52, 0xa9, 0x3b, 0xc1, 0x25, 0x72,
	0x13, 0x2f, 0x0b, 0xad, 0xfd, 0x55, 0xb3, 0xb3, 0x96, 0x2b, 0x07, 0xce, 0xfc, 0x05, 0xf0, 0xef,
	0xec, 0xb8, 0x23, 0xe2, 0x30, 0xa1, 0xf6, 0x1f, 0x41, 0x49, 0x9c, 0x96, 0x2d, 0x2a, 0xea, 0x24,
	0x2e, 0x55, 0xed, 0xef, 0x7b, 0xef, 0x7d, 0x7e, 0x79, 0x36, 0x7a, 0x06, 0x4a, 0x80, 0x0a, 0x15,
	0xf5, 0x40, 0x89, 0x1e, 0x53, 0xa2, 0x0b, 0xd0, 0xa1, 0x27, 0xdb, 0x2d, 0xae, 0xd9, 0x36, 0x15,
	0xe0, 0xf3, 0x4e, 0xfc, 0x1b, 0x75, 0xb8, 0xab, 0x22, 0x1f, 0x5c, 0xa1, 0x02, 0xd2, 0x3d, 0x06,
	0x0d, 0xf8, 0x9e, 0x41, 0x92, 0xbf, 0x91, 0xc4, 0x20, 0xd7, 0x4b, 0x01, 0x04, 0x90, 0x34, 0xd2,
	0xf8, 0x5f, 0x8a, 0x59, 0x77, 0xbc, 0x04, 0x44, 0x5b, 0x4c, 0xf1, 0x91, 0x88, 0x07, 0xa1, 0x4c,
	0xeb, 0x95, 0x1f, 0x33, 0xa8, 0x78, 0xd0, 0x63, 0xdd, 0xbd, 0x3e, 0xf3, 0xf4, 0x6b, 0x01, 0x91,
	0xd4, 0x35, 0x89, 0xef, 0xa0, 0x39, 0xc5, 0xa5, 0xcf, 0x8f, 0x6d, 0xab, 0x6c, 0x6d, 0x2e, 0x36,
	0xcd, 0x0a, 0x3f, 0x47, 0x0b, 0x1a, 0xda, 0x5c, 0xba, 0xa1, 0xb4, 0x67, 0xca, 0xd6, 0xe6, 0x8d,
	0x9d, 0x35, 0x92, 0x0a, 0x90, 0x58, 0x20, 0x9b, 0x85, 0xbc, 0x81, 0x50, 0x56, 0x67, 0x4f, 0xcf,
	0x37, 0x0a, 0xcd, 0xf9, 0x04, 0x50, 0x93, 0xf8, 0x31, 0xba, 0x95, 0x62, 0x21, 0xd2, 0xae, 0xcf,
	0x25, 0x08, 0xfb, 0x5a, 0x42, 0xbe, 0x94, 0x6c, 0x37, 0x22, 0xbd, 0x1b, 0x6f, 0xe2, 0xf7, 0xa8,
	0x34, 0xee, 0x13, 0xa1, 0x74, 0x59, 0x32, 0x95, 0x3d, 0x1b, 0x37, 0x57, 0xef, 0xc7, 0xa4, 0xbf,
	0xce, 0x37, 0x56, 0x53, 0x59, 0xe5, 0xb7, 0x49, 0x08, 0x54, 0x30, 0x7d, 0x44, 0x6a, 0x52, 0x37,
	0x8b, 0x19, 0x57, 0x3d, 0x94, 0xe9, 0x69, 0xf0, 0x4b, 0xb4, 0xa0, 0x7a, 0xac, 0xeb, 0x1e, 0x72,
	0x6e, 0x5f, 0x4f, 0x38, 0x1e, 0x1a, 0x8e, 0xbb, 0x79, 0x8e, 0x7d, 0x1e, 0x30, 0xef, 0xf3, 0x2e,
	0xf7, 0x9a, 0xf3, 0x31, 0xe8, 0x2d, 0xe7, 0x95, 0x2f, 0x16, 0xb2, 0x73, 0x0e, 0x1d, 0x44, 0x3e,
	0xd4, 0x55, 0x80, 0x0f, 0x51, 0x29, 0x21, 0xe7, 0x71, 0xd1, 0x4c, 0x1a, 0x9b, 0x63, 0x25, 0xe6,
	0x50, 0xf2, 0xaf, 0x2f, 0x46, 0x72, 0xac, 0xc6, 0xb2, 0xa2, 0xba, 0x5c, 0xa8, 0xb4, 0x51, 0x79,
	0xd2, 0x0c, 0x4d, 0xae, 0xba, 0x20, 0x15, 0xc7, 0xef, 0xd0, 0xca, 0xd8, 0x38, 0x63, 0x9a, 0x35,
	0x8d, 0x69, 0xcb, 0x99, 0x69, 0x29, 0x73, 0xe5, 0xfb, 0x0c, 0xc2, 0x97, 0xd4, 0x1a, 0x91, 0x9e,
	0x18, 0x8a, 0x17, 0x68, 0x71, 0xa4, 0x3b, 0x6d, 0x2a, 0x16, 0x32, 0x49, 0xfc, 0x08, 0x2d, 0x67,
	0x91, 0xba, 0x90, 0x8a, 0x9b, 0x26, 0x37, 0x69, 0x28, 0xf6, 0xd1, 0xed, 0x51, 0x97, 0x60, 0xfd,
	0x2b, 0x65, 0x62, 0xc5, 0x30, 0xd5, 0x59, 0xff, 0x3f, 0x45, 0xe2, 0xab, 0x85, 0xd6, 0xf2, 0x06,
	0x65, 0x99, 0x08, 0xd1, 0x6a, 0x3e, 0x13, 0xb1, 0x37, 0x69, 0x28, 0xb6, 0xae, 0x14, 0x8a, 0x46,
	0xa4, 0x8d, 0x65, 0x58, 0xe5, 0x2a, 0x95, 0x4f, 0xe8, 0xc1, 0xc4, 0x39, 0x46, 0xb9, 0xd8, 0xcb,
	0x2e, 0xde, 0xf8, 0x2e, 0x4d, 0x15, 0x8b, 0x25, 0xe3, 0x5b, 0x4a, 0x5c, 0xfd, 0x70, 0x3a, 0x70,
	0xac, 0xb3, 0x81, 0x63, 0xfd, 0x1e, 0x38, 0xd6, 0xb7, 0xa1, 0x53, 0x38, 0x1b, 0x3a, 0x85, 0x9f,
	0x43, 0xa7, 0xf0, 0xf1, 0x55, 0x10, 0xea, 0xa3, 0xa8, 0x45, 0x3c, 0x10, 0xd4, 0x9c, 0xed, 0x49,
	0x87, 0xb5, 0x54, 0xb6, 0xa0, 0x27, 0x3b, 0x5b, 0xb4, 0x7f, 0xf1, 0xbd, 0xcb, 0x16, 0x54, 0xa8,
	0xa0, 0x35, 0x97, 0xbc, 0x45, 0x4f, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x15, 0x3c, 0x96, 0x0b,
	0x1b, 0x05, 0x00, 0x00,
}

func (m *SwapExactAmountIn) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapExactAmountIn) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapExactAmountIn) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SwapFee.Size()
		i -= size
		if _, err := m.SwapFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintModuleSudoMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.TokenOutMinAmount.Size()
		i -= size
		if _, err := m.TokenOutMinAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintModuleSudoMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.TokenOutDenom) > 0 {
		i -= len(m.TokenOutDenom)
		copy(dAtA[i:], m.TokenOutDenom)
		i = encodeVarintModuleSudoMsg(dAtA, i, uint64(len(m.TokenOutDenom)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.TokenIn.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintModuleSudoMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintModuleSudoMsg(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SwapExactAmountInSudoMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapExactAmountInSudoMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapExactAmountInSudoMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SwapExactAmountIn.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintModuleSudoMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SwapExactAmountInSudoMsgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapExactAmountInSudoMsgResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapExactAmountInSudoMsgResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TokenOutAmount.Size()
		i -= size
		if _, err := m.TokenOutAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintModuleSudoMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SwapExactAmountOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapExactAmountOut) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapExactAmountOut) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SwapFee.Size()
		i -= size
		if _, err := m.SwapFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintModuleSudoMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.TokenInMaxAmount.Size()
		i -= size
		if _, err := m.TokenInMaxAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintModuleSudoMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.TokenInDenom) > 0 {
		i -= len(m.TokenInDenom)
		copy(dAtA[i:], m.TokenInDenom)
		i = encodeVarintModuleSudoMsg(dAtA, i, uint64(len(m.TokenInDenom)))
		i--
		dAtA[i] = 0x1a
	}
	{
		size, err := m.TokenOut.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintModuleSudoMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintModuleSudoMsg(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SwapExactAmountOutSudoMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapExactAmountOutSudoMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapExactAmountOutSudoMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SwapExactAmountOut.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintModuleSudoMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SwapExactAmountOutSudoMsgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SwapExactAmountOutSudoMsgResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SwapExactAmountOutSudoMsgResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TokenInAmount.Size()
		i -= size
		if _, err := m.TokenInAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintModuleSudoMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintModuleSudoMsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovModuleSudoMsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SwapExactAmountIn) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovModuleSudoMsg(uint64(l))
	}
	l = m.TokenIn.Size()
	n += 1 + l + sovModuleSudoMsg(uint64(l))
	l = len(m.TokenOutDenom)
	if l > 0 {
		n += 1 + l + sovModuleSudoMsg(uint64(l))
	}
	l = m.TokenOutMinAmount.Size()
	n += 1 + l + sovModuleSudoMsg(uint64(l))
	l = m.SwapFee.Size()
	n += 1 + l + sovModuleSudoMsg(uint64(l))
	return n
}

func (m *SwapExactAmountInSudoMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SwapExactAmountIn.Size()
	n += 1 + l + sovModuleSudoMsg(uint64(l))
	return n
}

func (m *SwapExactAmountInSudoMsgResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TokenOutAmount.Size()
	n += 1 + l + sovModuleSudoMsg(uint64(l))
	return n
}

func (m *SwapExactAmountOut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovModuleSudoMsg(uint64(l))
	}
	l = m.TokenOut.Size()
	n += 1 + l + sovModuleSudoMsg(uint64(l))
	l = len(m.TokenInDenom)
	if l > 0 {
		n += 1 + l + sovModuleSudoMsg(uint64(l))
	}
	l = m.TokenInMaxAmount.Size()
	n += 1 + l + sovModuleSudoMsg(uint64(l))
	l = m.SwapFee.Size()
	n += 1 + l + sovModuleSudoMsg(uint64(l))
	return n
}

func (m *SwapExactAmountOutSudoMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SwapExactAmountOut.Size()
	n += 1 + l + sovModuleSudoMsg(uint64(l))
	return n
}

func (m *SwapExactAmountOutSudoMsgResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TokenInAmount.Size()
	n += 1 + l + sovModuleSudoMsg(uint64(l))
	return n
}

func sovModuleSudoMsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozModuleSudoMsg(x uint64) (n int) {
	return sovModuleSudoMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SwapExactAmountIn) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModuleSudoMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapExactAmountIn: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapExactAmountIn: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleSudoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModuleSudoMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModuleSudoMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleSudoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModuleSudoMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModuleSudoMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenOutDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleSudoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModuleSudoMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModuleSudoMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenOutDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenOutMinAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleSudoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModuleSudoMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModuleSudoMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenOutMinAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleSudoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModuleSudoMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModuleSudoMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SwapFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModuleSudoMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModuleSudoMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwapExactAmountInSudoMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModuleSudoMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapExactAmountInSudoMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapExactAmountInSudoMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapExactAmountIn", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleSudoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModuleSudoMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModuleSudoMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SwapExactAmountIn.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModuleSudoMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModuleSudoMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwapExactAmountInSudoMsgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModuleSudoMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapExactAmountInSudoMsgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapExactAmountInSudoMsgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenOutAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleSudoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModuleSudoMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModuleSudoMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenOutAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModuleSudoMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModuleSudoMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwapExactAmountOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModuleSudoMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapExactAmountOut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapExactAmountOut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleSudoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModuleSudoMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModuleSudoMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleSudoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModuleSudoMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModuleSudoMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenInDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleSudoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModuleSudoMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModuleSudoMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenInDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenInMaxAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleSudoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModuleSudoMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModuleSudoMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenInMaxAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleSudoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModuleSudoMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModuleSudoMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SwapFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModuleSudoMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModuleSudoMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwapExactAmountOutSudoMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModuleSudoMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapExactAmountOutSudoMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapExactAmountOutSudoMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapExactAmountOut", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleSudoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModuleSudoMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthModuleSudoMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SwapExactAmountOut.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModuleSudoMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModuleSudoMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SwapExactAmountOutSudoMsgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModuleSudoMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SwapExactAmountOutSudoMsgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SwapExactAmountOutSudoMsgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenInAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModuleSudoMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModuleSudoMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthModuleSudoMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenInAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModuleSudoMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthModuleSudoMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModuleSudoMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModuleSudoMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModuleSudoMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModuleSudoMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthModuleSudoMsg
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupModuleSudoMsg
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthModuleSudoMsg
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthModuleSudoMsg        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModuleSudoMsg          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupModuleSudoMsg = fmt.Errorf("proto: unexpected end of group")
)
