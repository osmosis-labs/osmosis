// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/cosmwasmpool/v1beta1/model/pool_query_msg.proto

package msg

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ===================== GetSwapFeeQueryMsg
type GetSwapFeeQueryMsg struct {
	// get_swap_fee is the query strcuture to get swap fee.
	GetSwapFee EmptyStruct `protobuf:"bytes,1,opt,name=get_swap_fee,json=getSwapFee,proto3" json:"get_swap_fee"`
}

func (m *GetSwapFeeQueryMsg) Reset()         { *m = GetSwapFeeQueryMsg{} }
func (m *GetSwapFeeQueryMsg) String() string { return proto.CompactTextString(m) }
func (*GetSwapFeeQueryMsg) ProtoMessage()    {}
func (*GetSwapFeeQueryMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_3251d17e76ef0dc1, []int{0}
}
func (m *GetSwapFeeQueryMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSwapFeeQueryMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSwapFeeQueryMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSwapFeeQueryMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSwapFeeQueryMsg.Merge(m, src)
}
func (m *GetSwapFeeQueryMsg) XXX_Size() int {
	return m.Size()
}
func (m *GetSwapFeeQueryMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSwapFeeQueryMsg.DiscardUnknown(m)
}

var xxx_messageInfo_GetSwapFeeQueryMsg proto.InternalMessageInfo

func (m *GetSwapFeeQueryMsg) GetGetSwapFee() EmptyStruct {
	if m != nil {
		return m.GetSwapFee
	}
	return EmptyStruct{}
}

type GetSwapFeeQueryMsgResponse struct {
	// swap_fee is the swap fee for this swap estimate.
	SwapFee cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=swap_fee,json=swapFee,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"swap_fee"`
}

func (m *GetSwapFeeQueryMsgResponse) Reset()         { *m = GetSwapFeeQueryMsgResponse{} }
func (m *GetSwapFeeQueryMsgResponse) String() string { return proto.CompactTextString(m) }
func (*GetSwapFeeQueryMsgResponse) ProtoMessage()    {}
func (*GetSwapFeeQueryMsgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3251d17e76ef0dc1, []int{1}
}
func (m *GetSwapFeeQueryMsgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetSwapFeeQueryMsgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetSwapFeeQueryMsgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetSwapFeeQueryMsgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetSwapFeeQueryMsgResponse.Merge(m, src)
}
func (m *GetSwapFeeQueryMsgResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetSwapFeeQueryMsgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetSwapFeeQueryMsgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetSwapFeeQueryMsgResponse proto.InternalMessageInfo

// ===================== SpotPriceQueryMsg
type SpotPrice struct {
	// quote_asset_denom is the quote asset of the spot query.
	QuoteAssetDenom string `protobuf:"bytes,1,opt,name=quote_asset_denom,json=quoteAssetDenom,proto3" json:"quote_asset_denom,omitempty"`
	// base_asset_denom is the base asset of the spot query.
	BaseAssetDenom string `protobuf:"bytes,2,opt,name=base_asset_denom,json=baseAssetDenom,proto3" json:"base_asset_denom,omitempty"`
}

func (m *SpotPrice) Reset()         { *m = SpotPrice{} }
func (m *SpotPrice) String() string { return proto.CompactTextString(m) }
func (*SpotPrice) ProtoMessage()    {}
func (*SpotPrice) Descriptor() ([]byte, []int) {
	return fileDescriptor_3251d17e76ef0dc1, []int{2}
}
func (m *SpotPrice) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpotPrice) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpotPrice.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpotPrice) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpotPrice.Merge(m, src)
}
func (m *SpotPrice) XXX_Size() int {
	return m.Size()
}
func (m *SpotPrice) XXX_DiscardUnknown() {
	xxx_messageInfo_SpotPrice.DiscardUnknown(m)
}

var xxx_messageInfo_SpotPrice proto.InternalMessageInfo

func (m *SpotPrice) GetQuoteAssetDenom() string {
	if m != nil {
		return m.QuoteAssetDenom
	}
	return ""
}

func (m *SpotPrice) GetBaseAssetDenom() string {
	if m != nil {
		return m.BaseAssetDenom
	}
	return ""
}

type SpotPriceQueryMsg struct {
	// spot_price is the structure containing request field of the spot price
	// query message.
	SpotPrice SpotPrice `protobuf:"bytes,1,opt,name=spot_price,json=spotPrice,proto3" json:"spot_price"`
}

func (m *SpotPriceQueryMsg) Reset()         { *m = SpotPriceQueryMsg{} }
func (m *SpotPriceQueryMsg) String() string { return proto.CompactTextString(m) }
func (*SpotPriceQueryMsg) ProtoMessage()    {}
func (*SpotPriceQueryMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_3251d17e76ef0dc1, []int{3}
}
func (m *SpotPriceQueryMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpotPriceQueryMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpotPriceQueryMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpotPriceQueryMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpotPriceQueryMsg.Merge(m, src)
}
func (m *SpotPriceQueryMsg) XXX_Size() int {
	return m.Size()
}
func (m *SpotPriceQueryMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_SpotPriceQueryMsg.DiscardUnknown(m)
}

var xxx_messageInfo_SpotPriceQueryMsg proto.InternalMessageInfo

func (m *SpotPriceQueryMsg) GetSpotPrice() SpotPrice {
	if m != nil {
		return m.SpotPrice
	}
	return SpotPrice{}
}

type SpotPriceQueryMsgResponse struct {
	// spot_price is the spot price returned.
	SpotPrice string `protobuf:"bytes,1,opt,name=spot_price,json=spotPrice,proto3" json:"spot_price,omitempty"`
}

func (m *SpotPriceQueryMsgResponse) Reset()         { *m = SpotPriceQueryMsgResponse{} }
func (m *SpotPriceQueryMsgResponse) String() string { return proto.CompactTextString(m) }
func (*SpotPriceQueryMsgResponse) ProtoMessage()    {}
func (*SpotPriceQueryMsgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3251d17e76ef0dc1, []int{4}
}
func (m *SpotPriceQueryMsgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpotPriceQueryMsgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpotPriceQueryMsgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpotPriceQueryMsgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpotPriceQueryMsgResponse.Merge(m, src)
}
func (m *SpotPriceQueryMsgResponse) XXX_Size() int {
	return m.Size()
}
func (m *SpotPriceQueryMsgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SpotPriceQueryMsgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SpotPriceQueryMsgResponse proto.InternalMessageInfo

func (m *SpotPriceQueryMsgResponse) GetSpotPrice() string {
	if m != nil {
		return m.SpotPrice
	}
	return ""
}

// ===================== GetTotalPoolLiquidityQueryMsg
type EmptyStruct struct {
}

func (m *EmptyStruct) Reset()         { *m = EmptyStruct{} }
func (m *EmptyStruct) String() string { return proto.CompactTextString(m) }
func (*EmptyStruct) ProtoMessage()    {}
func (*EmptyStruct) Descriptor() ([]byte, []int) {
	return fileDescriptor_3251d17e76ef0dc1, []int{5}
}
func (m *EmptyStruct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmptyStruct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmptyStruct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmptyStruct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmptyStruct.Merge(m, src)
}
func (m *EmptyStruct) XXX_Size() int {
	return m.Size()
}
func (m *EmptyStruct) XXX_DiscardUnknown() {
	xxx_messageInfo_EmptyStruct.DiscardUnknown(m)
}

var xxx_messageInfo_EmptyStruct proto.InternalMessageInfo

type GetTotalPoolLiquidityQueryMsg struct {
	// get_total_pool_liquidity is the structure containing request field of the
	// total pool liquidity query message.
	GetTotalPoolLiquidity EmptyStruct `protobuf:"bytes,1,opt,name=get_total_pool_liquidity,json=getTotalPoolLiquidity,proto3" json:"get_total_pool_liquidity"`
}

func (m *GetTotalPoolLiquidityQueryMsg) Reset()         { *m = GetTotalPoolLiquidityQueryMsg{} }
func (m *GetTotalPoolLiquidityQueryMsg) String() string { return proto.CompactTextString(m) }
func (*GetTotalPoolLiquidityQueryMsg) ProtoMessage()    {}
func (*GetTotalPoolLiquidityQueryMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_3251d17e76ef0dc1, []int{6}
}
func (m *GetTotalPoolLiquidityQueryMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTotalPoolLiquidityQueryMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTotalPoolLiquidityQueryMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTotalPoolLiquidityQueryMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTotalPoolLiquidityQueryMsg.Merge(m, src)
}
func (m *GetTotalPoolLiquidityQueryMsg) XXX_Size() int {
	return m.Size()
}
func (m *GetTotalPoolLiquidityQueryMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTotalPoolLiquidityQueryMsg.DiscardUnknown(m)
}

var xxx_messageInfo_GetTotalPoolLiquidityQueryMsg proto.InternalMessageInfo

func (m *GetTotalPoolLiquidityQueryMsg) GetGetTotalPoolLiquidity() EmptyStruct {
	if m != nil {
		return m.GetTotalPoolLiquidity
	}
	return EmptyStruct{}
}

type GetTotalPoolLiquidityQueryMsgResponse struct {
	// total_pool_liquidity is the total liquidity in the pool denominated in
	// coins.
	TotalPoolLiquidity []types.Coin `protobuf:"bytes,1,rep,name=total_pool_liquidity,json=totalPoolLiquidity,proto3" json:"total_pool_liquidity"`
}

func (m *GetTotalPoolLiquidityQueryMsgResponse) Reset()         { *m = GetTotalPoolLiquidityQueryMsgResponse{} }
func (m *GetTotalPoolLiquidityQueryMsgResponse) String() string { return proto.CompactTextString(m) }
func (*GetTotalPoolLiquidityQueryMsgResponse) ProtoMessage()    {}
func (*GetTotalPoolLiquidityQueryMsgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3251d17e76ef0dc1, []int{7}
}
func (m *GetTotalPoolLiquidityQueryMsgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTotalPoolLiquidityQueryMsgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTotalPoolLiquidityQueryMsgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTotalPoolLiquidityQueryMsgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTotalPoolLiquidityQueryMsgResponse.Merge(m, src)
}
func (m *GetTotalPoolLiquidityQueryMsgResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTotalPoolLiquidityQueryMsgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTotalPoolLiquidityQueryMsgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTotalPoolLiquidityQueryMsgResponse proto.InternalMessageInfo

func (m *GetTotalPoolLiquidityQueryMsgResponse) GetTotalPoolLiquidity() []types.Coin {
	if m != nil {
		return m.TotalPoolLiquidity
	}
	return nil
}

// ===================== GetTotalSharesQueryMsg
type GetTotalSharesQueryMsg struct {
	// get_total_shares is the structure containing request field of the
	// total shares query message.
	GetTotalShares EmptyStruct `protobuf:"bytes,1,opt,name=get_total_shares,json=getTotalShares,proto3" json:"get_total_shares"`
}

func (m *GetTotalSharesQueryMsg) Reset()         { *m = GetTotalSharesQueryMsg{} }
func (m *GetTotalSharesQueryMsg) String() string { return proto.CompactTextString(m) }
func (*GetTotalSharesQueryMsg) ProtoMessage()    {}
func (*GetTotalSharesQueryMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_3251d17e76ef0dc1, []int{8}
}
func (m *GetTotalSharesQueryMsg) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTotalSharesQueryMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTotalSharesQueryMsg.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTotalSharesQueryMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTotalSharesQueryMsg.Merge(m, src)
}
func (m *GetTotalSharesQueryMsg) XXX_Size() int {
	return m.Size()
}
func (m *GetTotalSharesQueryMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTotalSharesQueryMsg.DiscardUnknown(m)
}

var xxx_messageInfo_GetTotalSharesQueryMsg proto.InternalMessageInfo

func (m *GetTotalSharesQueryMsg) GetGetTotalShares() EmptyStruct {
	if m != nil {
		return m.GetTotalShares
	}
	return EmptyStruct{}
}

type GetTotalSharesQueryMsgResponse struct {
	// total_shares is the amount of shares returned.
	TotalShares string `protobuf:"bytes,1,opt,name=total_shares,json=totalShares,proto3" json:"total_shares,omitempty"`
}

func (m *GetTotalSharesQueryMsgResponse) Reset()         { *m = GetTotalSharesQueryMsgResponse{} }
func (m *GetTotalSharesQueryMsgResponse) String() string { return proto.CompactTextString(m) }
func (*GetTotalSharesQueryMsgResponse) ProtoMessage()    {}
func (*GetTotalSharesQueryMsgResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3251d17e76ef0dc1, []int{9}
}
func (m *GetTotalSharesQueryMsgResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetTotalSharesQueryMsgResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetTotalSharesQueryMsgResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetTotalSharesQueryMsgResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetTotalSharesQueryMsgResponse.Merge(m, src)
}
func (m *GetTotalSharesQueryMsgResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetTotalSharesQueryMsgResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetTotalSharesQueryMsgResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetTotalSharesQueryMsgResponse proto.InternalMessageInfo

func (m *GetTotalSharesQueryMsgResponse) GetTotalShares() string {
	if m != nil {
		return m.TotalShares
	}
	return ""
}

func init() {
	proto.RegisterType((*GetSwapFeeQueryMsg)(nil), "osmosis.cosmwasmpool.v1beta1.GetSwapFeeQueryMsg")
	proto.RegisterType((*GetSwapFeeQueryMsgResponse)(nil), "osmosis.cosmwasmpool.v1beta1.GetSwapFeeQueryMsgResponse")
	proto.RegisterType((*SpotPrice)(nil), "osmosis.cosmwasmpool.v1beta1.SpotPrice")
	proto.RegisterType((*SpotPriceQueryMsg)(nil), "osmosis.cosmwasmpool.v1beta1.SpotPriceQueryMsg")
	proto.RegisterType((*SpotPriceQueryMsgResponse)(nil), "osmosis.cosmwasmpool.v1beta1.SpotPriceQueryMsgResponse")
	proto.RegisterType((*EmptyStruct)(nil), "osmosis.cosmwasmpool.v1beta1.EmptyStruct")
	proto.RegisterType((*GetTotalPoolLiquidityQueryMsg)(nil), "osmosis.cosmwasmpool.v1beta1.GetTotalPoolLiquidityQueryMsg")
	proto.RegisterType((*GetTotalPoolLiquidityQueryMsgResponse)(nil), "osmosis.cosmwasmpool.v1beta1.GetTotalPoolLiquidityQueryMsgResponse")
	proto.RegisterType((*GetTotalSharesQueryMsg)(nil), "osmosis.cosmwasmpool.v1beta1.GetTotalSharesQueryMsg")
	proto.RegisterType((*GetTotalSharesQueryMsgResponse)(nil), "osmosis.cosmwasmpool.v1beta1.GetTotalSharesQueryMsgResponse")
}

func init() {
	proto.RegisterFile("osmosis/cosmwasmpool/v1beta1/model/pool_query_msg.proto", fileDescriptor_3251d17e76ef0dc1)
}

var fileDescriptor_3251d17e76ef0dc1 = []byte{
	// 545 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x94, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0xc7, 0xe3, 0xaf, 0x9f, 0x00, 0x4f, 0x4a, 0x69, 0xad, 0x82, 0xda, 0x40, 0xdd, 0x62, 0x84,
	0x08, 0x48, 0xd8, 0x4a, 0x38, 0x20, 0x71, 0x00, 0x91, 0x16, 0x7a, 0x09, 0x52, 0x93, 0x70, 0x29,
	0x42, 0xb2, 0x36, 0xce, 0xb2, 0xb1, 0xb0, 0x33, 0x4e, 0x66, 0xd3, 0x10, 0xde, 0x80, 0x1b, 0x8f,
	0xd5, 0x63, 0x8f, 0x88, 0x43, 0x85, 0x92, 0x17, 0x41, 0xeb, 0x38, 0x9b, 0x44, 0x29, 0x39, 0xf4,
	0x96, 0x9d, 0x9d, 0xff, 0xfc, 0xe6, 0x3f, 0xb3, 0x31, 0xbc, 0x44, 0x8a, 0x91, 0x42, 0xf2, 0x02,
	0xa4, 0x78, 0xc0, 0x28, 0x4e, 0x10, 0x23, 0xef, 0xac, 0xd4, 0xe4, 0x92, 0x95, 0xbc, 0x18, 0x5b,
	0x3c, 0xf2, 0x54, 0xc8, 0xef, 0xf6, 0x79, 0x6f, 0xe8, 0xc7, 0x24, 0xdc, 0xa4, 0x87, 0x12, 0xad,
	0x07, 0x99, 0xd0, 0x9d, 0x17, 0xba, 0x99, 0xb0, 0xb0, 0x2d, 0x50, 0x60, 0x9a, 0xe8, 0xa9, 0x5f,
	0x13, 0x4d, 0xc1, 0x0e, 0x52, 0x91, 0xd7, 0x64, 0xc4, 0x35, 0x23, 0xc0, 0xb0, 0x33, 0xb9, 0x77,
	0x04, 0x58, 0xc7, 0x5c, 0x36, 0x06, 0x2c, 0x79, 0xcf, 0x79, 0x4d, 0x01, 0x3f, 0x90, 0xb0, 0x6a,
	0xb0, 0x2e, 0xb8, 0xf4, 0x69, 0xc0, 0x12, 0xff, 0x0b, 0xe7, 0x3b, 0xc6, 0x81, 0x51, 0xcc, 0x97,
	0x9f, 0xba, 0xab, 0x1a, 0x70, 0xdf, 0xc5, 0x89, 0x1c, 0x36, 0x64, 0xaf, 0x1f, 0xc8, 0xca, 0xff,
	0xe7, 0x97, 0xfb, 0xb9, 0x3a, 0x08, 0x5d, 0xda, 0xf9, 0x0c, 0x85, 0x65, 0x50, 0x9d, 0x53, 0x82,
	0x1d, 0xe2, 0xd6, 0x6b, 0xb8, 0xa5, 0x61, 0x6b, 0x07, 0x46, 0xd1, 0xac, 0x3c, 0x52, 0x15, 0x7e,
	0x5f, 0xee, 0xdf, 0x9f, 0x18, 0xa0, 0xd6, 0x57, 0x37, 0x44, 0x2f, 0x66, 0xb2, 0xed, 0x56, 0xb9,
	0x60, 0xc1, 0xf0, 0x88, 0x07, 0xf5, 0x9b, 0x94, 0x55, 0x67, 0x60, 0x36, 0x12, 0x94, 0x27, 0xbd,
	0x30, 0xe0, 0xd6, 0x33, 0xd8, 0xea, 0xf6, 0x51, 0x72, 0x9f, 0x11, 0x71, 0xe9, 0xb7, 0x78, 0x07,
	0xe3, 0xd4, 0x82, 0x59, 0xbf, 0x93, 0x5e, 0xbc, 0x55, 0xf1, 0x23, 0x15, 0xb6, 0x8a, 0xb0, 0xa9,
	0x46, 0xb3, 0x90, 0xfa, 0x5f, 0x9a, 0xba, 0xa1, 0xe2, 0xb3, 0x4c, 0x87, 0xc1, 0x96, 0x46, 0xe8,
	0x41, 0x55, 0x01, 0x28, 0x41, 0xe9, 0x27, 0x2a, 0x9a, 0x8d, 0xe9, 0xc9, 0xea, 0x31, 0xe9, 0x22,
	0xd9, 0x90, 0x4c, 0x9a, 0x06, 0x9c, 0x57, 0xb0, 0xbb, 0x84, 0xd0, 0x23, 0xda, 0x5b, 0x42, 0x99,
	0xf3, 0xda, 0xdb, 0x90, 0x9f, 0x5b, 0x80, 0xf3, 0xc3, 0x80, 0xbd, 0x63, 0x2e, 0x3f, 0xa2, 0x64,
	0xd1, 0x09, 0x62, 0x54, 0x0d, 0xbb, 0xfd, 0xb0, 0x15, 0xca, 0xa1, 0x6e, 0xbd, 0x0d, 0x3b, 0x6a,
	0xc7, 0x52, 0x65, 0xf8, 0xe9, 0x7b, 0x8b, 0xa6, 0x39, 0xd7, 0xdd, 0xf7, 0x5d, 0x71, 0x15, 0xd1,
	0xf9, 0x0e, 0x8f, 0x57, 0xb6, 0xa2, 0x2d, 0xd6, 0x60, 0xfb, 0x1f, 0xed, 0xac, 0x15, 0xf3, 0xe5,
	0x5d, 0x77, 0xf2, 0x14, 0x5c, 0xb5, 0x18, 0xdd, 0xc5, 0x21, 0x86, 0x9d, 0x0c, 0x6f, 0xc9, 0x65,
	0x36, 0xc1, 0xbd, 0x29, 0xbb, 0xd1, 0x66, 0x3d, 0x4e, 0xda, 0xff, 0x29, 0x6c, 0xce, 0xfc, 0x53,
	0x7a, 0x77, 0x5d, 0xdf, 0x1b, 0x62, 0x01, 0xe1, 0x1c, 0x82, 0x7d, 0x35, 0x54, 0x3b, 0x7d, 0x08,
	0xeb, 0x4b, 0x60, 0xb3, 0x9e, 0x97, 0x33, 0x49, 0xe5, 0xf4, 0x7c, 0x64, 0x1b, 0x17, 0x23, 0xdb,
	0xf8, 0x33, 0xb2, 0x8d, 0x9f, 0x63, 0x3b, 0x77, 0x31, 0xb6, 0x73, 0xbf, 0xc6, 0x76, 0xee, 0xd3,
	0x1b, 0x11, 0xca, 0x76, 0xbf, 0xe9, 0x06, 0x18, 0x7b, 0x59, 0xa7, 0xcf, 0x23, 0xd6, 0xa4, 0xe9,
	0xc1, 0x3b, 0x2b, 0x97, 0xbc, 0x6f, 0x8b, 0x9f, 0x97, 0xe9, 0xc1, 0x8b, 0x49, 0x34, 0x6f, 0xa4,
	0xff, 0xfd, 0x17, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x3d, 0xde, 0xc6, 0x16, 0x8a, 0x04, 0x00,
	0x00,
}

func (m *GetSwapFeeQueryMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSwapFeeQueryMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSwapFeeQueryMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.GetSwapFee.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPoolQueryMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetSwapFeeQueryMsgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetSwapFeeQueryMsgResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetSwapFeeQueryMsgResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.SwapFee.Size()
		i -= size
		if _, err := m.SwapFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintPoolQueryMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	return len(dAtA) - i, nil
}

func (m *SpotPrice) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpotPrice) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpotPrice) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BaseAssetDenom) > 0 {
		i -= len(m.BaseAssetDenom)
		copy(dAtA[i:], m.BaseAssetDenom)
		i = encodeVarintPoolQueryMsg(dAtA, i, uint64(len(m.BaseAssetDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.QuoteAssetDenom) > 0 {
		i -= len(m.QuoteAssetDenom)
		copy(dAtA[i:], m.QuoteAssetDenom)
		i = encodeVarintPoolQueryMsg(dAtA, i, uint64(len(m.QuoteAssetDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SpotPriceQueryMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpotPriceQueryMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpotPriceQueryMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SpotPrice.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPoolQueryMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SpotPriceQueryMsgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpotPriceQueryMsgResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpotPriceQueryMsgResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SpotPrice) > 0 {
		i -= len(m.SpotPrice)
		copy(dAtA[i:], m.SpotPrice)
		i = encodeVarintPoolQueryMsg(dAtA, i, uint64(len(m.SpotPrice)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EmptyStruct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmptyStruct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmptyStruct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetTotalPoolLiquidityQueryMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTotalPoolLiquidityQueryMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTotalPoolLiquidityQueryMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.GetTotalPoolLiquidity.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPoolQueryMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetTotalPoolLiquidityQueryMsgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTotalPoolLiquidityQueryMsgResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTotalPoolLiquidityQueryMsgResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalPoolLiquidity) > 0 {
		for iNdEx := len(m.TotalPoolLiquidity) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalPoolLiquidity[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPoolQueryMsg(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetTotalSharesQueryMsg) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTotalSharesQueryMsg) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTotalSharesQueryMsg) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.GetTotalShares.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPoolQueryMsg(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *GetTotalSharesQueryMsgResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetTotalSharesQueryMsgResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetTotalSharesQueryMsgResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalShares) > 0 {
		i -= len(m.TotalShares)
		copy(dAtA[i:], m.TotalShares)
		i = encodeVarintPoolQueryMsg(dAtA, i, uint64(len(m.TotalShares)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPoolQueryMsg(dAtA []byte, offset int, v uint64) int {
	offset -= sovPoolQueryMsg(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetSwapFeeQueryMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GetSwapFee.Size()
	n += 1 + l + sovPoolQueryMsg(uint64(l))
	return n
}

func (m *GetSwapFeeQueryMsgResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SwapFee.Size()
	n += 1 + l + sovPoolQueryMsg(uint64(l))
	return n
}

func (m *SpotPrice) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.QuoteAssetDenom)
	if l > 0 {
		n += 1 + l + sovPoolQueryMsg(uint64(l))
	}
	l = len(m.BaseAssetDenom)
	if l > 0 {
		n += 1 + l + sovPoolQueryMsg(uint64(l))
	}
	return n
}

func (m *SpotPriceQueryMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SpotPrice.Size()
	n += 1 + l + sovPoolQueryMsg(uint64(l))
	return n
}

func (m *SpotPriceQueryMsgResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpotPrice)
	if l > 0 {
		n += 1 + l + sovPoolQueryMsg(uint64(l))
	}
	return n
}

func (m *EmptyStruct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetTotalPoolLiquidityQueryMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GetTotalPoolLiquidity.Size()
	n += 1 + l + sovPoolQueryMsg(uint64(l))
	return n
}

func (m *GetTotalPoolLiquidityQueryMsgResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TotalPoolLiquidity) > 0 {
		for _, e := range m.TotalPoolLiquidity {
			l = e.Size()
			n += 1 + l + sovPoolQueryMsg(uint64(l))
		}
	}
	return n
}

func (m *GetTotalSharesQueryMsg) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.GetTotalShares.Size()
	n += 1 + l + sovPoolQueryMsg(uint64(l))
	return n
}

func (m *GetTotalSharesQueryMsgResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TotalShares)
	if l > 0 {
		n += 1 + l + sovPoolQueryMsg(uint64(l))
	}
	return n
}

func sovPoolQueryMsg(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPoolQueryMsg(x uint64) (n int) {
	return sovPoolQueryMsg(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetSwapFeeQueryMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolQueryMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSwapFeeQueryMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSwapFeeQueryMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetSwapFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolQueryMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GetSwapFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoolQueryMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetSwapFeeQueryMsgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolQueryMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetSwapFeeQueryMsgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetSwapFeeQueryMsgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SwapFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolQueryMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SwapFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoolQueryMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpotPrice) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolQueryMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpotPrice: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpotPrice: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteAssetDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolQueryMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteAssetDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseAssetDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolQueryMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseAssetDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoolQueryMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpotPriceQueryMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolQueryMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpotPriceQueryMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpotPriceQueryMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpotPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolQueryMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SpotPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoolQueryMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpotPriceQueryMsgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolQueryMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpotPriceQueryMsgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpotPriceQueryMsgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpotPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolQueryMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpotPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoolQueryMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmptyStruct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolQueryMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmptyStruct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmptyStruct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipPoolQueryMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTotalPoolLiquidityQueryMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolQueryMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTotalPoolLiquidityQueryMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTotalPoolLiquidityQueryMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetTotalPoolLiquidity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolQueryMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GetTotalPoolLiquidity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoolQueryMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTotalPoolLiquidityQueryMsgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolQueryMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTotalPoolLiquidityQueryMsgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTotalPoolLiquidityQueryMsgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPoolLiquidity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolQueryMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalPoolLiquidity = append(m.TotalPoolLiquidity, types.Coin{})
			if err := m.TotalPoolLiquidity[len(m.TotalPoolLiquidity)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoolQueryMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTotalSharesQueryMsg) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolQueryMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTotalSharesQueryMsg: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTotalSharesQueryMsg: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GetTotalShares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolQueryMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.GetTotalShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoolQueryMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetTotalSharesQueryMsgResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolQueryMsg
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetTotalSharesQueryMsgResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetTotalSharesQueryMsgResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShares", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolQueryMsg
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalShares = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoolQueryMsg(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPoolQueryMsg
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPoolQueryMsg(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPoolQueryMsg
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPoolQueryMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPoolQueryMsg
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPoolQueryMsg
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPoolQueryMsg
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPoolQueryMsg
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPoolQueryMsg        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPoolQueryMsg          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPoolQueryMsg = fmt.Errorf("proto: unexpected end of group")
)
