// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/streamswap/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QuerySales struct {
	// pagination defines an pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySales) Reset()         { *m = QuerySales{} }
func (m *QuerySales) String() string { return proto.CompactTextString(m) }
func (*QuerySales) ProtoMessage()    {}
func (*QuerySales) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fb259eb5fae3ea4, []int{0}
}
func (m *QuerySales) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySales) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySales.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySales) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySales.Merge(m, src)
}
func (m *QuerySales) XXX_Size() int {
	return m.Size()
}
func (m *QuerySales) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySales.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySales proto.InternalMessageInfo

type QuerySalesResponse struct {
	Sales      []Sale              `protobuf:"bytes,1,rep,name=sales,proto3" json:"sales"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySalesResponse) Reset()         { *m = QuerySalesResponse{} }
func (m *QuerySalesResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySalesResponse) ProtoMessage()    {}
func (*QuerySalesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fb259eb5fae3ea4, []int{1}
}
func (m *QuerySalesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySalesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySalesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySalesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySalesResponse.Merge(m, src)
}
func (m *QuerySalesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySalesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySalesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySalesResponse proto.InternalMessageInfo

// Request type for Query/Sale
type QuerySale struct {
	// Sale ID
	SaleId uint64 `protobuf:"varint,1,opt,name=sale_id,json=saleId,proto3" json:"sale_id,omitempty"`
}

func (m *QuerySale) Reset()         { *m = QuerySale{} }
func (m *QuerySale) String() string { return proto.CompactTextString(m) }
func (*QuerySale) ProtoMessage()    {}
func (*QuerySale) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fb259eb5fae3ea4, []int{2}
}
func (m *QuerySale) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySale) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySale.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySale) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySale.Merge(m, src)
}
func (m *QuerySale) XXX_Size() int {
	return m.Size()
}
func (m *QuerySale) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySale.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySale proto.InternalMessageInfo

type QuerySaleResponse struct {
	Sale Sale `protobuf:"bytes,1,opt,name=sale,proto3" json:"sale"`
}

func (m *QuerySaleResponse) Reset()         { *m = QuerySaleResponse{} }
func (m *QuerySaleResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySaleResponse) ProtoMessage()    {}
func (*QuerySaleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fb259eb5fae3ea4, []int{3}
}
func (m *QuerySaleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySaleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySaleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySaleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySaleResponse.Merge(m, src)
}
func (m *QuerySaleResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySaleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySaleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySaleResponse proto.InternalMessageInfo

// Request type for Query/Sale
type QueryUserPosition struct {
	// ID of the Sale
	SaleId uint64 `protobuf:"varint,1,opt,name=sale_id,json=saleId,proto3" json:"sale_id,omitempty"`
	// user account address
	User string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (m *QueryUserPosition) Reset()         { *m = QueryUserPosition{} }
func (m *QueryUserPosition) String() string { return proto.CompactTextString(m) }
func (*QueryUserPosition) ProtoMessage()    {}
func (*QueryUserPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fb259eb5fae3ea4, []int{4}
}
func (m *QueryUserPosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserPosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserPosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserPosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserPosition.Merge(m, src)
}
func (m *QueryUserPosition) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserPosition) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserPosition.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserPosition proto.InternalMessageInfo

type QueryUserPositionResponse struct {
	UserPosition UserPosition `protobuf:"bytes,1,opt,name=user_position,json=userPosition,proto3" json:"user_position"`
}

func (m *QueryUserPositionResponse) Reset()         { *m = QueryUserPositionResponse{} }
func (m *QueryUserPositionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserPositionResponse) ProtoMessage()    {}
func (*QueryUserPositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3fb259eb5fae3ea4, []int{5}
}
func (m *QueryUserPositionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserPositionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserPositionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserPositionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserPositionResponse.Merge(m, src)
}
func (m *QueryUserPositionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserPositionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserPositionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserPositionResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QuerySales)(nil), "osmosis.streamswap.v1.QuerySales")
	proto.RegisterType((*QuerySalesResponse)(nil), "osmosis.streamswap.v1.QuerySalesResponse")
	proto.RegisterType((*QuerySale)(nil), "osmosis.streamswap.v1.QuerySale")
	proto.RegisterType((*QuerySaleResponse)(nil), "osmosis.streamswap.v1.QuerySaleResponse")
	proto.RegisterType((*QueryUserPosition)(nil), "osmosis.streamswap.v1.QueryUserPosition")
	proto.RegisterType((*QueryUserPositionResponse)(nil), "osmosis.streamswap.v1.QueryUserPositionResponse")
}

func init() { proto.RegisterFile("osmosis/streamswap/v1/query.proto", fileDescriptor_3fb259eb5fae3ea4) }

var fileDescriptor_3fb259eb5fae3ea4 = []byte{
	// 528 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x9b, 0x2d, 0x1d, 0x9a, 0x37, 0x0e, 0x58, 0x20, 0x46, 0x06, 0xa1, 0xcb, 0x80, 0x15,
	0xc4, 0x6c, 0x52, 0xfe, 0x5d, 0xd1, 0x0e, 0x20, 0x38, 0xa0, 0x11, 0xc6, 0x85, 0xcb, 0xe4, 0x6c,
	0x56, 0x88, 0x68, 0xe3, 0x2c, 0xaf, 0x53, 0x18, 0xd3, 0x0e, 0xf0, 0x09, 0x90, 0x90, 0x38, 0x73,
	0xe6, 0x93, 0xf4, 0x38, 0x89, 0x0b, 0x27, 0x04, 0x2d, 0x1f, 0x04, 0xd9, 0xf1, 0xd2, 0x14, 0xe8,
	0xda, 0x5b, 0x12, 0xff, 0xf2, 0x3c, 0x3f, 0xe7, 0xb5, 0x82, 0x56, 0x04, 0x74, 0x04, 0xc4, 0x40,
	0x41, 0x66, 0x9c, 0x75, 0xe0, 0x0d, 0x4b, 0x69, 0xd7, 0xa7, 0x7b, 0x39, 0xcf, 0xf6, 0x49, 0x9a,
	0x09, 0x29, 0xf0, 0x39, 0x83, 0x90, 0x21, 0x42, 0xba, 0xbe, 0x73, 0x36, 0x12, 0x91, 0xd0, 0x04,
	0x55, 0x57, 0x05, 0xec, 0x5c, 0x8c, 0x84, 0x88, 0xda, 0x9c, 0xb2, 0x34, 0xa6, 0x2c, 0x49, 0x84,
	0x64, 0x32, 0x16, 0x09, 0x98, 0xd5, 0x1b, 0x3b, 0x3a, 0x8b, 0x86, 0x0c, 0x78, 0xd1, 0x41, 0xbb,
	0x7e, 0xc8, 0x25, 0xf3, 0x69, 0xca, 0xa2, 0x38, 0xd1, 0xb0, 0x61, 0xc7, 0x98, 0x81, 0x64, 0x92,
	0x17, 0x88, 0xb7, 0x85, 0xd0, 0x33, 0x15, 0xf2, 0x9c, 0xb5, 0x39, 0xe0, 0x87, 0x08, 0x0d, 0x43,
	0x96, 0xac, 0x86, 0xd5, 0x5c, 0x68, 0x5d, 0x23, 0x45, 0x23, 0x51, 0x8d, 0xa4, 0xd8, 0x95, 0x69,
	0x24, 0x9b, 0x2c, 0xe2, 0x01, 0xdf, 0xcb, 0x39, 0xc8, 0xa0, 0xf2, 0xa6, 0xf7, 0xd9, 0x42, 0x78,
	0x18, 0x1b, 0x70, 0x48, 0x45, 0x02, 0x1c, 0xdf, 0x47, 0x75, 0x50, 0x0f, 0x96, 0xac, 0xc6, 0x6c,
	0x73, 0xa1, 0xb5, 0x4c, 0xfe, 0xfb, 0x59, 0x88, 0x7a, 0x69, 0xc3, 0xee, 0xfd, 0xb8, 0x5c, 0x0b,
	0x0a, 0x1e, 0x3f, 0x1a, 0xf1, 0x9a, 0xd1, 0x5e, 0x6b, 0x13, 0xbd, 0x8a, 0xd6, 0x11, 0xb1, 0x2b,
	0x68, 0xbe, 0xf4, 0xc2, 0xe7, 0xd1, 0x29, 0x15, 0xbf, 0x1d, 0xef, 0xea, 0xad, 0xda, 0xc1, 0x9c,
	0xba, 0x7d, 0xbc, 0xeb, 0x3d, 0x41, 0x67, 0x4a, 0xaa, 0x94, 0xbf, 0x8b, 0x6c, 0xb5, 0x6c, 0xbe,
	0xca, 0x14, 0xee, 0x1a, 0xf7, 0x1e, 0x98, 0xac, 0x17, 0xc0, 0xb3, 0x4d, 0x01, 0xb1, 0xd2, 0x18,
	0xdb, 0x8c, 0x31, 0xb2, 0x73, 0xe0, 0x99, 0xde, 0xe2, 0x7c, 0xa0, 0xaf, 0xbd, 0xd7, 0xe8, 0xc2,
	0x3f, 0x09, 0xa5, 0xd5, 0x53, 0x74, 0x5a, 0x41, 0xdb, 0xa9, 0x59, 0x30, 0x7a, 0xab, 0x63, 0xf4,
	0xaa, 0x19, 0x46, 0x73, 0x31, 0xaf, 0x3c, 0x6b, 0x7d, 0x9d, 0x45, 0x75, 0xdd, 0x86, 0xdf, 0xa1,
	0x7a, 0x71, 0x28, 0x56, 0xc6, 0x64, 0x0d, 0x07, 0xec, 0x5c, 0x9f, 0x88, 0x1c, 0x0b, 0x7b, 0xab,
	0x1f, 0xbe, 0xfd, 0xfe, 0x34, 0x73, 0x09, 0x2f, 0x53, 0x73, 0x90, 0xff, 0x3a, 0x9b, 0xba, 0xf2,
	0xbd, 0x85, 0x6c, 0x3d, 0xa2, 0xc6, 0xa4, 0x60, 0xa7, 0x39, 0x89, 0x28, 0x9b, 0xd7, 0x75, 0xf3,
	0x1a, 0xbe, 0x7a, 0x42, 0x33, 0x3d, 0x30, 0x73, 0x39, 0xc4, 0x5f, 0x2c, 0xb4, 0x38, 0x32, 0xb4,
	0x13, 0x9b, 0xaa, 0xa4, 0x73, 0x6b, 0x5a, 0xb2, 0x74, 0xbb, 0xa3, 0xdd, 0x08, 0xbe, 0x39, 0x95,
	0x1b, 0x3d, 0x50, 0x33, 0x3b, 0xdc, 0xd8, 0xea, 0xfd, 0x72, 0x6b, 0xbd, 0xbe, 0x6b, 0x1d, 0xf5,
	0x5d, 0xeb, 0x67, 0xdf, 0xb5, 0x3e, 0x0e, 0xdc, 0xda, 0xd1, 0xc0, 0xad, 0x7d, 0x1f, 0xb8, 0xb5,
	0x97, 0xf7, 0xa2, 0x58, 0xbe, 0xca, 0x43, 0xb2, 0x23, 0x3a, 0xd4, 0xf8, 0xac, 0xb7, 0x59, 0x08,
	0xc7, 0x37, 0xb4, 0xeb, 0xb7, 0xe8, 0xdb, 0x6a, 0x93, 0xdc, 0x4f, 0x39, 0x84, 0x73, 0xfa, 0xcf,
	0x70, 0xfb, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x1d, 0xdc, 0xd4, 0x91, 0xd8, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Returns list of Sales ordered by the creation time
	Sales(ctx context.Context, in *QuerySales, opts ...grpc.CallOption) (*QuerySalesResponse, error)
	// Returns the specific Sale object
	Sale(ctx context.Context, in *QuerySale, opts ...grpc.CallOption) (*QuerySaleResponse, error)
	UserPosition(ctx context.Context, in *QueryUserPosition, opts ...grpc.CallOption) (*QueryUserPositionResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Sales(ctx context.Context, in *QuerySales, opts ...grpc.CallOption) (*QuerySalesResponse, error) {
	out := new(QuerySalesResponse)
	err := c.cc.Invoke(ctx, "/osmosis.streamswap.v1.Query/Sales", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Sale(ctx context.Context, in *QuerySale, opts ...grpc.CallOption) (*QuerySaleResponse, error) {
	out := new(QuerySaleResponse)
	err := c.cc.Invoke(ctx, "/osmosis.streamswap.v1.Query/Sale", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserPosition(ctx context.Context, in *QueryUserPosition, opts ...grpc.CallOption) (*QueryUserPositionResponse, error) {
	out := new(QueryUserPositionResponse)
	err := c.cc.Invoke(ctx, "/osmosis.streamswap.v1.Query/UserPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Returns list of Sales ordered by the creation time
	Sales(context.Context, *QuerySales) (*QuerySalesResponse, error)
	// Returns the specific Sale object
	Sale(context.Context, *QuerySale) (*QuerySaleResponse, error)
	UserPosition(context.Context, *QueryUserPosition) (*QueryUserPositionResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Sales(ctx context.Context, req *QuerySales) (*QuerySalesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sales not implemented")
}
func (*UnimplementedQueryServer) Sale(ctx context.Context, req *QuerySale) (*QuerySaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sale not implemented")
}
func (*UnimplementedQueryServer) UserPosition(ctx context.Context, req *QueryUserPosition) (*QueryUserPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPosition not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Sales_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySales)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Sales(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.streamswap.v1.Query/Sales",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Sales(ctx, req.(*QuerySales))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Sale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySale)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Sale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.streamswap.v1.Query/Sale",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Sale(ctx, req.(*QuerySale))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserPosition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.streamswap.v1.Query/UserPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserPosition(ctx, req.(*QueryUserPosition))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "osmosis.streamswap.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Sales",
			Handler:    _Query_Sales_Handler,
		},
		{
			MethodName: "Sale",
			Handler:    _Query_Sale_Handler,
		},
		{
			MethodName: "UserPosition",
			Handler:    _Query_UserPosition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "osmosis/streamswap/v1/query.proto",
}

func (m *QuerySales) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySales) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySales) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySalesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySalesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySalesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sales) > 0 {
		for iNdEx := len(m.Sales) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sales[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySale) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySale) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySale) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SaleId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SaleId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QuerySaleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySaleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySaleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Sale.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryUserPosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserPosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserPosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0x12
	}
	if m.SaleId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SaleId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserPositionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserPositionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserPositionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UserPosition.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QuerySales) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySalesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Sales) > 0 {
		for _, e := range m.Sales {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySale) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SaleId != 0 {
		n += 1 + sovQuery(uint64(m.SaleId))
	}
	return n
}

func (m *QuerySaleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Sale.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryUserPosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SaleId != 0 {
		n += 1 + sovQuery(uint64(m.SaleId))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserPositionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.UserPosition.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QuerySales) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySales: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySales: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySalesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySalesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySalesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sales", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sales = append(m.Sales, Sale{})
			if err := m.Sales[len(m.Sales)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySale) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySale: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySale: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaleId", wireType)
			}
			m.SaleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SaleId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySaleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySaleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySaleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sale", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Sale.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserPosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserPosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserPosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SaleId", wireType)
			}
			m.SaleId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SaleId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserPositionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserPositionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserPositionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPosition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserPosition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
