// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/superfluid/query.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	types2 "github.com/cosmos/cosmos-sdk/x/staking/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types1 "github.com/osmosis-labs/osmosis/v21/x/lockup/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/durationpb"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d9448e4ed3943f, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	// params defines the parameters of the module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d9448e4ed3943f, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type AssetTypeRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *AssetTypeRequest) Reset()         { *m = AssetTypeRequest{} }
func (m *AssetTypeRequest) String() string { return proto.CompactTextString(m) }
func (*AssetTypeRequest) ProtoMessage()    {}
func (*AssetTypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d9448e4ed3943f, []int{2}
}
func (m *AssetTypeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetTypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetTypeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetTypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetTypeRequest.Merge(m, src)
}
func (m *AssetTypeRequest) XXX_Size() int {
	return m.Size()
}
func (m *AssetTypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetTypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AssetTypeRequest proto.InternalMessageInfo

func (m *AssetTypeRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type AssetTypeResponse struct {
	AssetType SuperfluidAssetType `protobuf:"varint,1,opt,name=asset_type,json=assetType,proto3,enum=osmosis.superfluid.SuperfluidAssetType" json:"asset_type,omitempty"`
}

func (m *AssetTypeResponse) Reset()         { *m = AssetTypeResponse{} }
func (m *AssetTypeResponse) String() string { return proto.CompactTextString(m) }
func (*AssetTypeResponse) ProtoMessage()    {}
func (*AssetTypeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d9448e4ed3943f, []int{3}
}
func (m *AssetTypeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetTypeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetTypeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetTypeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetTypeResponse.Merge(m, src)
}
func (m *AssetTypeResponse) XXX_Size() int {
	return m.Size()
}
func (m *AssetTypeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetTypeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AssetTypeResponse proto.InternalMessageInfo

func (m *AssetTypeResponse) GetAssetType() SuperfluidAssetType {
	if m != nil {
		return m.AssetType
	}
	return SuperfluidAssetTypeNative
}

type AllAssetsRequest struct {
}

func (m *AllAssetsRequest) Reset()         { *m = AllAssetsRequest{} }
func (m *AllAssetsRequest) String() string { return proto.CompactTextString(m) }
func (*AllAssetsRequest) ProtoMessage()    {}
func (*AllAssetsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d9448e4ed3943f, []int{4}
}
func (m *AllAssetsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllAssetsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllAssetsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllAssetsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllAssetsRequest.Merge(m, src)
}
func (m *AllAssetsRequest) XXX_Size() int {
	return m.Size()
}
func (m *AllAssetsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AllAssetsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AllAssetsRequest proto.InternalMessageInfo

type AllAssetsResponse struct {
	Assets []SuperfluidAsset `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets"`
}

func (m *AllAssetsResponse) Reset()         { *m = AllAssetsResponse{} }
func (m *AllAssetsResponse) String() string { return proto.CompactTextString(m) }
func (*AllAssetsResponse) ProtoMessage()    {}
func (*AllAssetsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d9448e4ed3943f, []int{5}
}
func (m *AllAssetsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllAssetsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllAssetsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllAssetsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllAssetsResponse.Merge(m, src)
}
func (m *AllAssetsResponse) XXX_Size() int {
	return m.Size()
}
func (m *AllAssetsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AllAssetsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AllAssetsResponse proto.InternalMessageInfo

func (m *AllAssetsResponse) GetAssets() []SuperfluidAsset {
	if m != nil {
		return m.Assets
	}
	return nil
}

type AssetMultiplierRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *AssetMultiplierRequest) Reset()         { *m = AssetMultiplierRequest{} }
func (m *AssetMultiplierRequest) String() string { return proto.CompactTextString(m) }
func (*AssetMultiplierRequest) ProtoMessage()    {}
func (*AssetMultiplierRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d9448e4ed3943f, []int{6}
}
func (m *AssetMultiplierRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetMultiplierRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetMultiplierRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetMultiplierRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetMultiplierRequest.Merge(m, src)
}
func (m *AssetMultiplierRequest) XXX_Size() int {
	return m.Size()
}
func (m *AssetMultiplierRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetMultiplierRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AssetMultiplierRequest proto.InternalMessageInfo

func (m *AssetMultiplierRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type AssetMultiplierResponse struct {
	OsmoEquivalentMultiplier *OsmoEquivalentMultiplierRecord `protobuf:"bytes,1,opt,name=osmo_equivalent_multiplier,json=osmoEquivalentMultiplier,proto3" json:"osmo_equivalent_multiplier,omitempty"`
}

func (m *AssetMultiplierResponse) Reset()         { *m = AssetMultiplierResponse{} }
func (m *AssetMultiplierResponse) String() string { return proto.CompactTextString(m) }
func (*AssetMultiplierResponse) ProtoMessage()    {}
func (*AssetMultiplierResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d9448e4ed3943f, []int{7}
}
func (m *AssetMultiplierResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetMultiplierResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetMultiplierResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetMultiplierResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetMultiplierResponse.Merge(m, src)
}
func (m *AssetMultiplierResponse) XXX_Size() int {
	return m.Size()
}
func (m *AssetMultiplierResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetMultiplierResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AssetMultiplierResponse proto.InternalMessageInfo

func (m *AssetMultiplierResponse) GetOsmoEquivalentMultiplier() *OsmoEquivalentMultiplierRecord {
	if m != nil {
		return m.OsmoEquivalentMultiplier
	}
	return nil
}

type SuperfluidIntermediaryAccountInfo struct {
	Denom   string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	ValAddr string `protobuf:"bytes,2,opt,name=val_addr,json=valAddr,proto3" json:"val_addr,omitempty"`
	GaugeId uint64 `protobuf:"varint,3,opt,name=gauge_id,json=gaugeId,proto3" json:"gauge_id,omitempty"`
	Address string `protobuf:"bytes,4,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *SuperfluidIntermediaryAccountInfo) Reset()         { *m = SuperfluidIntermediaryAccountInfo{} }
func (m *SuperfluidIntermediaryAccountInfo) String() string { return proto.CompactTextString(m) }
func (*SuperfluidIntermediaryAccountInfo) ProtoMessage()    {}
func (*SuperfluidIntermediaryAccountInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d9448e4ed3943f, []int{8}
}
func (m *SuperfluidIntermediaryAccountInfo) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuperfluidIntermediaryAccountInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuperfluidIntermediaryAccountInfo.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuperfluidIntermediaryAccountInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuperfluidIntermediaryAccountInfo.Merge(m, src)
}
func (m *SuperfluidIntermediaryAccountInfo) XXX_Size() int {
	return m.Size()
}
func (m *SuperfluidIntermediaryAccountInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_SuperfluidIntermediaryAccountInfo.DiscardUnknown(m)
}

var xxx_messageInfo_SuperfluidIntermediaryAccountInfo proto.InternalMessageInfo

func (m *SuperfluidIntermediaryAccountInfo) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *SuperfluidIntermediaryAccountInfo) GetValAddr() string {
	if m != nil {
		return m.ValAddr
	}
	return ""
}

func (m *SuperfluidIntermediaryAccountInfo) GetGaugeId() uint64 {
	if m != nil {
		return m.GaugeId
	}
	return 0
}

func (m *SuperfluidIntermediaryAccountInfo) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type AllIntermediaryAccountsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *AllIntermediaryAccountsRequest) Reset()         { *m = AllIntermediaryAccountsRequest{} }
func (m *AllIntermediaryAccountsRequest) String() string { return proto.CompactTextString(m) }
func (*AllIntermediaryAccountsRequest) ProtoMessage()    {}
func (*AllIntermediaryAccountsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d9448e4ed3943f, []int{9}
}
func (m *AllIntermediaryAccountsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllIntermediaryAccountsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllIntermediaryAccountsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllIntermediaryAccountsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllIntermediaryAccountsRequest.Merge(m, src)
}
func (m *AllIntermediaryAccountsRequest) XXX_Size() int {
	return m.Size()
}
func (m *AllIntermediaryAccountsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AllIntermediaryAccountsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AllIntermediaryAccountsRequest proto.InternalMessageInfo

func (m *AllIntermediaryAccountsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type AllIntermediaryAccountsResponse struct {
	Accounts   []SuperfluidIntermediaryAccountInfo `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts"`
	Pagination *query.PageResponse                 `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *AllIntermediaryAccountsResponse) Reset()         { *m = AllIntermediaryAccountsResponse{} }
func (m *AllIntermediaryAccountsResponse) String() string { return proto.CompactTextString(m) }
func (*AllIntermediaryAccountsResponse) ProtoMessage()    {}
func (*AllIntermediaryAccountsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d9448e4ed3943f, []int{10}
}
func (m *AllIntermediaryAccountsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllIntermediaryAccountsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllIntermediaryAccountsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllIntermediaryAccountsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllIntermediaryAccountsResponse.Merge(m, src)
}
func (m *AllIntermediaryAccountsResponse) XXX_Size() int {
	return m.Size()
}
func (m *AllIntermediaryAccountsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AllIntermediaryAccountsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AllIntermediaryAccountsResponse proto.InternalMessageInfo

func (m *AllIntermediaryAccountsResponse) GetAccounts() []SuperfluidIntermediaryAccountInfo {
	if m != nil {
		return m.Accounts
	}
	return nil
}

func (m *AllIntermediaryAccountsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type ConnectedIntermediaryAccountRequest struct {
	LockId uint64 `protobuf:"varint,1,opt,name=lock_id,json=lockId,proto3" json:"lock_id,omitempty"`
}

func (m *ConnectedIntermediaryAccountRequest) Reset()         { *m = ConnectedIntermediaryAccountRequest{} }
func (m *ConnectedIntermediaryAccountRequest) String() string { return proto.CompactTextString(m) }
func (*ConnectedIntermediaryAccountRequest) ProtoMessage()    {}
func (*ConnectedIntermediaryAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d9448e4ed3943f, []int{11}
}
func (m *ConnectedIntermediaryAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectedIntermediaryAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectedIntermediaryAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectedIntermediaryAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectedIntermediaryAccountRequest.Merge(m, src)
}
func (m *ConnectedIntermediaryAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *ConnectedIntermediaryAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectedIntermediaryAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectedIntermediaryAccountRequest proto.InternalMessageInfo

func (m *ConnectedIntermediaryAccountRequest) GetLockId() uint64 {
	if m != nil {
		return m.LockId
	}
	return 0
}

type ConnectedIntermediaryAccountResponse struct {
	Account *SuperfluidIntermediaryAccountInfo `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
}

func (m *ConnectedIntermediaryAccountResponse) Reset()         { *m = ConnectedIntermediaryAccountResponse{} }
func (m *ConnectedIntermediaryAccountResponse) String() string { return proto.CompactTextString(m) }
func (*ConnectedIntermediaryAccountResponse) ProtoMessage()    {}
func (*ConnectedIntermediaryAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d9448e4ed3943f, []int{12}
}
func (m *ConnectedIntermediaryAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConnectedIntermediaryAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConnectedIntermediaryAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConnectedIntermediaryAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectedIntermediaryAccountResponse.Merge(m, src)
}
func (m *ConnectedIntermediaryAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *ConnectedIntermediaryAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectedIntermediaryAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectedIntermediaryAccountResponse proto.InternalMessageInfo

func (m *ConnectedIntermediaryAccountResponse) GetAccount() *SuperfluidIntermediaryAccountInfo {
	if m != nil {
		return m.Account
	}
	return nil
}

type QueryTotalDelegationByValidatorForDenomRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryTotalDelegationByValidatorForDenomRequest) Reset() {
	*m = QueryTotalDelegationByValidatorForDenomRequest{}
}
func (m *QueryTotalDelegationByValidatorForDenomRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryTotalDelegationByValidatorForDenomRequest) ProtoMessage() {}
func (*QueryTotalDelegationByValidatorForDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d9448e4ed3943f, []int{13}
}
func (m *QueryTotalDelegationByValidatorForDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalDelegationByValidatorForDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalDelegationByValidatorForDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalDelegationByValidatorForDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalDelegationByValidatorForDenomRequest.Merge(m, src)
}
func (m *QueryTotalDelegationByValidatorForDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalDelegationByValidatorForDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalDelegationByValidatorForDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalDelegationByValidatorForDenomRequest proto.InternalMessageInfo

func (m *QueryTotalDelegationByValidatorForDenomRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryTotalDelegationByValidatorForDenomResponse struct {
	Assets []Delegations `protobuf:"bytes,1,rep,name=assets,proto3" json:"assets"`
}

func (m *QueryTotalDelegationByValidatorForDenomResponse) Reset() {
	*m = QueryTotalDelegationByValidatorForDenomResponse{}
}
func (m *QueryTotalDelegationByValidatorForDenomResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryTotalDelegationByValidatorForDenomResponse) ProtoMessage() {}
func (*QueryTotalDelegationByValidatorForDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d9448e4ed3943f, []int{14}
}
func (m *QueryTotalDelegationByValidatorForDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalDelegationByValidatorForDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalDelegationByValidatorForDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalDelegationByValidatorForDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalDelegationByValidatorForDenomResponse.Merge(m, src)
}
func (m *QueryTotalDelegationByValidatorForDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalDelegationByValidatorForDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalDelegationByValidatorForDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalDelegationByValidatorForDenomResponse proto.InternalMessageInfo

func (m *QueryTotalDelegationByValidatorForDenomResponse) GetAssets() []Delegations {
	if m != nil {
		return m.Assets
	}
	return nil
}

type Delegations struct {
	ValAddr        string                `protobuf:"bytes,1,opt,name=val_addr,json=valAddr,proto3" json:"val_addr,omitempty"`
	AmountSfsd     cosmossdk_io_math.Int `protobuf:"bytes,2,opt,name=amount_sfsd,json=amountSfsd,proto3,customtype=cosmossdk.io/math.Int" json:"amount_sfsd" yaml:"amount_sfsd"`
	OsmoEquivalent cosmossdk_io_math.Int `protobuf:"bytes,3,opt,name=osmo_equivalent,json=osmoEquivalent,proto3,customtype=cosmossdk.io/math.Int" json:"osmo_equivalent" yaml:"osmo_equivalent"`
}

func (m *Delegations) Reset()         { *m = Delegations{} }
func (m *Delegations) String() string { return proto.CompactTextString(m) }
func (*Delegations) ProtoMessage()    {}
func (*Delegations) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d9448e4ed3943f, []int{15}
}
func (m *Delegations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Delegations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Delegations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Delegations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Delegations.Merge(m, src)
}
func (m *Delegations) XXX_Size() int {
	return m.Size()
}
func (m *Delegations) XXX_DiscardUnknown() {
	xxx_messageInfo_Delegations.DiscardUnknown(m)
}

var xxx_messageInfo_Delegations proto.InternalMessageInfo

func (m *Delegations) GetValAddr() string {
	if m != nil {
		return m.ValAddr
	}
	return ""
}

type TotalSuperfluidDelegationsRequest struct {
}

func (m *TotalSuperfluidDelegationsRequest) Reset()         { *m = TotalSuperfluidDelegationsRequest{} }
func (m *TotalSuperfluidDelegationsRequest) String() string { return proto.CompactTextString(m) }
func (*TotalSuperfluidDelegationsRequest) ProtoMessage()    {}
func (*TotalSuperfluidDelegationsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d9448e4ed3943f, []int{16}
}
func (m *TotalSuperfluidDelegationsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TotalSuperfluidDelegationsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TotalSuperfluidDelegationsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TotalSuperfluidDelegationsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TotalSuperfluidDelegationsRequest.Merge(m, src)
}
func (m *TotalSuperfluidDelegationsRequest) XXX_Size() int {
	return m.Size()
}
func (m *TotalSuperfluidDelegationsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TotalSuperfluidDelegationsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TotalSuperfluidDelegationsRequest proto.InternalMessageInfo

type TotalSuperfluidDelegationsResponse struct {
	TotalDelegations cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=total_delegations,json=totalDelegations,proto3,customtype=cosmossdk.io/math.Int" json:"total_delegations" yaml:"total_superfluid_delegations"`
}

func (m *TotalSuperfluidDelegationsResponse) Reset()         { *m = TotalSuperfluidDelegationsResponse{} }
func (m *TotalSuperfluidDelegationsResponse) String() string { return proto.CompactTextString(m) }
func (*TotalSuperfluidDelegationsResponse) ProtoMessage()    {}
func (*TotalSuperfluidDelegationsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d9448e4ed3943f, []int{17}
}
func (m *TotalSuperfluidDelegationsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TotalSuperfluidDelegationsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TotalSuperfluidDelegationsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TotalSuperfluidDelegationsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TotalSuperfluidDelegationsResponse.Merge(m, src)
}
func (m *TotalSuperfluidDelegationsResponse) XXX_Size() int {
	return m.Size()
}
func (m *TotalSuperfluidDelegationsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TotalSuperfluidDelegationsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TotalSuperfluidDelegationsResponse proto.InternalMessageInfo

type SuperfluidDelegationAmountRequest struct {
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	ValidatorAddress string `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	Denom            string `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *SuperfluidDelegationAmountRequest) Reset()         { *m = SuperfluidDelegationAmountRequest{} }
func (m *SuperfluidDelegationAmountRequest) String() string { return proto.CompactTextString(m) }
func (*SuperfluidDelegationAmountRequest) ProtoMessage()    {}
func (*SuperfluidDelegationAmountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d9448e4ed3943f, []int{18}
}
func (m *SuperfluidDelegationAmountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuperfluidDelegationAmountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuperfluidDelegationAmountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuperfluidDelegationAmountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuperfluidDelegationAmountRequest.Merge(m, src)
}
func (m *SuperfluidDelegationAmountRequest) XXX_Size() int {
	return m.Size()
}
func (m *SuperfluidDelegationAmountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SuperfluidDelegationAmountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SuperfluidDelegationAmountRequest proto.InternalMessageInfo

func (m *SuperfluidDelegationAmountRequest) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *SuperfluidDelegationAmountRequest) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *SuperfluidDelegationAmountRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type SuperfluidDelegationAmountResponse struct {
	Amount github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=amount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"amount"`
}

func (m *SuperfluidDelegationAmountResponse) Reset()         { *m = SuperfluidDelegationAmountResponse{} }
func (m *SuperfluidDelegationAmountResponse) String() string { return proto.CompactTextString(m) }
func (*SuperfluidDelegationAmountResponse) ProtoMessage()    {}
func (*SuperfluidDelegationAmountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d9448e4ed3943f, []int{19}
}
func (m *SuperfluidDelegationAmountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuperfluidDelegationAmountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuperfluidDelegationAmountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuperfluidDelegationAmountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuperfluidDelegationAmountResponse.Merge(m, src)
}
func (m *SuperfluidDelegationAmountResponse) XXX_Size() int {
	return m.Size()
}
func (m *SuperfluidDelegationAmountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SuperfluidDelegationAmountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SuperfluidDelegationAmountResponse proto.InternalMessageInfo

func (m *SuperfluidDelegationAmountResponse) GetAmount() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Amount
	}
	return nil
}

type SuperfluidDelegationsByDelegatorRequest struct {
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
}

func (m *SuperfluidDelegationsByDelegatorRequest) Reset() {
	*m = SuperfluidDelegationsByDelegatorRequest{}
}
func (m *SuperfluidDelegationsByDelegatorRequest) String() string { return proto.CompactTextString(m) }
func (*SuperfluidDelegationsByDelegatorRequest) ProtoMessage()    {}
func (*SuperfluidDelegationsByDelegatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d9448e4ed3943f, []int{20}
}
func (m *SuperfluidDelegationsByDelegatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuperfluidDelegationsByDelegatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuperfluidDelegationsByDelegatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuperfluidDelegationsByDelegatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuperfluidDelegationsByDelegatorRequest.Merge(m, src)
}
func (m *SuperfluidDelegationsByDelegatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *SuperfluidDelegationsByDelegatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SuperfluidDelegationsByDelegatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SuperfluidDelegationsByDelegatorRequest proto.InternalMessageInfo

func (m *SuperfluidDelegationsByDelegatorRequest) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

type SuperfluidDelegationsByDelegatorResponse struct {
	SuperfluidDelegationRecords []SuperfluidDelegationRecord             `protobuf:"bytes,1,rep,name=superfluid_delegation_records,json=superfluidDelegationRecords,proto3" json:"superfluid_delegation_records"`
	TotalDelegatedCoins         github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=total_delegated_coins,json=totalDelegatedCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"total_delegated_coins"`
	TotalEquivalentStakedAmount types.Coin                               `protobuf:"bytes,3,opt,name=total_equivalent_staked_amount,json=totalEquivalentStakedAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"total_equivalent_staked_amount"`
}

func (m *SuperfluidDelegationsByDelegatorResponse) Reset() {
	*m = SuperfluidDelegationsByDelegatorResponse{}
}
func (m *SuperfluidDelegationsByDelegatorResponse) String() string { return proto.CompactTextString(m) }
func (*SuperfluidDelegationsByDelegatorResponse) ProtoMessage()    {}
func (*SuperfluidDelegationsByDelegatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d9448e4ed3943f, []int{21}
}
func (m *SuperfluidDelegationsByDelegatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuperfluidDelegationsByDelegatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuperfluidDelegationsByDelegatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuperfluidDelegationsByDelegatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuperfluidDelegationsByDelegatorResponse.Merge(m, src)
}
func (m *SuperfluidDelegationsByDelegatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *SuperfluidDelegationsByDelegatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SuperfluidDelegationsByDelegatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SuperfluidDelegationsByDelegatorResponse proto.InternalMessageInfo

func (m *SuperfluidDelegationsByDelegatorResponse) GetSuperfluidDelegationRecords() []SuperfluidDelegationRecord {
	if m != nil {
		return m.SuperfluidDelegationRecords
	}
	return nil
}

func (m *SuperfluidDelegationsByDelegatorResponse) GetTotalDelegatedCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.TotalDelegatedCoins
	}
	return nil
}

func (m *SuperfluidDelegationsByDelegatorResponse) GetTotalEquivalentStakedAmount() types.Coin {
	if m != nil {
		return m.TotalEquivalentStakedAmount
	}
	return types.Coin{}
}

type SuperfluidUndelegationsByDelegatorRequest struct {
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	Denom            string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *SuperfluidUndelegationsByDelegatorRequest) Reset() {
	*m = SuperfluidUndelegationsByDelegatorRequest{}
}
func (m *SuperfluidUndelegationsByDelegatorRequest) String() string {
	return proto.CompactTextString(m)
}
func (*SuperfluidUndelegationsByDelegatorRequest) ProtoMessage() {}
func (*SuperfluidUndelegationsByDelegatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d9448e4ed3943f, []int{22}
}
func (m *SuperfluidUndelegationsByDelegatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuperfluidUndelegationsByDelegatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuperfluidUndelegationsByDelegatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuperfluidUndelegationsByDelegatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuperfluidUndelegationsByDelegatorRequest.Merge(m, src)
}
func (m *SuperfluidUndelegationsByDelegatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *SuperfluidUndelegationsByDelegatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SuperfluidUndelegationsByDelegatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SuperfluidUndelegationsByDelegatorRequest proto.InternalMessageInfo

func (m *SuperfluidUndelegationsByDelegatorRequest) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *SuperfluidUndelegationsByDelegatorRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type SuperfluidUndelegationsByDelegatorResponse struct {
	SuperfluidDelegationRecords []SuperfluidDelegationRecord             `protobuf:"bytes,1,rep,name=superfluid_delegation_records,json=superfluidDelegationRecords,proto3" json:"superfluid_delegation_records"`
	TotalUndelegatedCoins       github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=total_undelegated_coins,json=totalUndelegatedCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"total_undelegated_coins"`
	SyntheticLocks              []types1.SyntheticLock                   `protobuf:"bytes,3,rep,name=synthetic_locks,json=syntheticLocks,proto3" json:"synthetic_locks"`
}

func (m *SuperfluidUndelegationsByDelegatorResponse) Reset() {
	*m = SuperfluidUndelegationsByDelegatorResponse{}
}
func (m *SuperfluidUndelegationsByDelegatorResponse) String() string {
	return proto.CompactTextString(m)
}
func (*SuperfluidUndelegationsByDelegatorResponse) ProtoMessage() {}
func (*SuperfluidUndelegationsByDelegatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d9448e4ed3943f, []int{23}
}
func (m *SuperfluidUndelegationsByDelegatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuperfluidUndelegationsByDelegatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuperfluidUndelegationsByDelegatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuperfluidUndelegationsByDelegatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuperfluidUndelegationsByDelegatorResponse.Merge(m, src)
}
func (m *SuperfluidUndelegationsByDelegatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *SuperfluidUndelegationsByDelegatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SuperfluidUndelegationsByDelegatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SuperfluidUndelegationsByDelegatorResponse proto.InternalMessageInfo

func (m *SuperfluidUndelegationsByDelegatorResponse) GetSuperfluidDelegationRecords() []SuperfluidDelegationRecord {
	if m != nil {
		return m.SuperfluidDelegationRecords
	}
	return nil
}

func (m *SuperfluidUndelegationsByDelegatorResponse) GetTotalUndelegatedCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.TotalUndelegatedCoins
	}
	return nil
}

func (m *SuperfluidUndelegationsByDelegatorResponse) GetSyntheticLocks() []types1.SyntheticLock {
	if m != nil {
		return m.SyntheticLocks
	}
	return nil
}

type SuperfluidDelegationsByValidatorDenomRequest struct {
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	Denom            string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *SuperfluidDelegationsByValidatorDenomRequest) Reset() {
	*m = SuperfluidDelegationsByValidatorDenomRequest{}
}
func (m *SuperfluidDelegationsByValidatorDenomRequest) String() string {
	return proto.CompactTextString(m)
}
func (*SuperfluidDelegationsByValidatorDenomRequest) ProtoMessage() {}
func (*SuperfluidDelegationsByValidatorDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d9448e4ed3943f, []int{24}
}
func (m *SuperfluidDelegationsByValidatorDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuperfluidDelegationsByValidatorDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuperfluidDelegationsByValidatorDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuperfluidDelegationsByValidatorDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuperfluidDelegationsByValidatorDenomRequest.Merge(m, src)
}
func (m *SuperfluidDelegationsByValidatorDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *SuperfluidDelegationsByValidatorDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SuperfluidDelegationsByValidatorDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SuperfluidDelegationsByValidatorDenomRequest proto.InternalMessageInfo

func (m *SuperfluidDelegationsByValidatorDenomRequest) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *SuperfluidDelegationsByValidatorDenomRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type SuperfluidDelegationsByValidatorDenomResponse struct {
	SuperfluidDelegationRecords []SuperfluidDelegationRecord `protobuf:"bytes,1,rep,name=superfluid_delegation_records,json=superfluidDelegationRecords,proto3" json:"superfluid_delegation_records"`
}

func (m *SuperfluidDelegationsByValidatorDenomResponse) Reset() {
	*m = SuperfluidDelegationsByValidatorDenomResponse{}
}
func (m *SuperfluidDelegationsByValidatorDenomResponse) String() string {
	return proto.CompactTextString(m)
}
func (*SuperfluidDelegationsByValidatorDenomResponse) ProtoMessage() {}
func (*SuperfluidDelegationsByValidatorDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d9448e4ed3943f, []int{25}
}
func (m *SuperfluidDelegationsByValidatorDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuperfluidDelegationsByValidatorDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuperfluidDelegationsByValidatorDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuperfluidDelegationsByValidatorDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuperfluidDelegationsByValidatorDenomResponse.Merge(m, src)
}
func (m *SuperfluidDelegationsByValidatorDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *SuperfluidDelegationsByValidatorDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SuperfluidDelegationsByValidatorDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SuperfluidDelegationsByValidatorDenomResponse proto.InternalMessageInfo

func (m *SuperfluidDelegationsByValidatorDenomResponse) GetSuperfluidDelegationRecords() []SuperfluidDelegationRecord {
	if m != nil {
		return m.SuperfluidDelegationRecords
	}
	return nil
}

type EstimateSuperfluidDelegatedAmountByValidatorDenomRequest struct {
	ValidatorAddress string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	Denom            string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *EstimateSuperfluidDelegatedAmountByValidatorDenomRequest) Reset() {
	*m = EstimateSuperfluidDelegatedAmountByValidatorDenomRequest{}
}
func (m *EstimateSuperfluidDelegatedAmountByValidatorDenomRequest) String() string {
	return proto.CompactTextString(m)
}
func (*EstimateSuperfluidDelegatedAmountByValidatorDenomRequest) ProtoMessage() {}
func (*EstimateSuperfluidDelegatedAmountByValidatorDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d9448e4ed3943f, []int{26}
}
func (m *EstimateSuperfluidDelegatedAmountByValidatorDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstimateSuperfluidDelegatedAmountByValidatorDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstimateSuperfluidDelegatedAmountByValidatorDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest.Merge(m, src)
}
func (m *EstimateSuperfluidDelegatedAmountByValidatorDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *EstimateSuperfluidDelegatedAmountByValidatorDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateSuperfluidDelegatedAmountByValidatorDenomRequest proto.InternalMessageInfo

func (m *EstimateSuperfluidDelegatedAmountByValidatorDenomRequest) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *EstimateSuperfluidDelegatedAmountByValidatorDenomRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type EstimateSuperfluidDelegatedAmountByValidatorDenomResponse struct {
	TotalDelegatedCoins github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=total_delegated_coins,json=totalDelegatedCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"total_delegated_coins"`
}

func (m *EstimateSuperfluidDelegatedAmountByValidatorDenomResponse) Reset() {
	*m = EstimateSuperfluidDelegatedAmountByValidatorDenomResponse{}
}
func (m *EstimateSuperfluidDelegatedAmountByValidatorDenomResponse) String() string {
	return proto.CompactTextString(m)
}
func (*EstimateSuperfluidDelegatedAmountByValidatorDenomResponse) ProtoMessage() {}
func (*EstimateSuperfluidDelegatedAmountByValidatorDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d9448e4ed3943f, []int{27}
}
func (m *EstimateSuperfluidDelegatedAmountByValidatorDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstimateSuperfluidDelegatedAmountByValidatorDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstimateSuperfluidDelegatedAmountByValidatorDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstimateSuperfluidDelegatedAmountByValidatorDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateSuperfluidDelegatedAmountByValidatorDenomResponse.Merge(m, src)
}
func (m *EstimateSuperfluidDelegatedAmountByValidatorDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *EstimateSuperfluidDelegatedAmountByValidatorDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateSuperfluidDelegatedAmountByValidatorDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateSuperfluidDelegatedAmountByValidatorDenomResponse proto.InternalMessageInfo

func (m *EstimateSuperfluidDelegatedAmountByValidatorDenomResponse) GetTotalDelegatedCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.TotalDelegatedCoins
	}
	return nil
}

type QueryTotalDelegationByDelegatorRequest struct {
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
}

func (m *QueryTotalDelegationByDelegatorRequest) Reset() {
	*m = QueryTotalDelegationByDelegatorRequest{}
}
func (m *QueryTotalDelegationByDelegatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTotalDelegationByDelegatorRequest) ProtoMessage()    {}
func (*QueryTotalDelegationByDelegatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d9448e4ed3943f, []int{28}
}
func (m *QueryTotalDelegationByDelegatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalDelegationByDelegatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalDelegationByDelegatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalDelegationByDelegatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalDelegationByDelegatorRequest.Merge(m, src)
}
func (m *QueryTotalDelegationByDelegatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalDelegationByDelegatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalDelegationByDelegatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalDelegationByDelegatorRequest proto.InternalMessageInfo

func (m *QueryTotalDelegationByDelegatorRequest) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

type QueryTotalDelegationByDelegatorResponse struct {
	SuperfluidDelegationRecords []SuperfluidDelegationRecord             `protobuf:"bytes,1,rep,name=superfluid_delegation_records,json=superfluidDelegationRecords,proto3" json:"superfluid_delegation_records"`
	DelegationResponse          []types2.DelegationResponse              `protobuf:"bytes,2,rep,name=delegation_response,json=delegationResponse,proto3" json:"delegation_response"`
	TotalDelegatedCoins         github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,3,rep,name=total_delegated_coins,json=totalDelegatedCoins,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"total_delegated_coins"`
	TotalEquivalentStakedAmount types.Coin                               `protobuf:"bytes,4,opt,name=total_equivalent_staked_amount,json=totalEquivalentStakedAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"total_equivalent_staked_amount"`
}

func (m *QueryTotalDelegationByDelegatorResponse) Reset() {
	*m = QueryTotalDelegationByDelegatorResponse{}
}
func (m *QueryTotalDelegationByDelegatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTotalDelegationByDelegatorResponse) ProtoMessage()    {}
func (*QueryTotalDelegationByDelegatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d9448e4ed3943f, []int{29}
}
func (m *QueryTotalDelegationByDelegatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTotalDelegationByDelegatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTotalDelegationByDelegatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTotalDelegationByDelegatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTotalDelegationByDelegatorResponse.Merge(m, src)
}
func (m *QueryTotalDelegationByDelegatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTotalDelegationByDelegatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTotalDelegationByDelegatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTotalDelegationByDelegatorResponse proto.InternalMessageInfo

func (m *QueryTotalDelegationByDelegatorResponse) GetSuperfluidDelegationRecords() []SuperfluidDelegationRecord {
	if m != nil {
		return m.SuperfluidDelegationRecords
	}
	return nil
}

func (m *QueryTotalDelegationByDelegatorResponse) GetDelegationResponse() []types2.DelegationResponse {
	if m != nil {
		return m.DelegationResponse
	}
	return nil
}

func (m *QueryTotalDelegationByDelegatorResponse) GetTotalDelegatedCoins() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.TotalDelegatedCoins
	}
	return nil
}

func (m *QueryTotalDelegationByDelegatorResponse) GetTotalEquivalentStakedAmount() types.Coin {
	if m != nil {
		return m.TotalEquivalentStakedAmount
	}
	return types.Coin{}
}

type QueryUnpoolWhitelistRequest struct {
}

func (m *QueryUnpoolWhitelistRequest) Reset()         { *m = QueryUnpoolWhitelistRequest{} }
func (m *QueryUnpoolWhitelistRequest) String() string { return proto.CompactTextString(m) }
func (*QueryUnpoolWhitelistRequest) ProtoMessage()    {}
func (*QueryUnpoolWhitelistRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d9448e4ed3943f, []int{30}
}
func (m *QueryUnpoolWhitelistRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnpoolWhitelistRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnpoolWhitelistRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnpoolWhitelistRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnpoolWhitelistRequest.Merge(m, src)
}
func (m *QueryUnpoolWhitelistRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnpoolWhitelistRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnpoolWhitelistRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnpoolWhitelistRequest proto.InternalMessageInfo

type QueryUnpoolWhitelistResponse struct {
	PoolIds []uint64 `protobuf:"varint,1,rep,packed,name=pool_ids,json=poolIds,proto3" json:"pool_ids,omitempty"`
}

func (m *QueryUnpoolWhitelistResponse) Reset()         { *m = QueryUnpoolWhitelistResponse{} }
func (m *QueryUnpoolWhitelistResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUnpoolWhitelistResponse) ProtoMessage()    {}
func (*QueryUnpoolWhitelistResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d9448e4ed3943f, []int{31}
}
func (m *QueryUnpoolWhitelistResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUnpoolWhitelistResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUnpoolWhitelistResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUnpoolWhitelistResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUnpoolWhitelistResponse.Merge(m, src)
}
func (m *QueryUnpoolWhitelistResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUnpoolWhitelistResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUnpoolWhitelistResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUnpoolWhitelistResponse proto.InternalMessageInfo

func (m *QueryUnpoolWhitelistResponse) GetPoolIds() []uint64 {
	if m != nil {
		return m.PoolIds
	}
	return nil
}

type UserConcentratedSuperfluidPositionsDelegatedRequest struct {
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
}

func (m *UserConcentratedSuperfluidPositionsDelegatedRequest) Reset() {
	*m = UserConcentratedSuperfluidPositionsDelegatedRequest{}
}
func (m *UserConcentratedSuperfluidPositionsDelegatedRequest) String() string {
	return proto.CompactTextString(m)
}
func (*UserConcentratedSuperfluidPositionsDelegatedRequest) ProtoMessage() {}
func (*UserConcentratedSuperfluidPositionsDelegatedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d9448e4ed3943f, []int{32}
}
func (m *UserConcentratedSuperfluidPositionsDelegatedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserConcentratedSuperfluidPositionsDelegatedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserConcentratedSuperfluidPositionsDelegatedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserConcentratedSuperfluidPositionsDelegatedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserConcentratedSuperfluidPositionsDelegatedRequest.Merge(m, src)
}
func (m *UserConcentratedSuperfluidPositionsDelegatedRequest) XXX_Size() int {
	return m.Size()
}
func (m *UserConcentratedSuperfluidPositionsDelegatedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserConcentratedSuperfluidPositionsDelegatedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserConcentratedSuperfluidPositionsDelegatedRequest proto.InternalMessageInfo

func (m *UserConcentratedSuperfluidPositionsDelegatedRequest) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

type UserConcentratedSuperfluidPositionsDelegatedResponse struct {
	ClPoolUserPositionRecords []ConcentratedPoolUserPositionRecord `protobuf:"bytes,1,rep,name=cl_pool_user_position_records,json=clPoolUserPositionRecords,proto3" json:"cl_pool_user_position_records"`
}

func (m *UserConcentratedSuperfluidPositionsDelegatedResponse) Reset() {
	*m = UserConcentratedSuperfluidPositionsDelegatedResponse{}
}
func (m *UserConcentratedSuperfluidPositionsDelegatedResponse) String() string {
	return proto.CompactTextString(m)
}
func (*UserConcentratedSuperfluidPositionsDelegatedResponse) ProtoMessage() {}
func (*UserConcentratedSuperfluidPositionsDelegatedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d9448e4ed3943f, []int{33}
}
func (m *UserConcentratedSuperfluidPositionsDelegatedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserConcentratedSuperfluidPositionsDelegatedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserConcentratedSuperfluidPositionsDelegatedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserConcentratedSuperfluidPositionsDelegatedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserConcentratedSuperfluidPositionsDelegatedResponse.Merge(m, src)
}
func (m *UserConcentratedSuperfluidPositionsDelegatedResponse) XXX_Size() int {
	return m.Size()
}
func (m *UserConcentratedSuperfluidPositionsDelegatedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserConcentratedSuperfluidPositionsDelegatedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserConcentratedSuperfluidPositionsDelegatedResponse proto.InternalMessageInfo

func (m *UserConcentratedSuperfluidPositionsDelegatedResponse) GetClPoolUserPositionRecords() []ConcentratedPoolUserPositionRecord {
	if m != nil {
		return m.ClPoolUserPositionRecords
	}
	return nil
}

type UserConcentratedSuperfluidPositionsUndelegatingRequest struct {
	DelegatorAddress string `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
}

func (m *UserConcentratedSuperfluidPositionsUndelegatingRequest) Reset() {
	*m = UserConcentratedSuperfluidPositionsUndelegatingRequest{}
}
func (m *UserConcentratedSuperfluidPositionsUndelegatingRequest) String() string {
	return proto.CompactTextString(m)
}
func (*UserConcentratedSuperfluidPositionsUndelegatingRequest) ProtoMessage() {}
func (*UserConcentratedSuperfluidPositionsUndelegatingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d9448e4ed3943f, []int{34}
}
func (m *UserConcentratedSuperfluidPositionsUndelegatingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserConcentratedSuperfluidPositionsUndelegatingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserConcentratedSuperfluidPositionsUndelegatingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserConcentratedSuperfluidPositionsUndelegatingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserConcentratedSuperfluidPositionsUndelegatingRequest.Merge(m, src)
}
func (m *UserConcentratedSuperfluidPositionsUndelegatingRequest) XXX_Size() int {
	return m.Size()
}
func (m *UserConcentratedSuperfluidPositionsUndelegatingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserConcentratedSuperfluidPositionsUndelegatingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserConcentratedSuperfluidPositionsUndelegatingRequest proto.InternalMessageInfo

func (m *UserConcentratedSuperfluidPositionsUndelegatingRequest) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

type UserConcentratedSuperfluidPositionsUndelegatingResponse struct {
	ClPoolUserPositionRecords []ConcentratedPoolUserPositionRecord `protobuf:"bytes,1,rep,name=cl_pool_user_position_records,json=clPoolUserPositionRecords,proto3" json:"cl_pool_user_position_records"`
}

func (m *UserConcentratedSuperfluidPositionsUndelegatingResponse) Reset() {
	*m = UserConcentratedSuperfluidPositionsUndelegatingResponse{}
}
func (m *UserConcentratedSuperfluidPositionsUndelegatingResponse) String() string {
	return proto.CompactTextString(m)
}
func (*UserConcentratedSuperfluidPositionsUndelegatingResponse) ProtoMessage() {}
func (*UserConcentratedSuperfluidPositionsUndelegatingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d9448e4ed3943f, []int{35}
}
func (m *UserConcentratedSuperfluidPositionsUndelegatingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserConcentratedSuperfluidPositionsUndelegatingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserConcentratedSuperfluidPositionsUndelegatingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserConcentratedSuperfluidPositionsUndelegatingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserConcentratedSuperfluidPositionsUndelegatingResponse.Merge(m, src)
}
func (m *UserConcentratedSuperfluidPositionsUndelegatingResponse) XXX_Size() int {
	return m.Size()
}
func (m *UserConcentratedSuperfluidPositionsUndelegatingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserConcentratedSuperfluidPositionsUndelegatingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserConcentratedSuperfluidPositionsUndelegatingResponse proto.InternalMessageInfo

func (m *UserConcentratedSuperfluidPositionsUndelegatingResponse) GetClPoolUserPositionRecords() []ConcentratedPoolUserPositionRecord {
	if m != nil {
		return m.ClPoolUserPositionRecords
	}
	return nil
}

// THIS QUERY IS TEMPORARY
type QueryRestSupplyRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryRestSupplyRequest) Reset()         { *m = QueryRestSupplyRequest{} }
func (m *QueryRestSupplyRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRestSupplyRequest) ProtoMessage()    {}
func (*QueryRestSupplyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d9448e4ed3943f, []int{36}
}
func (m *QueryRestSupplyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRestSupplyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRestSupplyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRestSupplyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRestSupplyRequest.Merge(m, src)
}
func (m *QueryRestSupplyRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRestSupplyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRestSupplyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRestSupplyRequest proto.InternalMessageInfo

func (m *QueryRestSupplyRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type QueryRestSupplyResponse struct {
	// amount is the supply of the coin.
	Amount types.Coin `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount"`
}

func (m *QueryRestSupplyResponse) Reset()         { *m = QueryRestSupplyResponse{} }
func (m *QueryRestSupplyResponse) String() string { return proto.CompactTextString(m) }
func (*QueryRestSupplyResponse) ProtoMessage()    {}
func (*QueryRestSupplyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_e3d9448e4ed3943f, []int{37}
}
func (m *QueryRestSupplyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRestSupplyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRestSupplyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRestSupplyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRestSupplyResponse.Merge(m, src)
}
func (m *QueryRestSupplyResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryRestSupplyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRestSupplyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRestSupplyResponse proto.InternalMessageInfo

func (m *QueryRestSupplyResponse) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "osmosis.superfluid.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "osmosis.superfluid.QueryParamsResponse")
	proto.RegisterType((*AssetTypeRequest)(nil), "osmosis.superfluid.AssetTypeRequest")
	proto.RegisterType((*AssetTypeResponse)(nil), "osmosis.superfluid.AssetTypeResponse")
	proto.RegisterType((*AllAssetsRequest)(nil), "osmosis.superfluid.AllAssetsRequest")
	proto.RegisterType((*AllAssetsResponse)(nil), "osmosis.superfluid.AllAssetsResponse")
	proto.RegisterType((*AssetMultiplierRequest)(nil), "osmosis.superfluid.AssetMultiplierRequest")
	proto.RegisterType((*AssetMultiplierResponse)(nil), "osmosis.superfluid.AssetMultiplierResponse")
	proto.RegisterType((*SuperfluidIntermediaryAccountInfo)(nil), "osmosis.superfluid.SuperfluidIntermediaryAccountInfo")
	proto.RegisterType((*AllIntermediaryAccountsRequest)(nil), "osmosis.superfluid.AllIntermediaryAccountsRequest")
	proto.RegisterType((*AllIntermediaryAccountsResponse)(nil), "osmosis.superfluid.AllIntermediaryAccountsResponse")
	proto.RegisterType((*ConnectedIntermediaryAccountRequest)(nil), "osmosis.superfluid.ConnectedIntermediaryAccountRequest")
	proto.RegisterType((*ConnectedIntermediaryAccountResponse)(nil), "osmosis.superfluid.ConnectedIntermediaryAccountResponse")
	proto.RegisterType((*QueryTotalDelegationByValidatorForDenomRequest)(nil), "osmosis.superfluid.QueryTotalDelegationByValidatorForDenomRequest")
	proto.RegisterType((*QueryTotalDelegationByValidatorForDenomResponse)(nil), "osmosis.superfluid.QueryTotalDelegationByValidatorForDenomResponse")
	proto.RegisterType((*Delegations)(nil), "osmosis.superfluid.Delegations")
	proto.RegisterType((*TotalSuperfluidDelegationsRequest)(nil), "osmosis.superfluid.TotalSuperfluidDelegationsRequest")
	proto.RegisterType((*TotalSuperfluidDelegationsResponse)(nil), "osmosis.superfluid.TotalSuperfluidDelegationsResponse")
	proto.RegisterType((*SuperfluidDelegationAmountRequest)(nil), "osmosis.superfluid.SuperfluidDelegationAmountRequest")
	proto.RegisterType((*SuperfluidDelegationAmountResponse)(nil), "osmosis.superfluid.SuperfluidDelegationAmountResponse")
	proto.RegisterType((*SuperfluidDelegationsByDelegatorRequest)(nil), "osmosis.superfluid.SuperfluidDelegationsByDelegatorRequest")
	proto.RegisterType((*SuperfluidDelegationsByDelegatorResponse)(nil), "osmosis.superfluid.SuperfluidDelegationsByDelegatorResponse")
	proto.RegisterType((*SuperfluidUndelegationsByDelegatorRequest)(nil), "osmosis.superfluid.SuperfluidUndelegationsByDelegatorRequest")
	proto.RegisterType((*SuperfluidUndelegationsByDelegatorResponse)(nil), "osmosis.superfluid.SuperfluidUndelegationsByDelegatorResponse")
	proto.RegisterType((*SuperfluidDelegationsByValidatorDenomRequest)(nil), "osmosis.superfluid.SuperfluidDelegationsByValidatorDenomRequest")
	proto.RegisterType((*SuperfluidDelegationsByValidatorDenomResponse)(nil), "osmosis.superfluid.SuperfluidDelegationsByValidatorDenomResponse")
	proto.RegisterType((*EstimateSuperfluidDelegatedAmountByValidatorDenomRequest)(nil), "osmosis.superfluid.EstimateSuperfluidDelegatedAmountByValidatorDenomRequest")
	proto.RegisterType((*EstimateSuperfluidDelegatedAmountByValidatorDenomResponse)(nil), "osmosis.superfluid.EstimateSuperfluidDelegatedAmountByValidatorDenomResponse")
	proto.RegisterType((*QueryTotalDelegationByDelegatorRequest)(nil), "osmosis.superfluid.QueryTotalDelegationByDelegatorRequest")
	proto.RegisterType((*QueryTotalDelegationByDelegatorResponse)(nil), "osmosis.superfluid.QueryTotalDelegationByDelegatorResponse")
	proto.RegisterType((*QueryUnpoolWhitelistRequest)(nil), "osmosis.superfluid.QueryUnpoolWhitelistRequest")
	proto.RegisterType((*QueryUnpoolWhitelistResponse)(nil), "osmosis.superfluid.QueryUnpoolWhitelistResponse")
	proto.RegisterType((*UserConcentratedSuperfluidPositionsDelegatedRequest)(nil), "osmosis.superfluid.UserConcentratedSuperfluidPositionsDelegatedRequest")
	proto.RegisterType((*UserConcentratedSuperfluidPositionsDelegatedResponse)(nil), "osmosis.superfluid.UserConcentratedSuperfluidPositionsDelegatedResponse")
	proto.RegisterType((*UserConcentratedSuperfluidPositionsUndelegatingRequest)(nil), "osmosis.superfluid.UserConcentratedSuperfluidPositionsUndelegatingRequest")
	proto.RegisterType((*UserConcentratedSuperfluidPositionsUndelegatingResponse)(nil), "osmosis.superfluid.UserConcentratedSuperfluidPositionsUndelegatingResponse")
	proto.RegisterType((*QueryRestSupplyRequest)(nil), "osmosis.superfluid.QueryRestSupplyRequest")
	proto.RegisterType((*QueryRestSupplyResponse)(nil), "osmosis.superfluid.QueryRestSupplyResponse")
}

func init() { proto.RegisterFile("osmosis/superfluid/query.proto", fileDescriptor_e3d9448e4ed3943f) }

var fileDescriptor_e3d9448e4ed3943f = []byte{
	// 2099 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x5a, 0x4d, 0x6c, 0xdc, 0xc6,
	0xf5, 0x17, 0x25, 0x45, 0xb2, 0x9f, 0x01, 0x5b, 0x1e, 0x3b, 0x96, 0x44, 0x5b, 0x2b, 0x87, 0x72,
	0x2c, 0xfd, 0x15, 0x9b, 0x8c, 0xe5, 0x58, 0x52, 0x9c, 0xbf, 0x8d, 0x48, 0x96, 0xe5, 0xa8, 0xb5,
	0x63, 0x65, 0x65, 0xc9, 0xe8, 0x17, 0x58, 0x6a, 0x39, 0x5a, 0x11, 0xe2, 0x92, 0x2b, 0x0e, 0xa9,
	0x64, 0x11, 0xb8, 0x05, 0x52, 0x14, 0x68, 0xd0, 0x43, 0x5b, 0xe4, 0x50, 0xe4, 0xd6, 0x4b, 0x0f,
	0xcd, 0xa1, 0xbd, 0xb5, 0x28, 0xd0, 0x4b, 0xd1, 0x4b, 0x80, 0xa2, 0x40, 0x80, 0x02, 0x45, 0xd1,
	0x83, 0x13, 0xd8, 0x3d, 0xb6, 0x97, 0x1e, 0xdb, 0x4b, 0xc1, 0x99, 0xe1, 0xc7, 0xee, 0x0e, 0xc9,
	0xdd, 0xb5, 0x6b, 0xe7, 0xe4, 0x25, 0xe7, 0x7d, 0xfd, 0xde, 0xd7, 0xf0, 0x3d, 0x19, 0x4a, 0x2e,
	0xa9, 0xb9, 0xc4, 0x22, 0x1a, 0x09, 0xea, 0xd8, 0xdb, 0xb1, 0x03, 0xcb, 0xd4, 0xf6, 0x03, 0xec,
	0x35, 0xd4, 0xba, 0xe7, 0xfa, 0x2e, 0x42, 0xfc, 0x5c, 0x4d, 0xce, 0xe5, 0x93, 0x55, 0xb7, 0xea,
	0xd2, 0x63, 0x2d, 0xfc, 0xc5, 0x28, 0xe5, 0x52, 0x85, 0x92, 0x6a, 0xdb, 0x06, 0xc1, 0xda, 0xc1,
	0xa5, 0x6d, 0xec, 0x1b, 0x97, 0xb4, 0x8a, 0x6b, 0x39, 0xfc, 0xfc, 0x4c, 0xd5, 0x75, 0xab, 0x36,
	0xd6, 0x8c, 0xba, 0xa5, 0x19, 0x8e, 0xe3, 0xfa, 0x86, 0x6f, 0xb9, 0x0e, 0xe1, 0xa7, 0x93, 0xfc,
	0x94, 0x3e, 0x6d, 0x07, 0x3b, 0x9a, 0x6f, 0xd5, 0x30, 0xf1, 0x8d, 0x5a, 0x3d, 0x12, 0xdf, 0x4a,
	0x60, 0x06, 0x1e, 0x95, 0xc0, 0xcf, 0xa7, 0x04, 0x40, 0x92, 0x9f, 0x91, 0x16, 0x01, 0x51, 0xdd,
	0xf0, 0x8c, 0x5a, 0x64, 0xc6, 0x78, 0x44, 0x60, 0xbb, 0x95, 0xbd, 0xa0, 0x4e, 0xff, 0xe1, 0x47,
	0xb3, 0x69, 0x7c, 0xd4, 0x45, 0x31, 0xca, 0xba, 0x51, 0xb5, 0x9c, 0xb4, 0x31, 0xe7, 0x38, 0x2d,
	0xf1, 0x8d, 0x3d, 0xcb, 0xa9, 0xc6, 0x84, 0xfc, 0x99, 0x51, 0x29, 0x27, 0x01, 0xbd, 0x13, 0xca,
	0x59, 0xa7, 0x16, 0x94, 0xf1, 0x7e, 0x80, 0x89, 0xaf, 0xdc, 0x85, 0x13, 0x4d, 0x6f, 0x49, 0xdd,
	0x75, 0x08, 0x46, 0x8b, 0x30, 0xc4, 0x2c, 0x1d, 0x93, 0xce, 0x4a, 0x33, 0x47, 0xe6, 0x64, 0xb5,
	0x3d, 0x32, 0x2a, 0xe3, 0x59, 0x1e, 0xfc, 0xf4, 0xe1, 0x64, 0x5f, 0x99, 0xd3, 0x2b, 0x33, 0x30,
	0xb2, 0x44, 0x08, 0xf6, 0xef, 0x35, 0xea, 0x98, 0x2b, 0x41, 0x27, 0xe1, 0x05, 0x13, 0x3b, 0x6e,
	0x8d, 0x0a, 0x3b, 0x5c, 0x66, 0x0f, 0xca, 0x37, 0xe0, 0x78, 0x8a, 0x92, 0x2b, 0x5e, 0x05, 0x30,
	0xc2, 0x97, 0xba, 0xdf, 0xa8, 0x63, 0x4a, 0x7f, 0x74, 0x6e, 0x5a, 0xa4, 0x7c, 0x23, 0xfe, 0x99,
	0x08, 0x39, 0x6c, 0x44, 0x3f, 0x15, 0x04, 0x23, 0x4b, 0xb6, 0x4d, 0x8f, 0x62, 0xac, 0x5b, 0x70,
	0x3c, 0xf5, 0x8e, 0x2b, 0x5c, 0x82, 0x21, 0xca, 0x15, 0x22, 0x1d, 0x98, 0x39, 0x32, 0x37, 0xd5,
	0x81, 0xb2, 0x08, 0x32, 0x63, 0x54, 0x54, 0x38, 0x45, 0x5f, 0xdf, 0x09, 0x6c, 0xdf, 0xaa, 0xdb,
	0x16, 0xf6, 0xf2, 0x81, 0xff, 0x50, 0x82, 0xd1, 0x36, 0x06, 0x6e, 0x4e, 0x1d, 0xe4, 0x50, 0xbf,
	0x8e, 0xf7, 0x03, 0xeb, 0xc0, 0xb0, 0xb1, 0xe3, 0xeb, 0xb5, 0x98, 0x8a, 0x07, 0x63, 0x4e, 0x64,
	0xe2, 0x5d, 0x52, 0x73, 0x6f, 0xc6, 0x4c, 0x69, 0xc9, 0x15, 0xd7, 0x33, 0xcb, 0x63, 0x6e, 0xc6,
	0xb9, 0xf2, 0xa1, 0x04, 0x2f, 0x25, 0xf8, 0xd6, 0x1c, 0x1f, 0x7b, 0x35, 0x6c, 0x5a, 0x86, 0xd7,
	0x58, 0xaa, 0x54, 0xdc, 0xc0, 0xf1, 0xd7, 0x9c, 0x1d, 0x57, 0x8c, 0x04, 0x8d, 0xc3, 0xa1, 0x03,
	0xc3, 0xd6, 0x0d, 0xd3, 0xf4, 0xc6, 0xfa, 0xe9, 0xc1, 0xf0, 0x81, 0x61, 0x2f, 0x99, 0xa6, 0x17,
	0x1e, 0x55, 0x8d, 0xa0, 0x8a, 0x75, 0xcb, 0x1c, 0x1b, 0x38, 0x2b, 0xcd, 0x0c, 0x96, 0x87, 0xe9,
	0xf3, 0x9a, 0x89, 0xc6, 0x60, 0x38, 0xe4, 0xc0, 0x84, 0x8c, 0x0d, 0x32, 0x26, 0xfe, 0xa8, 0xec,
	0x42, 0x69, 0xc9, 0xb6, 0x05, 0x36, 0x44, 0x31, 0x0c, 0xf3, 0x23, 0xc9, 0x7f, 0xee, 0x8f, 0xf3,
	0x2a, 0x2b, 0x00, 0x35, 0x2c, 0x16, 0x95, 0xf5, 0x13, 0x5e, 0x03, 0xea, 0xba, 0x51, 0x8d, 0xd2,
	0xb0, 0x9c, 0xe2, 0x54, 0xfe, 0x20, 0xc1, 0x64, 0xa6, 0x2a, 0x1e, 0x8b, 0xfb, 0x70, 0xc8, 0xe0,
	0xef, 0x78, 0x72, 0x5c, 0xc9, 0x4f, 0x8e, 0x0c, 0xe7, 0xf1, 0x74, 0x89, 0x85, 0xa1, 0x5b, 0x4d,
	0x20, 0xfa, 0x29, 0x88, 0xe9, 0x42, 0x10, 0xcc, 0xaa, 0x26, 0x14, 0xd7, 0x61, 0xea, 0x86, 0xeb,
	0x38, 0xb8, 0xe2, 0x63, 0x91, 0xf2, 0xc8, 0x69, 0xa3, 0x30, 0x1c, 0xb6, 0x96, 0x30, 0x14, 0x12,
	0x0d, 0xc5, 0x50, 0xf8, 0xb8, 0x66, 0x2a, 0xef, 0xc2, 0xb9, 0x7c, 0x7e, 0xee, 0x89, 0xbb, 0x30,
	0xcc, 0x8d, 0xe7, 0x2e, 0xef, 0xcd, 0x11, 0xe5, 0x48, 0x8a, 0xb2, 0x0a, 0x2a, 0x6d, 0x3b, 0xf7,
	0x5c, 0xdf, 0xb0, 0x57, 0xb0, 0x8d, 0xab, 0x14, 0xd0, 0x72, 0x63, 0xcb, 0xb0, 0x2d, 0xd3, 0xf0,
	0x5d, 0x6f, 0xd5, 0xf5, 0x56, 0xc2, 0x1c, 0xcb, 0x2f, 0xa5, 0x3a, 0x68, 0x1d, 0xcb, 0xe1, 0x58,
	0xae, 0xb5, 0x14, 0xfc, 0xa4, 0x08, 0x4a, 0x22, 0x8a, 0xb4, 0x14, 0xfb, 0x17, 0x12, 0x1c, 0x49,
	0x9d, 0x36, 0x95, 0x80, 0xd4, 0x5c, 0x02, 0xf7, 0xe0, 0x88, 0x51, 0x0b, 0xe1, 0xea, 0x64, 0x87,
	0x98, 0xac, 0x40, 0x96, 0x2f, 0x87, 0xd2, 0xfe, 0xf6, 0x70, 0xf2, 0x45, 0x16, 0x6e, 0x62, 0xee,
	0xa9, 0x96, 0xab, 0xd5, 0x0c, 0x7f, 0x57, 0x5d, 0x73, 0xfc, 0x7f, 0x3d, 0x9c, 0x44, 0x0d, 0xa3,
	0x66, 0x5f, 0x55, 0x52, 0x9c, 0x4a, 0x19, 0xd8, 0xd3, 0xc6, 0x0e, 0x31, 0xd1, 0xb7, 0xe1, 0x58,
	0x4b, 0x87, 0xa0, 0xf5, 0x75, 0x78, 0x79, 0xa1, 0x48, 0xf2, 0x29, 0x26, 0xb9, 0x85, 0x5b, 0x29,
	0x1f, 0x6d, 0xee, 0x0d, 0xca, 0x14, 0xbc, 0x44, 0xfd, 0x99, 0xc4, 0x33, 0x05, 0x38, 0x6a, 0xa6,
	0x3f, 0x95, 0x40, 0xc9, 0xa3, 0xe2, 0xde, 0xde, 0x87, 0xe3, 0x7e, 0x48, 0xa5, 0x9b, 0xc9, 0x21,
	0xf3, 0xd3, 0xf2, 0x4a, 0x91, 0xbd, 0x53, 0xcc, 0x5e, 0xc6, 0x9f, 0x04, 0x27, 0x2d, 0x4a, 0x29,
	0x8f, 0xf8, 0xcd, 0xa1, 0x27, 0xca, 0x47, 0x4d, 0x0d, 0x2d, 0x39, 0x59, 0xaa, 0xa5, 0x6b, 0xe2,
	0x15, 0x38, 0xce, 0xe5, 0xb8, 0x9e, 0x1e, 0xb5, 0x23, 0x16, 0xc0, 0x91, 0xf8, 0x60, 0x89, 0xbd,
	0x0f, 0x89, 0x0f, 0xa2, 0x84, 0x8a, 0x89, 0x59, 0xc3, 0x1b, 0x89, 0x0f, 0x22, 0xe2, 0x38, 0x53,
	0x07, 0xd2, 0x99, 0xfa, 0xa1, 0x04, 0x4a, 0x9e, 0x55, 0xdc, 0x5f, 0x15, 0x18, 0x62, 0xb1, 0xe6,
	0xd9, 0x39, 0xde, 0xd4, 0x16, 0xa2, 0x86, 0x70, 0xc3, 0xb5, 0x9c, 0xe5, 0x57, 0x43, 0xff, 0x7d,
	0xf2, 0xf9, 0xe4, 0x4c, 0xd5, 0xf2, 0x77, 0x83, 0x6d, 0xb5, 0xe2, 0xd6, 0x34, 0xfe, 0x25, 0xc0,
	0xfe, 0xb9, 0x48, 0xcc, 0x3d, 0x2d, 0xbc, 0x47, 0x09, 0x65, 0x20, 0x65, 0x2e, 0x5a, 0xd9, 0x82,
	0x69, 0x61, 0xd4, 0x96, 0x1b, 0x2b, 0x11, 0xf2, 0x5e, 0xdc, 0xa4, 0xfc, 0x66, 0x00, 0x66, 0x8a,
	0x05, 0x73, 0xa4, 0xef, 0xc1, 0x84, 0x30, 0xa6, 0xba, 0x47, 0x6f, 0xac, 0xa8, 0x3c, 0xd5, 0xfc,
	0x4e, 0x93, 0x28, 0x61, 0x17, 0x1d, 0xaf, 0xd6, 0xd3, 0x24, 0x93, 0x82, 0xa0, 0xef, 0xc2, 0x8b,
	0x4d, 0x39, 0x89, 0x4d, 0x3d, 0xfc, 0x72, 0x0c, 0x23, 0xfa, 0xd4, 0x5d, 0x7e, 0x22, 0x9d, 0x9e,
	0xd8, 0xa4, 0x2f, 0xd1, 0x8f, 0x24, 0x28, 0x31, 0x0b, 0x52, 0xd7, 0x7c, 0xf8, 0xb5, 0x86, 0x4d,
	0x9d, 0x47, 0x7f, 0x80, 0xb6, 0xd9, 0x1c, 0x53, 0x34, 0x6e, 0xca, 0x74, 0x87, 0xa6, 0x94, 0x4f,
	0x53, 0x8d, 0x49, 0x99, 0x6f, 0x50, 0x7d, 0x2c, 0xfd, 0x14, 0x07, 0xfe, 0x2f, 0xf1, 0xe9, 0xa6,
	0x63, 0x3e, 0xb5, 0x9c, 0x48, 0xaa, 0xa1, 0x3f, 0x5d, 0x0d, 0xff, 0xee, 0x87, 0xd9, 0x4e, 0x14,
	0x3e, 0xf7, 0x5c, 0xf9, 0x9e, 0x04, 0xa3, 0x2c, 0x54, 0x81, 0xf3, 0x0c, 0xd2, 0x85, 0x25, 0xe6,
	0x66, 0xa2, 0x8a, 0x25, 0xcc, 0x6d, 0x38, 0x46, 0x1a, 0x8e, 0xbf, 0x8b, 0x7d, 0xab, 0xa2, 0x87,
	0x77, 0x37, 0x19, 0x1b, 0xa0, 0xca, 0x27, 0x62, 0xc4, 0x6c, 0x84, 0x50, 0x37, 0x22, 0xb2, 0xdb,
	0x6e, 0x65, 0x8f, 0x03, 0x3c, 0x4a, 0xd2, 0x2f, 0x89, 0xb2, 0x0f, 0x17, 0x32, 0xaa, 0x34, 0xbe,
	0x35, 0x9b, 0xae, 0x5e, 0x61, 0xf7, 0x93, 0x8a, 0xba, 0x5f, 0x53, 0xbc, 0x7f, 0x21, 0xc1, 0xc5,
	0x0e, 0x75, 0x3e, 0xef, 0x90, 0x2b, 0x0f, 0x60, 0xf1, 0x26, 0xf1, 0xad, 0x9a, 0xe1, 0xe3, 0x36,
	0x41, 0x51, 0xc1, 0xfc, 0x0f, 0x5d, 0xf5, 0x3b, 0x09, 0x5e, 0xef, 0x41, 0x3f, 0x77, 0x5b, 0x66,
	0x6f, 0x93, 0x9e, 0x4d, 0x6f, 0x53, 0x36, 0xe1, 0xbc, 0xf8, 0x8b, 0xec, 0xc9, 0xae, 0x96, 0x8f,
	0x07, 0x61, 0xba, 0x50, 0xee, 0x73, 0xef, 0x16, 0x06, 0x9c, 0x68, 0x52, 0xc7, 0x0c, 0xe2, 0x8d,
	0x62, 0x36, 0xf2, 0x7d, 0x34, 0x97, 0x47, 0xee, 0x4f, 0xcb, 0x61, 0x1c, 0x5c, 0x17, 0x32, 0xdb,
	0x4e, 0xb2, 0x03, 0x3c, 0xf0, 0xe5, 0xb9, 0xbc, 0x06, 0x9f, 0xed, 0xe5, 0x35, 0x01, 0xa7, 0x69,
	0x6a, 0x6c, 0x3a, 0x75, 0xd7, 0xb5, 0xef, 0xef, 0x5a, 0x3e, 0xb6, 0x2d, 0x12, 0x7d, 0xe9, 0x29,
	0xaf, 0xc3, 0x19, 0xf1, 0x31, 0xf7, 0xe8, 0x38, 0x1c, 0x0a, 0x0f, 0x74, 0x8b, 0x67, 0xc6, 0x60,
	0x79, 0x38, 0x7c, 0x5e, 0x33, 0x89, 0xb2, 0x0d, 0x97, 0x37, 0x09, 0xf6, 0x6e, 0xb8, 0x4e, 0x05,
	0x3b, 0xbe, 0x17, 0x3a, 0x21, 0x49, 0x90, 0x75, 0x97, 0x58, 0xb4, 0x87, 0xc5, 0x0e, 0xea, 0x29,
	0xb3, 0x7f, 0x2d, 0xc1, 0x6b, 0xdd, 0x29, 0xe1, 0x76, 0x7f, 0x07, 0x26, 0x2a, 0xb6, 0x4e, 0x4d,
	0x0f, 0x08, 0xf6, 0xf4, 0x3a, 0x27, 0x6d, 0x49, 0xf3, 0x79, 0x51, 0x9a, 0xa7, 0x95, 0xad, 0xbb,
	0xae, 0x1d, 0x1a, 0x10, 0xa9, 0x6a, 0x4a, 0xf7, 0xf1, 0x8a, 0x2d, 0x3e, 0x27, 0x0a, 0x86, 0xf9,
	0x0e, 0xec, 0x4e, 0xee, 0x76, 0xa7, 0xda, 0x93, 0x7f, 0x7e, 0x2b, 0xc1, 0x42, 0xd7, 0x7a, 0xbe,
	0x24, 0x2e, 0x52, 0xe1, 0x14, 0x4d, 0xbd, 0x32, 0x26, 0xfe, 0x46, 0x50, 0xaf, 0xdb, 0x8d, 0xfc,
	0x71, 0xb6, 0x0c, 0xa3, 0x6d, 0xf4, 0x1c, 0xca, 0x42, 0x6a, 0x30, 0x28, 0xa8, 0xae, 0x68, 0x60,
	0xa5, 0xe4, 0x73, 0x7f, 0x99, 0x80, 0x17, 0xa8, 0x50, 0xf4, 0x7d, 0x09, 0x86, 0xd8, 0xce, 0x0e,
	0x9d, 0x17, 0x21, 0x6e, 0x5f, 0x0f, 0xca, 0xd3, 0x85, 0x74, 0xcc, 0x3c, 0x65, 0xf6, 0x83, 0x3f,
	0xff, 0xfd, 0xa3, 0xfe, 0x73, 0x48, 0xd1, 0x04, 0x4b, 0xcf, 0x64, 0x73, 0x49, 0x95, 0xff, 0x40,
	0x82, 0xc3, 0xf1, 0xd2, 0x0e, 0x9d, 0x13, 0xa9, 0x68, 0x5d, 0x21, 0xca, 0x2f, 0x17, 0x50, 0x71,
	0x33, 0x54, 0x6a, 0xc6, 0x0c, 0x3a, 0x9f, 0x67, 0x46, 0xb2, 0x60, 0x64, 0xa6, 0x44, 0x3b, 0xc1,
	0x0c, 0x53, 0x5a, 0xd6, 0x88, 0x19, 0xa6, 0xb4, 0x2e, 0x16, 0x3b, 0x34, 0xc5, 0xb6, 0x75, 0xb6,
	0x58, 0x40, 0x3f, 0x93, 0xe0, 0x58, 0xcb, 0x56, 0x10, 0xcd, 0x66, 0xa2, 0x6e, 0xdb, 0x35, 0xca,
	0xaf, 0x74, 0x44, 0xcb, 0x8d, 0x7b, 0x8d, 0x1a, 0xa7, 0xa2, 0x0b, 0xc5, 0x7e, 0x4a, 0xd6, 0x8f,
	0xe8, 0xf7, 0x12, 0x8c, 0x66, 0x2c, 0xcd, 0xd0, 0x5c, 0x86, 0x57, 0x72, 0x96, 0x79, 0xf2, 0xe5,
	0xae, 0x78, 0xb8, 0xe9, 0xd7, 0xa8, 0xe9, 0x0b, 0xe8, 0x4a, 0x91, 0x5f, 0xad, 0x94, 0x14, 0x3d,
	0xde, 0xbd, 0x7d, 0x2e, 0xc1, 0x99, 0xbc, 0x9d, 0x17, 0x5a, 0xc8, 0x68, 0x06, 0x45, 0x5b, 0x36,
	0x79, 0xb1, 0x7b, 0x46, 0x0e, 0xe9, 0x36, 0x85, 0xb4, 0x8a, 0x56, 0xf2, 0x20, 0x55, 0x22, 0x49,
	0x42, 0x60, 0xda, 0xfb, 0x7c, 0xc3, 0xf7, 0x00, 0xfd, 0x2a, 0xda, 0xcc, 0xe4, 0xee, 0xc3, 0xd0,
	0x72, 0x66, 0x69, 0x77, 0xbc, 0x94, 0x93, 0x6f, 0x3c, 0x91, 0x0c, 0x8e, 0xbe, 0x0f, 0xfd, 0x51,
	0x02, 0x39, 0x7b, 0x97, 0x84, 0x84, 0xcb, 0xc6, 0xc2, 0x0d, 0x95, 0x3c, 0xdf, 0x2d, 0x1b, 0xb7,
	0xe7, 0x3a, 0x8d, 0xc6, 0x22, 0x9a, 0x2f, 0x4a, 0x30, 0xf1, 0x4a, 0x0a, 0xfd, 0x49, 0x02, 0x39,
	0x7b, 0xd3, 0x83, 0xae, 0x74, 0xfa, 0xd9, 0xd9, 0xb4, 0xaf, 0x12, 0xa3, 0x29, 0x5e, 0x28, 0x29,
	0x6f, 0x52, 0x34, 0x57, 0xd1, 0x62, 0x1e, 0x1a, 0xf1, 0xe7, 0x32, 0xbb, 0x40, 0xd0, 0x3f, 0x25,
	0x38, 0x5b, 0xb4, 0xd5, 0x41, 0x6f, 0x74, 0x6a, 0x9e, 0x60, 0xa1, 0x20, 0xff, 0x7f, 0x6f, 0xcc,
	0x1c, 0xe1, 0xdb, 0x14, 0xe1, 0x5b, 0x68, 0xb5, 0x6b, 0x84, 0x44, 0x7b, 0xbf, 0xed, 0x3b, 0xe4,
	0x01, 0xfa, 0xa0, 0x3f, 0xbd, 0xa9, 0xcb, 0xda, 0x4d, 0xa0, 0x6b, 0xf9, 0x46, 0x17, 0x2c, 0x51,
	0xe4, 0xeb, 0xbd, 0xb2, 0x73, 0xd4, 0xdf, 0xa2, 0xa8, 0xef, 0xa3, 0xcd, 0x0e, 0x51, 0x07, 0x69,
	0x81, 0xfa, 0x76, 0x43, 0x8f, 0x91, 0x0b, 0x9d, 0xf0, 0x1f, 0x09, 0x5e, 0xee, 0x68, 0x60, 0x47,
	0x6f, 0x76, 0x11, 0x3c, 0xe1, 0xd0, 0x2c, 0x2f, 0x3d, 0x81, 0x04, 0xee, 0x8d, 0x3b, 0xd4, 0x1b,
	0xb7, 0xd0, 0xcd, 0xee, 0x73, 0x20, 0xf4, 0x45, 0x32, 0xb3, 0xb3, 0xbf, 0x6b, 0xfd, 0xb2, 0x1f,
	0x2e, 0x75, 0x3d, 0x83, 0xa3, 0xdb, 0x22, 0x1c, 0xbd, 0xae, 0x12, 0xe4, 0x3b, 0x4f, 0x49, 0x1a,
	0xf7, 0xd0, 0x37, 0xa9, 0x87, 0xb6, 0xd0, 0xbd, 0x3c, 0x0f, 0x61, 0x2e, 0x5e, 0xcf, 0x6b, 0x08,
	0x22, 0x87, 0xfd, 0x23, 0xea, 0xe0, 0xc2, 0xc9, 0x1c, 0x5d, 0xed, 0xfc, 0x9e, 0x68, 0x2b, 0x94,
	0x37, 0x7a, 0xe2, 0xe5, 0xa8, 0x37, 0x29, 0xea, 0xbb, 0xe8, 0x4e, 0x1e, 0xea, 0xd6, 0x3f, 0x50,
	0x14, 0x57, 0xc7, 0x27, 0x12, 0x1c, 0x6b, 0x19, 0x27, 0x91, 0x96, 0x69, 0xa7, 0x78, 0x2e, 0x95,
	0x5f, 0xed, 0x9c, 0xa1, 0x9b, 0xaf, 0xb6, 0x80, 0x32, 0xeb, 0xef, 0xc6, 0x86, 0x7d, 0xdc, 0x0f,
	0x17, 0xba, 0x19, 0x30, 0xd1, 0x2d, 0x91, 0x61, 0x3d, 0xcc, 0xc1, 0xf2, 0x5b, 0x4f, 0x2e, 0x88,
	0x23, 0xdf, 0xa2, 0xc8, 0xd7, 0xd1, 0xdb, 0xb9, 0x77, 0x32, 0xfb, 0x14, 0x4a, 0x6f, 0x46, 0xec,
	0x78, 0xe4, 0x13, 0xf7, 0xfa, 0x9f, 0xf7, 0x83, 0xd6, 0xe5, 0x70, 0x89, 0xbe, 0xd2, 0x23, 0x2a,
	0xc1, 0x24, 0x2c, 0x7f, 0xf5, 0xa9, 0xc8, 0xe2, 0x4e, 0xfa, 0x1a, 0x75, 0xd2, 0x06, 0x7a, 0xa7,
	0x13, 0x27, 0x05, 0x29, 0x09, 0xc5, 0x7e, 0xfa, 0x89, 0x04, 0x90, 0x0c, 0xa5, 0xe2, 0xb9, 0x44,
	0x3c, 0xe9, 0x8a, 0xe7, 0x92, 0x8c, 0x29, 0xb7, 0xb3, 0x31, 0x92, 0x50, 0x9e, 0xe5, 0xf5, 0x4f,
	0x1f, 0x95, 0xa4, 0xcf, 0x1e, 0x95, 0xa4, 0x2f, 0x1e, 0x95, 0xa4, 0x1f, 0x3f, 0x2e, 0xf5, 0x7d,
	0xf6, 0xb8, 0xd4, 0xf7, 0xd7, 0xc7, 0xa5, 0xbe, 0xaf, 0xcf, 0xa7, 0xd6, 0x4a, 0x5c, 0xce, 0x45,
	0xdb, 0xd8, 0x26, 0xb1, 0xd0, 0x83, 0xb9, 0x4b, 0xda, 0x7b, 0x69, 0xd1, 0x74, 0xd5, 0xb4, 0x3d,
	0x44, 0xff, 0xa7, 0xcc, 0xe5, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0xaa, 0xdb, 0x79, 0xa6, 0xa7,
	0x24, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params returns the total set of superfluid parameters.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Returns superfluid asset type, whether if it's a native asset or an lp
	// share.
	AssetType(ctx context.Context, in *AssetTypeRequest, opts ...grpc.CallOption) (*AssetTypeResponse, error)
	// Returns all registered superfluid assets.
	AllAssets(ctx context.Context, in *AllAssetsRequest, opts ...grpc.CallOption) (*AllAssetsResponse, error)
	// Returns the osmo equivalent multiplier used in the most recent epoch.
	AssetMultiplier(ctx context.Context, in *AssetMultiplierRequest, opts ...grpc.CallOption) (*AssetMultiplierResponse, error)
	// Returns all superfluid intermediary accounts.
	AllIntermediaryAccounts(ctx context.Context, in *AllIntermediaryAccountsRequest, opts ...grpc.CallOption) (*AllIntermediaryAccountsResponse, error)
	// Returns intermediary account connected to a superfluid staked lock by id
	ConnectedIntermediaryAccount(ctx context.Context, in *ConnectedIntermediaryAccountRequest, opts ...grpc.CallOption) (*ConnectedIntermediaryAccountResponse, error)
	// Returns the amount of delegations of specific denom for all validators
	TotalDelegationByValidatorForDenom(ctx context.Context, in *QueryTotalDelegationByValidatorForDenomRequest, opts ...grpc.CallOption) (*QueryTotalDelegationByValidatorForDenomResponse, error)
	// Returns the total amount of osmo superfluidly staked.
	// Response is denominated in uosmo.
	TotalSuperfluidDelegations(ctx context.Context, in *TotalSuperfluidDelegationsRequest, opts ...grpc.CallOption) (*TotalSuperfluidDelegationsResponse, error)
	// Returns the coins superfluid delegated for the delegator, validator, denom
	// triplet
	SuperfluidDelegationAmount(ctx context.Context, in *SuperfluidDelegationAmountRequest, opts ...grpc.CallOption) (*SuperfluidDelegationAmountResponse, error)
	// Returns all the delegated superfluid poistions for a specific delegator.
	SuperfluidDelegationsByDelegator(ctx context.Context, in *SuperfluidDelegationsByDelegatorRequest, opts ...grpc.CallOption) (*SuperfluidDelegationsByDelegatorResponse, error)
	// Returns all the undelegating superfluid poistions for a specific delegator.
	SuperfluidUndelegationsByDelegator(ctx context.Context, in *SuperfluidUndelegationsByDelegatorRequest, opts ...grpc.CallOption) (*SuperfluidUndelegationsByDelegatorResponse, error)
	// Returns all the superfluid positions of a specific denom delegated to one
	// validator
	SuperfluidDelegationsByValidatorDenom(ctx context.Context, in *SuperfluidDelegationsByValidatorDenomRequest, opts ...grpc.CallOption) (*SuperfluidDelegationsByValidatorDenomResponse, error)
	// Returns the amount of a specific denom delegated to a specific validator
	// This is labeled an estimate, because the way it calculates the amount can
	// lead rounding errors from the true delegated amount
	EstimateSuperfluidDelegatedAmountByValidatorDenom(ctx context.Context, in *EstimateSuperfluidDelegatedAmountByValidatorDenomRequest, opts ...grpc.CallOption) (*EstimateSuperfluidDelegatedAmountByValidatorDenomResponse, error)
	// Returns the specified delegations for a specific delegator
	TotalDelegationByDelegator(ctx context.Context, in *QueryTotalDelegationByDelegatorRequest, opts ...grpc.CallOption) (*QueryTotalDelegationByDelegatorResponse, error)
	// Returns a list of whitelisted pool ids to unpool.
	UnpoolWhitelist(ctx context.Context, in *QueryUnpoolWhitelistRequest, opts ...grpc.CallOption) (*QueryUnpoolWhitelistResponse, error)
	// Returns all of a user's full range CL positions that are superfluid staked.
	UserConcentratedSuperfluidPositionsDelegated(ctx context.Context, in *UserConcentratedSuperfluidPositionsDelegatedRequest, opts ...grpc.CallOption) (*UserConcentratedSuperfluidPositionsDelegatedResponse, error)
	UserConcentratedSuperfluidPositionsUndelegating(ctx context.Context, in *UserConcentratedSuperfluidPositionsUndelegatingRequest, opts ...grpc.CallOption) (*UserConcentratedSuperfluidPositionsUndelegatingResponse, error)
	RestSupply(ctx context.Context, in *QueryRestSupplyRequest, opts ...grpc.CallOption) (*QueryRestSupplyResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/osmosis.superfluid.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AssetType(ctx context.Context, in *AssetTypeRequest, opts ...grpc.CallOption) (*AssetTypeResponse, error) {
	out := new(AssetTypeResponse)
	err := c.cc.Invoke(ctx, "/osmosis.superfluid.Query/AssetType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllAssets(ctx context.Context, in *AllAssetsRequest, opts ...grpc.CallOption) (*AllAssetsResponse, error) {
	out := new(AllAssetsResponse)
	err := c.cc.Invoke(ctx, "/osmosis.superfluid.Query/AllAssets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AssetMultiplier(ctx context.Context, in *AssetMultiplierRequest, opts ...grpc.CallOption) (*AssetMultiplierResponse, error) {
	out := new(AssetMultiplierResponse)
	err := c.cc.Invoke(ctx, "/osmosis.superfluid.Query/AssetMultiplier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllIntermediaryAccounts(ctx context.Context, in *AllIntermediaryAccountsRequest, opts ...grpc.CallOption) (*AllIntermediaryAccountsResponse, error) {
	out := new(AllIntermediaryAccountsResponse)
	err := c.cc.Invoke(ctx, "/osmosis.superfluid.Query/AllIntermediaryAccounts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ConnectedIntermediaryAccount(ctx context.Context, in *ConnectedIntermediaryAccountRequest, opts ...grpc.CallOption) (*ConnectedIntermediaryAccountResponse, error) {
	out := new(ConnectedIntermediaryAccountResponse)
	err := c.cc.Invoke(ctx, "/osmosis.superfluid.Query/ConnectedIntermediaryAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalDelegationByValidatorForDenom(ctx context.Context, in *QueryTotalDelegationByValidatorForDenomRequest, opts ...grpc.CallOption) (*QueryTotalDelegationByValidatorForDenomResponse, error) {
	out := new(QueryTotalDelegationByValidatorForDenomResponse)
	err := c.cc.Invoke(ctx, "/osmosis.superfluid.Query/TotalDelegationByValidatorForDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalSuperfluidDelegations(ctx context.Context, in *TotalSuperfluidDelegationsRequest, opts ...grpc.CallOption) (*TotalSuperfluidDelegationsResponse, error) {
	out := new(TotalSuperfluidDelegationsResponse)
	err := c.cc.Invoke(ctx, "/osmosis.superfluid.Query/TotalSuperfluidDelegations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SuperfluidDelegationAmount(ctx context.Context, in *SuperfluidDelegationAmountRequest, opts ...grpc.CallOption) (*SuperfluidDelegationAmountResponse, error) {
	out := new(SuperfluidDelegationAmountResponse)
	err := c.cc.Invoke(ctx, "/osmosis.superfluid.Query/SuperfluidDelegationAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SuperfluidDelegationsByDelegator(ctx context.Context, in *SuperfluidDelegationsByDelegatorRequest, opts ...grpc.CallOption) (*SuperfluidDelegationsByDelegatorResponse, error) {
	out := new(SuperfluidDelegationsByDelegatorResponse)
	err := c.cc.Invoke(ctx, "/osmosis.superfluid.Query/SuperfluidDelegationsByDelegator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SuperfluidUndelegationsByDelegator(ctx context.Context, in *SuperfluidUndelegationsByDelegatorRequest, opts ...grpc.CallOption) (*SuperfluidUndelegationsByDelegatorResponse, error) {
	out := new(SuperfluidUndelegationsByDelegatorResponse)
	err := c.cc.Invoke(ctx, "/osmosis.superfluid.Query/SuperfluidUndelegationsByDelegator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SuperfluidDelegationsByValidatorDenom(ctx context.Context, in *SuperfluidDelegationsByValidatorDenomRequest, opts ...grpc.CallOption) (*SuperfluidDelegationsByValidatorDenomResponse, error) {
	out := new(SuperfluidDelegationsByValidatorDenomResponse)
	err := c.cc.Invoke(ctx, "/osmosis.superfluid.Query/SuperfluidDelegationsByValidatorDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EstimateSuperfluidDelegatedAmountByValidatorDenom(ctx context.Context, in *EstimateSuperfluidDelegatedAmountByValidatorDenomRequest, opts ...grpc.CallOption) (*EstimateSuperfluidDelegatedAmountByValidatorDenomResponse, error) {
	out := new(EstimateSuperfluidDelegatedAmountByValidatorDenomResponse)
	err := c.cc.Invoke(ctx, "/osmosis.superfluid.Query/EstimateSuperfluidDelegatedAmountByValidatorDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalDelegationByDelegator(ctx context.Context, in *QueryTotalDelegationByDelegatorRequest, opts ...grpc.CallOption) (*QueryTotalDelegationByDelegatorResponse, error) {
	out := new(QueryTotalDelegationByDelegatorResponse)
	err := c.cc.Invoke(ctx, "/osmosis.superfluid.Query/TotalDelegationByDelegator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UnpoolWhitelist(ctx context.Context, in *QueryUnpoolWhitelistRequest, opts ...grpc.CallOption) (*QueryUnpoolWhitelistResponse, error) {
	out := new(QueryUnpoolWhitelistResponse)
	err := c.cc.Invoke(ctx, "/osmosis.superfluid.Query/UnpoolWhitelist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserConcentratedSuperfluidPositionsDelegated(ctx context.Context, in *UserConcentratedSuperfluidPositionsDelegatedRequest, opts ...grpc.CallOption) (*UserConcentratedSuperfluidPositionsDelegatedResponse, error) {
	out := new(UserConcentratedSuperfluidPositionsDelegatedResponse)
	err := c.cc.Invoke(ctx, "/osmosis.superfluid.Query/UserConcentratedSuperfluidPositionsDelegated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserConcentratedSuperfluidPositionsUndelegating(ctx context.Context, in *UserConcentratedSuperfluidPositionsUndelegatingRequest, opts ...grpc.CallOption) (*UserConcentratedSuperfluidPositionsUndelegatingResponse, error) {
	out := new(UserConcentratedSuperfluidPositionsUndelegatingResponse)
	err := c.cc.Invoke(ctx, "/osmosis.superfluid.Query/UserConcentratedSuperfluidPositionsUndelegating", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RestSupply(ctx context.Context, in *QueryRestSupplyRequest, opts ...grpc.CallOption) (*QueryRestSupplyResponse, error) {
	out := new(QueryRestSupplyResponse)
	err := c.cc.Invoke(ctx, "/osmosis.superfluid.Query/RestSupply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params returns the total set of superfluid parameters.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Returns superfluid asset type, whether if it's a native asset or an lp
	// share.
	AssetType(context.Context, *AssetTypeRequest) (*AssetTypeResponse, error)
	// Returns all registered superfluid assets.
	AllAssets(context.Context, *AllAssetsRequest) (*AllAssetsResponse, error)
	// Returns the osmo equivalent multiplier used in the most recent epoch.
	AssetMultiplier(context.Context, *AssetMultiplierRequest) (*AssetMultiplierResponse, error)
	// Returns all superfluid intermediary accounts.
	AllIntermediaryAccounts(context.Context, *AllIntermediaryAccountsRequest) (*AllIntermediaryAccountsResponse, error)
	// Returns intermediary account connected to a superfluid staked lock by id
	ConnectedIntermediaryAccount(context.Context, *ConnectedIntermediaryAccountRequest) (*ConnectedIntermediaryAccountResponse, error)
	// Returns the amount of delegations of specific denom for all validators
	TotalDelegationByValidatorForDenom(context.Context, *QueryTotalDelegationByValidatorForDenomRequest) (*QueryTotalDelegationByValidatorForDenomResponse, error)
	// Returns the total amount of osmo superfluidly staked.
	// Response is denominated in uosmo.
	TotalSuperfluidDelegations(context.Context, *TotalSuperfluidDelegationsRequest) (*TotalSuperfluidDelegationsResponse, error)
	// Returns the coins superfluid delegated for the delegator, validator, denom
	// triplet
	SuperfluidDelegationAmount(context.Context, *SuperfluidDelegationAmountRequest) (*SuperfluidDelegationAmountResponse, error)
	// Returns all the delegated superfluid poistions for a specific delegator.
	SuperfluidDelegationsByDelegator(context.Context, *SuperfluidDelegationsByDelegatorRequest) (*SuperfluidDelegationsByDelegatorResponse, error)
	// Returns all the undelegating superfluid poistions for a specific delegator.
	SuperfluidUndelegationsByDelegator(context.Context, *SuperfluidUndelegationsByDelegatorRequest) (*SuperfluidUndelegationsByDelegatorResponse, error)
	// Returns all the superfluid positions of a specific denom delegated to one
	// validator
	SuperfluidDelegationsByValidatorDenom(context.Context, *SuperfluidDelegationsByValidatorDenomRequest) (*SuperfluidDelegationsByValidatorDenomResponse, error)
	// Returns the amount of a specific denom delegated to a specific validator
	// This is labeled an estimate, because the way it calculates the amount can
	// lead rounding errors from the true delegated amount
	EstimateSuperfluidDelegatedAmountByValidatorDenom(context.Context, *EstimateSuperfluidDelegatedAmountByValidatorDenomRequest) (*EstimateSuperfluidDelegatedAmountByValidatorDenomResponse, error)
	// Returns the specified delegations for a specific delegator
	TotalDelegationByDelegator(context.Context, *QueryTotalDelegationByDelegatorRequest) (*QueryTotalDelegationByDelegatorResponse, error)
	// Returns a list of whitelisted pool ids to unpool.
	UnpoolWhitelist(context.Context, *QueryUnpoolWhitelistRequest) (*QueryUnpoolWhitelistResponse, error)
	// Returns all of a user's full range CL positions that are superfluid staked.
	UserConcentratedSuperfluidPositionsDelegated(context.Context, *UserConcentratedSuperfluidPositionsDelegatedRequest) (*UserConcentratedSuperfluidPositionsDelegatedResponse, error)
	UserConcentratedSuperfluidPositionsUndelegating(context.Context, *UserConcentratedSuperfluidPositionsUndelegatingRequest) (*UserConcentratedSuperfluidPositionsUndelegatingResponse, error)
	RestSupply(context.Context, *QueryRestSupplyRequest) (*QueryRestSupplyResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) AssetType(ctx context.Context, req *AssetTypeRequest) (*AssetTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetType not implemented")
}
func (*UnimplementedQueryServer) AllAssets(ctx context.Context, req *AllAssetsRequest) (*AllAssetsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllAssets not implemented")
}
func (*UnimplementedQueryServer) AssetMultiplier(ctx context.Context, req *AssetMultiplierRequest) (*AssetMultiplierResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetMultiplier not implemented")
}
func (*UnimplementedQueryServer) AllIntermediaryAccounts(ctx context.Context, req *AllIntermediaryAccountsRequest) (*AllIntermediaryAccountsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllIntermediaryAccounts not implemented")
}
func (*UnimplementedQueryServer) ConnectedIntermediaryAccount(ctx context.Context, req *ConnectedIntermediaryAccountRequest) (*ConnectedIntermediaryAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConnectedIntermediaryAccount not implemented")
}
func (*UnimplementedQueryServer) TotalDelegationByValidatorForDenom(ctx context.Context, req *QueryTotalDelegationByValidatorForDenomRequest) (*QueryTotalDelegationByValidatorForDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalDelegationByValidatorForDenom not implemented")
}
func (*UnimplementedQueryServer) TotalSuperfluidDelegations(ctx context.Context, req *TotalSuperfluidDelegationsRequest) (*TotalSuperfluidDelegationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalSuperfluidDelegations not implemented")
}
func (*UnimplementedQueryServer) SuperfluidDelegationAmount(ctx context.Context, req *SuperfluidDelegationAmountRequest) (*SuperfluidDelegationAmountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuperfluidDelegationAmount not implemented")
}
func (*UnimplementedQueryServer) SuperfluidDelegationsByDelegator(ctx context.Context, req *SuperfluidDelegationsByDelegatorRequest) (*SuperfluidDelegationsByDelegatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuperfluidDelegationsByDelegator not implemented")
}
func (*UnimplementedQueryServer) SuperfluidUndelegationsByDelegator(ctx context.Context, req *SuperfluidUndelegationsByDelegatorRequest) (*SuperfluidUndelegationsByDelegatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuperfluidUndelegationsByDelegator not implemented")
}
func (*UnimplementedQueryServer) SuperfluidDelegationsByValidatorDenom(ctx context.Context, req *SuperfluidDelegationsByValidatorDenomRequest) (*SuperfluidDelegationsByValidatorDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SuperfluidDelegationsByValidatorDenom not implemented")
}
func (*UnimplementedQueryServer) EstimateSuperfluidDelegatedAmountByValidatorDenom(ctx context.Context, req *EstimateSuperfluidDelegatedAmountByValidatorDenomRequest) (*EstimateSuperfluidDelegatedAmountByValidatorDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateSuperfluidDelegatedAmountByValidatorDenom not implemented")
}
func (*UnimplementedQueryServer) TotalDelegationByDelegator(ctx context.Context, req *QueryTotalDelegationByDelegatorRequest) (*QueryTotalDelegationByDelegatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalDelegationByDelegator not implemented")
}
func (*UnimplementedQueryServer) UnpoolWhitelist(ctx context.Context, req *QueryUnpoolWhitelistRequest) (*QueryUnpoolWhitelistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpoolWhitelist not implemented")
}
func (*UnimplementedQueryServer) UserConcentratedSuperfluidPositionsDelegated(ctx context.Context, req *UserConcentratedSuperfluidPositionsDelegatedRequest) (*UserConcentratedSuperfluidPositionsDelegatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserConcentratedSuperfluidPositionsDelegated not implemented")
}
func (*UnimplementedQueryServer) UserConcentratedSuperfluidPositionsUndelegating(ctx context.Context, req *UserConcentratedSuperfluidPositionsUndelegatingRequest) (*UserConcentratedSuperfluidPositionsUndelegatingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserConcentratedSuperfluidPositionsUndelegating not implemented")
}
func (*UnimplementedQueryServer) RestSupply(ctx context.Context, req *QueryRestSupplyRequest) (*QueryRestSupplyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestSupply not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.superfluid.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AssetType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AssetType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.superfluid.Query/AssetType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AssetType(ctx, req.(*AssetTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllAssetsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.superfluid.Query/AllAssets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllAssets(ctx, req.(*AllAssetsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AssetMultiplier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetMultiplierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AssetMultiplier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.superfluid.Query/AssetMultiplier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AssetMultiplier(ctx, req.(*AssetMultiplierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllIntermediaryAccounts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllIntermediaryAccountsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllIntermediaryAccounts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.superfluid.Query/AllIntermediaryAccounts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllIntermediaryAccounts(ctx, req.(*AllIntermediaryAccountsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ConnectedIntermediaryAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectedIntermediaryAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ConnectedIntermediaryAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.superfluid.Query/ConnectedIntermediaryAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ConnectedIntermediaryAccount(ctx, req.(*ConnectedIntermediaryAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalDelegationByValidatorForDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalDelegationByValidatorForDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalDelegationByValidatorForDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.superfluid.Query/TotalDelegationByValidatorForDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalDelegationByValidatorForDenom(ctx, req.(*QueryTotalDelegationByValidatorForDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalSuperfluidDelegations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalSuperfluidDelegationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalSuperfluidDelegations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.superfluid.Query/TotalSuperfluidDelegations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalSuperfluidDelegations(ctx, req.(*TotalSuperfluidDelegationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SuperfluidDelegationAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuperfluidDelegationAmountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SuperfluidDelegationAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.superfluid.Query/SuperfluidDelegationAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SuperfluidDelegationAmount(ctx, req.(*SuperfluidDelegationAmountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SuperfluidDelegationsByDelegator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuperfluidDelegationsByDelegatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SuperfluidDelegationsByDelegator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.superfluid.Query/SuperfluidDelegationsByDelegator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SuperfluidDelegationsByDelegator(ctx, req.(*SuperfluidDelegationsByDelegatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SuperfluidUndelegationsByDelegator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuperfluidUndelegationsByDelegatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SuperfluidUndelegationsByDelegator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.superfluid.Query/SuperfluidUndelegationsByDelegator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SuperfluidUndelegationsByDelegator(ctx, req.(*SuperfluidUndelegationsByDelegatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SuperfluidDelegationsByValidatorDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SuperfluidDelegationsByValidatorDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SuperfluidDelegationsByValidatorDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.superfluid.Query/SuperfluidDelegationsByValidatorDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SuperfluidDelegationsByValidatorDenom(ctx, req.(*SuperfluidDelegationsByValidatorDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstimateSuperfluidDelegatedAmountByValidatorDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateSuperfluidDelegatedAmountByValidatorDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstimateSuperfluidDelegatedAmountByValidatorDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.superfluid.Query/EstimateSuperfluidDelegatedAmountByValidatorDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstimateSuperfluidDelegatedAmountByValidatorDenom(ctx, req.(*EstimateSuperfluidDelegatedAmountByValidatorDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalDelegationByDelegator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalDelegationByDelegatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalDelegationByDelegator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.superfluid.Query/TotalDelegationByDelegator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalDelegationByDelegator(ctx, req.(*QueryTotalDelegationByDelegatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UnpoolWhitelist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUnpoolWhitelistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UnpoolWhitelist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.superfluid.Query/UnpoolWhitelist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UnpoolWhitelist(ctx, req.(*QueryUnpoolWhitelistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserConcentratedSuperfluidPositionsDelegated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserConcentratedSuperfluidPositionsDelegatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserConcentratedSuperfluidPositionsDelegated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.superfluid.Query/UserConcentratedSuperfluidPositionsDelegated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserConcentratedSuperfluidPositionsDelegated(ctx, req.(*UserConcentratedSuperfluidPositionsDelegatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserConcentratedSuperfluidPositionsUndelegating_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserConcentratedSuperfluidPositionsUndelegatingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserConcentratedSuperfluidPositionsUndelegating(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.superfluid.Query/UserConcentratedSuperfluidPositionsUndelegating",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserConcentratedSuperfluidPositionsUndelegating(ctx, req.(*UserConcentratedSuperfluidPositionsUndelegatingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RestSupply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRestSupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RestSupply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.superfluid.Query/RestSupply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RestSupply(ctx, req.(*QueryRestSupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "osmosis.superfluid.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "AssetType",
			Handler:    _Query_AssetType_Handler,
		},
		{
			MethodName: "AllAssets",
			Handler:    _Query_AllAssets_Handler,
		},
		{
			MethodName: "AssetMultiplier",
			Handler:    _Query_AssetMultiplier_Handler,
		},
		{
			MethodName: "AllIntermediaryAccounts",
			Handler:    _Query_AllIntermediaryAccounts_Handler,
		},
		{
			MethodName: "ConnectedIntermediaryAccount",
			Handler:    _Query_ConnectedIntermediaryAccount_Handler,
		},
		{
			MethodName: "TotalDelegationByValidatorForDenom",
			Handler:    _Query_TotalDelegationByValidatorForDenom_Handler,
		},
		{
			MethodName: "TotalSuperfluidDelegations",
			Handler:    _Query_TotalSuperfluidDelegations_Handler,
		},
		{
			MethodName: "SuperfluidDelegationAmount",
			Handler:    _Query_SuperfluidDelegationAmount_Handler,
		},
		{
			MethodName: "SuperfluidDelegationsByDelegator",
			Handler:    _Query_SuperfluidDelegationsByDelegator_Handler,
		},
		{
			MethodName: "SuperfluidUndelegationsByDelegator",
			Handler:    _Query_SuperfluidUndelegationsByDelegator_Handler,
		},
		{
			MethodName: "SuperfluidDelegationsByValidatorDenom",
			Handler:    _Query_SuperfluidDelegationsByValidatorDenom_Handler,
		},
		{
			MethodName: "EstimateSuperfluidDelegatedAmountByValidatorDenom",
			Handler:    _Query_EstimateSuperfluidDelegatedAmountByValidatorDenom_Handler,
		},
		{
			MethodName: "TotalDelegationByDelegator",
			Handler:    _Query_TotalDelegationByDelegator_Handler,
		},
		{
			MethodName: "UnpoolWhitelist",
			Handler:    _Query_UnpoolWhitelist_Handler,
		},
		{
			MethodName: "UserConcentratedSuperfluidPositionsDelegated",
			Handler:    _Query_UserConcentratedSuperfluidPositionsDelegated_Handler,
		},
		{
			MethodName: "UserConcentratedSuperfluidPositionsUndelegating",
			Handler:    _Query_UserConcentratedSuperfluidPositionsUndelegating_Handler,
		},
		{
			MethodName: "RestSupply",
			Handler:    _Query_RestSupply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "osmosis/superfluid/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AssetTypeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetTypeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetTypeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AssetTypeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetTypeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetTypeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssetType != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AssetType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AllAssetsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllAssetsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllAssetsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AllAssetsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllAssetsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllAssetsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Assets) > 0 {
		for iNdEx := len(m.Assets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Assets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AssetMultiplierRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetMultiplierRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetMultiplierRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AssetMultiplierResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetMultiplierResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetMultiplierResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.OsmoEquivalentMultiplier != nil {
		{
			size, err := m.OsmoEquivalentMultiplier.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SuperfluidIntermediaryAccountInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuperfluidIntermediaryAccountInfo) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuperfluidIntermediaryAccountInfo) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x22
	}
	if m.GaugeId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.GaugeId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ValAddr) > 0 {
		i -= len(m.ValAddr)
		copy(dAtA[i:], m.ValAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AllIntermediaryAccountsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllIntermediaryAccountsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllIntermediaryAccountsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AllIntermediaryAccountsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllIntermediaryAccountsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllIntermediaryAccountsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Accounts) > 0 {
		for iNdEx := len(m.Accounts) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Accounts[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ConnectedIntermediaryAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectedIntermediaryAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectedIntermediaryAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LockId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LockId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ConnectedIntermediaryAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConnectedIntermediaryAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConnectedIntermediaryAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalDelegationByValidatorForDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalDelegationByValidatorForDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalDelegationByValidatorForDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalDelegationByValidatorForDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalDelegationByValidatorForDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalDelegationByValidatorForDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Assets) > 0 {
		for iNdEx := len(m.Assets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Assets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Delegations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Delegations) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Delegations) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.OsmoEquivalent.Size()
		i -= size
		if _, err := m.OsmoEquivalent.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.AmountSfsd.Size()
		i -= size
		if _, err := m.AmountSfsd.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.ValAddr) > 0 {
		i -= len(m.ValAddr)
		copy(dAtA[i:], m.ValAddr)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValAddr)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TotalSuperfluidDelegationsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TotalSuperfluidDelegationsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TotalSuperfluidDelegationsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TotalSuperfluidDelegationsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TotalSuperfluidDelegationsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TotalSuperfluidDelegationsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TotalDelegations.Size()
		i -= size
		if _, err := m.TotalDelegations.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *SuperfluidDelegationAmountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuperfluidDelegationAmountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuperfluidDelegationAmountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SuperfluidDelegationAmountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuperfluidDelegationAmountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuperfluidDelegationAmountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for iNdEx := len(m.Amount) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Amount[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SuperfluidDelegationsByDelegatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuperfluidDelegationsByDelegatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuperfluidDelegationsByDelegatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SuperfluidDelegationsByDelegatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuperfluidDelegationsByDelegatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuperfluidDelegationsByDelegatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TotalEquivalentStakedAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.TotalDelegatedCoins) > 0 {
		for iNdEx := len(m.TotalDelegatedCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalDelegatedCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SuperfluidDelegationRecords) > 0 {
		for iNdEx := len(m.SuperfluidDelegationRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SuperfluidDelegationRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SuperfluidUndelegationsByDelegatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuperfluidUndelegationsByDelegatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuperfluidUndelegationsByDelegatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SuperfluidUndelegationsByDelegatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuperfluidUndelegationsByDelegatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuperfluidUndelegationsByDelegatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SyntheticLocks) > 0 {
		for iNdEx := len(m.SyntheticLocks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SyntheticLocks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TotalUndelegatedCoins) > 0 {
		for iNdEx := len(m.TotalUndelegatedCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalUndelegatedCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SuperfluidDelegationRecords) > 0 {
		for iNdEx := len(m.SuperfluidDelegationRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SuperfluidDelegationRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SuperfluidDelegationsByValidatorDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuperfluidDelegationsByValidatorDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuperfluidDelegationsByValidatorDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SuperfluidDelegationsByValidatorDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuperfluidDelegationsByValidatorDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuperfluidDelegationsByValidatorDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SuperfluidDelegationRecords) > 0 {
		for iNdEx := len(m.SuperfluidDelegationRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SuperfluidDelegationRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EstimateSuperfluidDelegatedAmountByValidatorDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstimateSuperfluidDelegatedAmountByValidatorDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstimateSuperfluidDelegatedAmountByValidatorDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EstimateSuperfluidDelegatedAmountByValidatorDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstimateSuperfluidDelegatedAmountByValidatorDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstimateSuperfluidDelegatedAmountByValidatorDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TotalDelegatedCoins) > 0 {
		for iNdEx := len(m.TotalDelegatedCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalDelegatedCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalDelegationByDelegatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalDelegationByDelegatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalDelegationByDelegatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTotalDelegationByDelegatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTotalDelegationByDelegatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTotalDelegationByDelegatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TotalEquivalentStakedAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if len(m.TotalDelegatedCoins) > 0 {
		for iNdEx := len(m.TotalDelegatedCoins) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TotalDelegatedCoins[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.DelegationResponse) > 0 {
		for iNdEx := len(m.DelegationResponse) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DelegationResponse[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SuperfluidDelegationRecords) > 0 {
		for iNdEx := len(m.SuperfluidDelegationRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SuperfluidDelegationRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryUnpoolWhitelistRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnpoolWhitelistRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnpoolWhitelistRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryUnpoolWhitelistResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUnpoolWhitelistResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUnpoolWhitelistResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolIds) > 0 {
		dAtA9 := make([]byte, len(m.PoolIds)*10)
		var j8 int
		for _, num := range m.PoolIds {
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintQuery(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserConcentratedSuperfluidPositionsDelegatedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserConcentratedSuperfluidPositionsDelegatedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserConcentratedSuperfluidPositionsDelegatedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserConcentratedSuperfluidPositionsDelegatedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserConcentratedSuperfluidPositionsDelegatedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserConcentratedSuperfluidPositionsDelegatedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClPoolUserPositionRecords) > 0 {
		for iNdEx := len(m.ClPoolUserPositionRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClPoolUserPositionRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *UserConcentratedSuperfluidPositionsUndelegatingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserConcentratedSuperfluidPositionsUndelegatingRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserConcentratedSuperfluidPositionsUndelegatingRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserConcentratedSuperfluidPositionsUndelegatingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserConcentratedSuperfluidPositionsUndelegatingResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserConcentratedSuperfluidPositionsUndelegatingResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClPoolUserPositionRecords) > 0 {
		for iNdEx := len(m.ClPoolUserPositionRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClPoolUserPositionRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryRestSupplyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRestSupplyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRestSupplyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRestSupplyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRestSupplyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRestSupplyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *AssetTypeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *AssetTypeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AssetType != 0 {
		n += 1 + sovQuery(uint64(m.AssetType))
	}
	return n
}

func (m *AllAssetsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AllAssetsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Assets) > 0 {
		for _, e := range m.Assets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *AssetMultiplierRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *AssetMultiplierResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.OsmoEquivalentMultiplier != nil {
		l = m.OsmoEquivalentMultiplier.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *SuperfluidIntermediaryAccountInfo) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ValAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.GaugeId != 0 {
		n += 1 + sovQuery(uint64(m.GaugeId))
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *AllIntermediaryAccountsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *AllIntermediaryAccountsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Accounts) > 0 {
		for _, e := range m.Accounts {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ConnectedIntermediaryAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LockId != 0 {
		n += 1 + sovQuery(uint64(m.LockId))
	}
	return n
}

func (m *ConnectedIntermediaryAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTotalDelegationByValidatorForDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTotalDelegationByValidatorForDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Assets) > 0 {
		for _, e := range m.Assets {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *Delegations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValAddr)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = m.AmountSfsd.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.OsmoEquivalent.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *TotalSuperfluidDelegationsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TotalSuperfluidDelegationsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TotalDelegations.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *SuperfluidDelegationAmountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *SuperfluidDelegationAmountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Amount) > 0 {
		for _, e := range m.Amount {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *SuperfluidDelegationsByDelegatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *SuperfluidDelegationsByDelegatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SuperfluidDelegationRecords) > 0 {
		for _, e := range m.SuperfluidDelegationRecords {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.TotalDelegatedCoins) > 0 {
		for _, e := range m.TotalDelegatedCoins {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = m.TotalEquivalentStakedAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *SuperfluidUndelegationsByDelegatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *SuperfluidUndelegationsByDelegatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SuperfluidDelegationRecords) > 0 {
		for _, e := range m.SuperfluidDelegationRecords {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.TotalUndelegatedCoins) > 0 {
		for _, e := range m.TotalUndelegatedCoins {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.SyntheticLocks) > 0 {
		for _, e := range m.SyntheticLocks {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *SuperfluidDelegationsByValidatorDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *SuperfluidDelegationsByValidatorDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SuperfluidDelegationRecords) > 0 {
		for _, e := range m.SuperfluidDelegationRecords {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *EstimateSuperfluidDelegatedAmountByValidatorDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *EstimateSuperfluidDelegatedAmountByValidatorDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TotalDelegatedCoins) > 0 {
		for _, e := range m.TotalDelegatedCoins {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryTotalDelegationByDelegatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryTotalDelegationByDelegatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SuperfluidDelegationRecords) > 0 {
		for _, e := range m.SuperfluidDelegationRecords {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.DelegationResponse) > 0 {
		for _, e := range m.DelegationResponse {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.TotalDelegatedCoins) > 0 {
		for _, e := range m.TotalDelegatedCoins {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = m.TotalEquivalentStakedAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryUnpoolWhitelistRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryUnpoolWhitelistResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PoolIds) > 0 {
		l = 0
		for _, e := range m.PoolIds {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func (m *UserConcentratedSuperfluidPositionsDelegatedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *UserConcentratedSuperfluidPositionsDelegatedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ClPoolUserPositionRecords) > 0 {
		for _, e := range m.ClPoolUserPositionRecords {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *UserConcentratedSuperfluidPositionsUndelegatingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *UserConcentratedSuperfluidPositionsUndelegatingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ClPoolUserPositionRecords) > 0 {
		for _, e := range m.ClPoolUserPositionRecords {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryRestSupplyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryRestSupplyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetTypeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetTypeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetTypeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetTypeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetTypeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetTypeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetType", wireType)
			}
			m.AssetType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetType |= SuperfluidAssetType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllAssetsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllAssetsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllAssetsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllAssetsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllAssetsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllAssetsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assets = append(m.Assets, SuperfluidAsset{})
			if err := m.Assets[len(m.Assets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetMultiplierRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetMultiplierRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetMultiplierRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetMultiplierResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetMultiplierResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetMultiplierResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsmoEquivalentMultiplier", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.OsmoEquivalentMultiplier == nil {
				m.OsmoEquivalentMultiplier = &OsmoEquivalentMultiplierRecord{}
			}
			if err := m.OsmoEquivalentMultiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuperfluidIntermediaryAccountInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuperfluidIntermediaryAccountInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuperfluidIntermediaryAccountInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GaugeId", wireType)
			}
			m.GaugeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GaugeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllIntermediaryAccountsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllIntermediaryAccountsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllIntermediaryAccountsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllIntermediaryAccountsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllIntermediaryAccountsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllIntermediaryAccountsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Accounts", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Accounts = append(m.Accounts, SuperfluidIntermediaryAccountInfo{})
			if err := m.Accounts[len(m.Accounts)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectedIntermediaryAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectedIntermediaryAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectedIntermediaryAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockId", wireType)
			}
			m.LockId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConnectedIntermediaryAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConnectedIntermediaryAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConnectedIntermediaryAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &SuperfluidIntermediaryAccountInfo{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalDelegationByValidatorForDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalDelegationByValidatorForDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalDelegationByValidatorForDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalDelegationByValidatorForDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalDelegationByValidatorForDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalDelegationByValidatorForDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assets = append(m.Assets, Delegations{})
			if err := m.Assets[len(m.Assets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Delegations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Delegations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Delegations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AmountSfsd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AmountSfsd.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsmoEquivalent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OsmoEquivalent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TotalSuperfluidDelegationsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TotalSuperfluidDelegationsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TotalSuperfluidDelegationsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TotalSuperfluidDelegationsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TotalSuperfluidDelegationsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TotalSuperfluidDelegationsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDelegations", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalDelegations.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuperfluidDelegationAmountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuperfluidDelegationAmountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuperfluidDelegationAmountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuperfluidDelegationAmountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuperfluidDelegationAmountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuperfluidDelegationAmountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = append(m.Amount, types.Coin{})
			if err := m.Amount[len(m.Amount)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuperfluidDelegationsByDelegatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuperfluidDelegationsByDelegatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuperfluidDelegationsByDelegatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuperfluidDelegationsByDelegatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuperfluidDelegationsByDelegatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuperfluidDelegationsByDelegatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuperfluidDelegationRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuperfluidDelegationRecords = append(m.SuperfluidDelegationRecords, SuperfluidDelegationRecord{})
			if err := m.SuperfluidDelegationRecords[len(m.SuperfluidDelegationRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDelegatedCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalDelegatedCoins = append(m.TotalDelegatedCoins, types.Coin{})
			if err := m.TotalDelegatedCoins[len(m.TotalDelegatedCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalEquivalentStakedAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalEquivalentStakedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuperfluidUndelegationsByDelegatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuperfluidUndelegationsByDelegatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuperfluidUndelegationsByDelegatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuperfluidUndelegationsByDelegatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuperfluidUndelegationsByDelegatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuperfluidUndelegationsByDelegatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuperfluidDelegationRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuperfluidDelegationRecords = append(m.SuperfluidDelegationRecords, SuperfluidDelegationRecord{})
			if err := m.SuperfluidDelegationRecords[len(m.SuperfluidDelegationRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalUndelegatedCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalUndelegatedCoins = append(m.TotalUndelegatedCoins, types.Coin{})
			if err := m.TotalUndelegatedCoins[len(m.TotalUndelegatedCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyntheticLocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SyntheticLocks = append(m.SyntheticLocks, types1.SyntheticLock{})
			if err := m.SyntheticLocks[len(m.SyntheticLocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuperfluidDelegationsByValidatorDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuperfluidDelegationsByValidatorDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuperfluidDelegationsByValidatorDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuperfluidDelegationsByValidatorDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuperfluidDelegationsByValidatorDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuperfluidDelegationsByValidatorDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuperfluidDelegationRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuperfluidDelegationRecords = append(m.SuperfluidDelegationRecords, SuperfluidDelegationRecord{})
			if err := m.SuperfluidDelegationRecords[len(m.SuperfluidDelegationRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstimateSuperfluidDelegatedAmountByValidatorDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstimateSuperfluidDelegatedAmountByValidatorDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstimateSuperfluidDelegatedAmountByValidatorDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstimateSuperfluidDelegatedAmountByValidatorDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstimateSuperfluidDelegatedAmountByValidatorDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstimateSuperfluidDelegatedAmountByValidatorDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDelegatedCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalDelegatedCoins = append(m.TotalDelegatedCoins, types.Coin{})
			if err := m.TotalDelegatedCoins[len(m.TotalDelegatedCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalDelegationByDelegatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalDelegationByDelegatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalDelegationByDelegatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTotalDelegationByDelegatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTotalDelegationByDelegatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTotalDelegationByDelegatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SuperfluidDelegationRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SuperfluidDelegationRecords = append(m.SuperfluidDelegationRecords, SuperfluidDelegationRecord{})
			if err := m.SuperfluidDelegationRecords[len(m.SuperfluidDelegationRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegationResponse = append(m.DelegationResponse, types2.DelegationResponse{})
			if err := m.DelegationResponse[len(m.DelegationResponse)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDelegatedCoins", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalDelegatedCoins = append(m.TotalDelegatedCoins, types.Coin{})
			if err := m.TotalDelegatedCoins[len(m.TotalDelegatedCoins)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalEquivalentStakedAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalEquivalentStakedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnpoolWhitelistRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnpoolWhitelistRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnpoolWhitelistRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUnpoolWhitelistResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUnpoolWhitelistResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUnpoolWhitelistResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.PoolIds = append(m.PoolIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.PoolIds) == 0 {
					m.PoolIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.PoolIds = append(m.PoolIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserConcentratedSuperfluidPositionsDelegatedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserConcentratedSuperfluidPositionsDelegatedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserConcentratedSuperfluidPositionsDelegatedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserConcentratedSuperfluidPositionsDelegatedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserConcentratedSuperfluidPositionsDelegatedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserConcentratedSuperfluidPositionsDelegatedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClPoolUserPositionRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClPoolUserPositionRecords = append(m.ClPoolUserPositionRecords, ConcentratedPoolUserPositionRecord{})
			if err := m.ClPoolUserPositionRecords[len(m.ClPoolUserPositionRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserConcentratedSuperfluidPositionsUndelegatingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserConcentratedSuperfluidPositionsUndelegatingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserConcentratedSuperfluidPositionsUndelegatingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserConcentratedSuperfluidPositionsUndelegatingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserConcentratedSuperfluidPositionsUndelegatingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserConcentratedSuperfluidPositionsUndelegatingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClPoolUserPositionRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClPoolUserPositionRecords = append(m.ClPoolUserPositionRecords, ConcentratedPoolUserPositionRecord{})
			if err := m.ClPoolUserPositionRecords[len(m.ClPoolUserPositionRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRestSupplyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRestSupplyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRestSupplyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRestSupplyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRestSupplyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRestSupplyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
