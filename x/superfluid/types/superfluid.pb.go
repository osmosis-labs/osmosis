// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/superfluid/superfluid.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	types1 "github.com/osmosis-labs/osmosis/v20/x/lockup/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SuperfluidAssetType indicates whether the superfluid asset is
// a native token, lp share of a pool, or concentrated share of a pool
type SuperfluidAssetType int32

const (
	SuperfluidAssetTypeNative            SuperfluidAssetType = 0
	SuperfluidAssetTypeLPShare           SuperfluidAssetType = 1
	SuperfluidAssetTypeConcentratedShare SuperfluidAssetType = 2
)

var SuperfluidAssetType_name = map[int32]string{
	0: "SuperfluidAssetTypeNative",
	1: "SuperfluidAssetTypeLPShare",
	2: "SuperfluidAssetTypeConcentratedShare",
}

var SuperfluidAssetType_value = map[string]int32{
	"SuperfluidAssetTypeNative":            0,
	"SuperfluidAssetTypeLPShare":           1,
	"SuperfluidAssetTypeConcentratedShare": 2,
}

func (x SuperfluidAssetType) String() string {
	return proto.EnumName(SuperfluidAssetType_name, int32(x))
}

func (SuperfluidAssetType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_79d3c29d82dbb734, []int{0}
}

// SuperfluidAsset stores the pair of superfluid asset type and denom pair
type SuperfluidAsset struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	// AssetType indicates whether the superfluid asset is a native token or an lp
	// share
	AssetType SuperfluidAssetType `protobuf:"varint,2,opt,name=asset_type,json=assetType,proto3,enum=osmosis.superfluid.SuperfluidAssetType" json:"asset_type,omitempty"`
}

func (m *SuperfluidAsset) Reset()         { *m = SuperfluidAsset{} }
func (m *SuperfluidAsset) String() string { return proto.CompactTextString(m) }
func (*SuperfluidAsset) ProtoMessage()    {}
func (*SuperfluidAsset) Descriptor() ([]byte, []int) {
	return fileDescriptor_79d3c29d82dbb734, []int{0}
}
func (m *SuperfluidAsset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuperfluidAsset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuperfluidAsset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuperfluidAsset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuperfluidAsset.Merge(m, src)
}
func (m *SuperfluidAsset) XXX_Size() int {
	return m.Size()
}
func (m *SuperfluidAsset) XXX_DiscardUnknown() {
	xxx_messageInfo_SuperfluidAsset.DiscardUnknown(m)
}

var xxx_messageInfo_SuperfluidAsset proto.InternalMessageInfo

// SuperfluidIntermediaryAccount takes the role of intermediary between LP token
// and OSMO tokens for superfluid staking. The intermediary account is the
// actual account responsible for delegation, not the validator account itself.
type SuperfluidIntermediaryAccount struct {
	// Denom indicates the denom of the superfluid asset.
	Denom   string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
	ValAddr string `protobuf:"bytes,2,opt,name=val_addr,json=valAddr,proto3" json:"val_addr,omitempty"`
	// perpetual gauge for rewards distribution
	GaugeId uint64 `protobuf:"varint,3,opt,name=gauge_id,json=gaugeId,proto3" json:"gauge_id,omitempty"`
}

func (m *SuperfluidIntermediaryAccount) Reset()         { *m = SuperfluidIntermediaryAccount{} }
func (m *SuperfluidIntermediaryAccount) String() string { return proto.CompactTextString(m) }
func (*SuperfluidIntermediaryAccount) ProtoMessage()    {}
func (*SuperfluidIntermediaryAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_79d3c29d82dbb734, []int{1}
}
func (m *SuperfluidIntermediaryAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuperfluidIntermediaryAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuperfluidIntermediaryAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuperfluidIntermediaryAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuperfluidIntermediaryAccount.Merge(m, src)
}
func (m *SuperfluidIntermediaryAccount) XXX_Size() int {
	return m.Size()
}
func (m *SuperfluidIntermediaryAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_SuperfluidIntermediaryAccount.DiscardUnknown(m)
}

var xxx_messageInfo_SuperfluidIntermediaryAccount proto.InternalMessageInfo

func (m *SuperfluidIntermediaryAccount) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *SuperfluidIntermediaryAccount) GetValAddr() string {
	if m != nil {
		return m.ValAddr
	}
	return ""
}

func (m *SuperfluidIntermediaryAccount) GetGaugeId() uint64 {
	if m != nil {
		return m.GaugeId
	}
	return 0
}

// The Osmo-Equivalent-Multiplier Record for epoch N refers to the osmo worth we
// treat an LP share as having, for all of epoch N. Eventually this is intended
// to be set as the Time-weighted-average-osmo-backing for the entire duration
// of epoch N-1. (Thereby locking whats in use for epoch N as based on the prior
// epochs rewards) However for now, this is not the TWAP but instead the spot
// price at the boundary. For different types of assets in the future, it could
// change.
type OsmoEquivalentMultiplierRecord struct {
	EpochNumber int64 `protobuf:"varint,1,opt,name=epoch_number,json=epochNumber,proto3" json:"epoch_number,omitempty"`
	// superfluid asset denom, can be LP token or native token
	Denom      string                      `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty"`
	Multiplier cosmossdk_io_math.LegacyDec `protobuf:"bytes,3,opt,name=multiplier,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"multiplier" yaml:"multiplier"`
}

func (m *OsmoEquivalentMultiplierRecord) Reset()         { *m = OsmoEquivalentMultiplierRecord{} }
func (m *OsmoEquivalentMultiplierRecord) String() string { return proto.CompactTextString(m) }
func (*OsmoEquivalentMultiplierRecord) ProtoMessage()    {}
func (*OsmoEquivalentMultiplierRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_79d3c29d82dbb734, []int{2}
}
func (m *OsmoEquivalentMultiplierRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *OsmoEquivalentMultiplierRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_OsmoEquivalentMultiplierRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *OsmoEquivalentMultiplierRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_OsmoEquivalentMultiplierRecord.Merge(m, src)
}
func (m *OsmoEquivalentMultiplierRecord) XXX_Size() int {
	return m.Size()
}
func (m *OsmoEquivalentMultiplierRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_OsmoEquivalentMultiplierRecord.DiscardUnknown(m)
}

var xxx_messageInfo_OsmoEquivalentMultiplierRecord proto.InternalMessageInfo

func (m *OsmoEquivalentMultiplierRecord) GetEpochNumber() int64 {
	if m != nil {
		return m.EpochNumber
	}
	return 0
}

func (m *OsmoEquivalentMultiplierRecord) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// SuperfluidDelegationRecord is a struct used to indicate superfluid
// delegations of an account in the state machine in a user friendly form.
type SuperfluidDelegationRecord struct {
	DelegatorAddress       string      `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty"`
	ValidatorAddress       string      `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	DelegationAmount       types.Coin  `protobuf:"bytes,3,opt,name=delegation_amount,json=delegationAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"delegation_amount"`
	EquivalentStakedAmount *types.Coin `protobuf:"bytes,4,opt,name=equivalent_staked_amount,json=equivalentStakedAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"equivalent_staked_amount,omitempty"`
}

func (m *SuperfluidDelegationRecord) Reset()         { *m = SuperfluidDelegationRecord{} }
func (m *SuperfluidDelegationRecord) String() string { return proto.CompactTextString(m) }
func (*SuperfluidDelegationRecord) ProtoMessage()    {}
func (*SuperfluidDelegationRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_79d3c29d82dbb734, []int{3}
}
func (m *SuperfluidDelegationRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SuperfluidDelegationRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SuperfluidDelegationRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SuperfluidDelegationRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SuperfluidDelegationRecord.Merge(m, src)
}
func (m *SuperfluidDelegationRecord) XXX_Size() int {
	return m.Size()
}
func (m *SuperfluidDelegationRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_SuperfluidDelegationRecord.DiscardUnknown(m)
}

var xxx_messageInfo_SuperfluidDelegationRecord proto.InternalMessageInfo

func (m *SuperfluidDelegationRecord) GetDelegatorAddress() string {
	if m != nil {
		return m.DelegatorAddress
	}
	return ""
}

func (m *SuperfluidDelegationRecord) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *SuperfluidDelegationRecord) GetDelegationAmount() types.Coin {
	if m != nil {
		return m.DelegationAmount
	}
	return types.Coin{}
}

func (m *SuperfluidDelegationRecord) GetEquivalentStakedAmount() *types.Coin {
	if m != nil {
		return m.EquivalentStakedAmount
	}
	return nil
}

// LockIdIntermediaryAccountConnection is a struct used to indicate the
// relationship between the underlying lock id and superfluid delegation done
// via lp shares.
type LockIdIntermediaryAccountConnection struct {
	LockId              uint64 `protobuf:"varint,1,opt,name=lock_id,json=lockId,proto3" json:"lock_id,omitempty"`
	IntermediaryAccount string `protobuf:"bytes,2,opt,name=intermediary_account,json=intermediaryAccount,proto3" json:"intermediary_account,omitempty"`
}

func (m *LockIdIntermediaryAccountConnection) Reset()         { *m = LockIdIntermediaryAccountConnection{} }
func (m *LockIdIntermediaryAccountConnection) String() string { return proto.CompactTextString(m) }
func (*LockIdIntermediaryAccountConnection) ProtoMessage()    {}
func (*LockIdIntermediaryAccountConnection) Descriptor() ([]byte, []int) {
	return fileDescriptor_79d3c29d82dbb734, []int{4}
}
func (m *LockIdIntermediaryAccountConnection) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LockIdIntermediaryAccountConnection) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LockIdIntermediaryAccountConnection.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LockIdIntermediaryAccountConnection) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LockIdIntermediaryAccountConnection.Merge(m, src)
}
func (m *LockIdIntermediaryAccountConnection) XXX_Size() int {
	return m.Size()
}
func (m *LockIdIntermediaryAccountConnection) XXX_DiscardUnknown() {
	xxx_messageInfo_LockIdIntermediaryAccountConnection.DiscardUnknown(m)
}

var xxx_messageInfo_LockIdIntermediaryAccountConnection proto.InternalMessageInfo

func (m *LockIdIntermediaryAccountConnection) GetLockId() uint64 {
	if m != nil {
		return m.LockId
	}
	return 0
}

func (m *LockIdIntermediaryAccountConnection) GetIntermediaryAccount() string {
	if m != nil {
		return m.IntermediaryAccount
	}
	return ""
}

type UnpoolWhitelistedPools struct {
	Ids []uint64 `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
}

func (m *UnpoolWhitelistedPools) Reset()         { *m = UnpoolWhitelistedPools{} }
func (m *UnpoolWhitelistedPools) String() string { return proto.CompactTextString(m) }
func (*UnpoolWhitelistedPools) ProtoMessage()    {}
func (*UnpoolWhitelistedPools) Descriptor() ([]byte, []int) {
	return fileDescriptor_79d3c29d82dbb734, []int{5}
}
func (m *UnpoolWhitelistedPools) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UnpoolWhitelistedPools) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UnpoolWhitelistedPools.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UnpoolWhitelistedPools) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnpoolWhitelistedPools.Merge(m, src)
}
func (m *UnpoolWhitelistedPools) XXX_Size() int {
	return m.Size()
}
func (m *UnpoolWhitelistedPools) XXX_DiscardUnknown() {
	xxx_messageInfo_UnpoolWhitelistedPools.DiscardUnknown(m)
}

var xxx_messageInfo_UnpoolWhitelistedPools proto.InternalMessageInfo

func (m *UnpoolWhitelistedPools) GetIds() []uint64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

type ConcentratedPoolUserPositionRecord struct {
	ValidatorAddress       string               `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty"`
	PositionId             uint64               `protobuf:"varint,2,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty"`
	LockId                 uint64               `protobuf:"varint,3,opt,name=lock_id,json=lockId,proto3" json:"lock_id,omitempty"`
	SyntheticLock          types1.SyntheticLock `protobuf:"bytes,4,opt,name=synthetic_lock,json=syntheticLock,proto3" json:"synthetic_lock"`
	DelegationAmount       types.Coin           `protobuf:"bytes,5,opt,name=delegation_amount,json=delegationAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"delegation_amount"`
	EquivalentStakedAmount *types.Coin          `protobuf:"bytes,6,opt,name=equivalent_staked_amount,json=equivalentStakedAmount,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coin" json:"equivalent_staked_amount,omitempty"`
}

func (m *ConcentratedPoolUserPositionRecord) Reset()         { *m = ConcentratedPoolUserPositionRecord{} }
func (m *ConcentratedPoolUserPositionRecord) String() string { return proto.CompactTextString(m) }
func (*ConcentratedPoolUserPositionRecord) ProtoMessage()    {}
func (*ConcentratedPoolUserPositionRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_79d3c29d82dbb734, []int{6}
}
func (m *ConcentratedPoolUserPositionRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConcentratedPoolUserPositionRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConcentratedPoolUserPositionRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConcentratedPoolUserPositionRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConcentratedPoolUserPositionRecord.Merge(m, src)
}
func (m *ConcentratedPoolUserPositionRecord) XXX_Size() int {
	return m.Size()
}
func (m *ConcentratedPoolUserPositionRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_ConcentratedPoolUserPositionRecord.DiscardUnknown(m)
}

var xxx_messageInfo_ConcentratedPoolUserPositionRecord proto.InternalMessageInfo

func (m *ConcentratedPoolUserPositionRecord) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *ConcentratedPoolUserPositionRecord) GetPositionId() uint64 {
	if m != nil {
		return m.PositionId
	}
	return 0
}

func (m *ConcentratedPoolUserPositionRecord) GetLockId() uint64 {
	if m != nil {
		return m.LockId
	}
	return 0
}

func (m *ConcentratedPoolUserPositionRecord) GetSyntheticLock() types1.SyntheticLock {
	if m != nil {
		return m.SyntheticLock
	}
	return types1.SyntheticLock{}
}

func (m *ConcentratedPoolUserPositionRecord) GetDelegationAmount() types.Coin {
	if m != nil {
		return m.DelegationAmount
	}
	return types.Coin{}
}

func (m *ConcentratedPoolUserPositionRecord) GetEquivalentStakedAmount() *types.Coin {
	if m != nil {
		return m.EquivalentStakedAmount
	}
	return nil
}

func init() {
	proto.RegisterEnum("osmosis.superfluid.SuperfluidAssetType", SuperfluidAssetType_name, SuperfluidAssetType_value)
	proto.RegisterType((*SuperfluidAsset)(nil), "osmosis.superfluid.SuperfluidAsset")
	proto.RegisterType((*SuperfluidIntermediaryAccount)(nil), "osmosis.superfluid.SuperfluidIntermediaryAccount")
	proto.RegisterType((*OsmoEquivalentMultiplierRecord)(nil), "osmosis.superfluid.OsmoEquivalentMultiplierRecord")
	proto.RegisterType((*SuperfluidDelegationRecord)(nil), "osmosis.superfluid.SuperfluidDelegationRecord")
	proto.RegisterType((*LockIdIntermediaryAccountConnection)(nil), "osmosis.superfluid.LockIdIntermediaryAccountConnection")
	proto.RegisterType((*UnpoolWhitelistedPools)(nil), "osmosis.superfluid.UnpoolWhitelistedPools")
	proto.RegisterType((*ConcentratedPoolUserPositionRecord)(nil), "osmosis.superfluid.ConcentratedPoolUserPositionRecord")
}

func init() {
	proto.RegisterFile("osmosis/superfluid/superfluid.proto", fileDescriptor_79d3c29d82dbb734)
}

var fileDescriptor_79d3c29d82dbb734 = []byte{
	// 831 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xc4, 0x55, 0xcf, 0x6f, 0x1b, 0x45,
	0x14, 0xf6, 0xda, 0x6e, 0xd2, 0x4c, 0xa0, 0xb8, 0xdb, 0xa8, 0x24, 0x41, 0xd9, 0x0d, 0x5b, 0xa4,
	0x5a, 0xad, 0xba, 0x4b, 0x82, 0x84, 0x50, 0x6f, 0x4e, 0x0a, 0x92, 0x51, 0x28, 0xd6, 0x9a, 0x0a,
	0xc4, 0x65, 0x35, 0xde, 0x79, 0x5d, 0x8f, 0x3c, 0xbb, 0xb3, 0xdd, 0x99, 0x35, 0xf8, 0xc6, 0x81,
	0x43, 0x8f, 0xfc, 0x09, 0x95, 0xb8, 0x71, 0xe5, 0x9f, 0xe8, 0xb1, 0x12, 0x17, 0xc4, 0x21, 0xa0,
	0xe4, 0xc2, 0xb9, 0x7f, 0x01, 0x9a, 0xd9, 0x1f, 0xde, 0x34, 0xae, 0x10, 0x17, 0x7a, 0xf2, 0xcc,
	0xfb, 0xde, 0xbc, 0xf7, 0x7d, 0xf3, 0x3e, 0xcf, 0xa2, 0x5b, 0x5c, 0xc4, 0x5c, 0x50, 0xe1, 0x89,
	0x3c, 0x85, 0xec, 0x31, 0xcb, 0x29, 0x69, 0x2c, 0xdd, 0x34, 0xe3, 0x92, 0x9b, 0x66, 0x99, 0xe4,
	0x2e, 0x91, 0xdd, 0xad, 0x88, 0x47, 0x5c, 0xc3, 0x9e, 0x5a, 0x15, 0x99, 0xbb, 0x56, 0xc4, 0x79,
	0xc4, 0xc0, 0xd3, 0xbb, 0x49, 0xfe, 0xd8, 0x23, 0x79, 0x86, 0x25, 0xe5, 0x49, 0x89, 0xdb, 0xaf,
	0xe2, 0x92, 0xc6, 0x20, 0x24, 0x8e, 0xd3, 0xaa, 0x40, 0xa8, 0x7b, 0x79, 0x13, 0x2c, 0xc0, 0x9b,
	0x1f, 0x4c, 0x40, 0xe2, 0x03, 0x2f, 0xe4, 0xb4, 0x2a, 0xb0, 0x53, 0xf1, 0x65, 0x3c, 0x9c, 0xe5,
	0xa9, 0xfe, 0x29, 0x20, 0x67, 0x81, 0xde, 0x19, 0xd7, 0xfc, 0x06, 0x42, 0x80, 0x34, 0xb7, 0xd0,
	0x15, 0x02, 0x09, 0x8f, 0xb7, 0x8d, 0x7d, 0xa3, 0xbf, 0xe1, 0x17, 0x1b, 0xf3, 0x33, 0x84, 0xb0,
	0x82, 0x03, 0xb9, 0x48, 0x61, 0xbb, 0xbd, 0x6f, 0xf4, 0xaf, 0x1d, 0xde, 0x76, 0x2f, 0x6b, 0x74,
	0x5f, 0x29, 0xf7, 0xd5, 0x22, 0x05, 0x7f, 0x03, 0x57, 0xcb, 0xfb, 0x57, 0x9f, 0x3e, 0xb3, 0x5b,
	0x7f, 0x3f, 0xb3, 0x0d, 0x67, 0x86, 0xf6, 0x96, 0xb9, 0xc3, 0x44, 0x42, 0x16, 0x03, 0xa1, 0x38,
	0x5b, 0x0c, 0xc2, 0x90, 0xe7, 0xc9, 0xeb, 0x88, 0xec, 0xa0, 0xab, 0x73, 0xcc, 0x02, 0x4c, 0x48,
	0xa6, 0x69, 0x6c, 0xf8, 0xeb, 0x73, 0xcc, 0x06, 0x84, 0x64, 0x0a, 0x8a, 0x70, 0x1e, 0x41, 0x40,
	0xc9, 0x76, 0x67, 0xdf, 0xe8, 0x77, 0xfd, 0x75, 0xbd, 0x1f, 0x12, 0xe7, 0x57, 0x03, 0x59, 0x5f,
	0x8a, 0x98, 0x7f, 0xfa, 0x24, 0xa7, 0x73, 0xcc, 0x20, 0x91, 0x5f, 0xe4, 0x4c, 0xd2, 0x94, 0x51,
	0xc8, 0x7c, 0x08, 0x79, 0x46, 0xcc, 0xf7, 0xd1, 0x5b, 0x90, 0xf2, 0x70, 0x1a, 0x24, 0x79, 0x3c,
	0x81, 0x4c, 0x77, 0xed, 0xf8, 0x9b, 0x3a, 0xf6, 0x50, 0x87, 0x96, 0x8c, 0xda, 0x4d, 0x46, 0xdf,
	0x20, 0x14, 0xd7, 0xc5, 0x74, 0xe3, 0x8d, 0xa3, 0x4f, 0x9e, 0x9f, 0xda, 0xad, 0x3f, 0x4e, 0xed,
	0xf7, 0x8a, 0xd1, 0x08, 0x32, 0x73, 0x29, 0xf7, 0x62, 0x2c, 0xa7, 0xee, 0x09, 0x44, 0x38, 0x5c,
	0x3c, 0x80, 0xf0, 0xe5, 0xa9, 0x7d, 0x7d, 0x81, 0x63, 0x76, 0xdf, 0x59, 0x1e, 0x77, 0xfc, 0x46,
	0x2d, 0xe7, 0x65, 0x1b, 0xed, 0x2e, 0xef, 0xe8, 0x01, 0x30, 0x88, 0xb4, 0x31, 0x4a, 0xc6, 0x77,
	0xd1, 0x75, 0x52, 0xc4, 0x78, 0xa6, 0x2f, 0x04, 0x84, 0x28, 0x2f, 0xab, 0x57, 0x03, 0x83, 0x22,
	0xae, 0x92, 0xe7, 0x98, 0x51, 0x72, 0x21, 0xb9, 0xd0, 0xd1, 0xab, 0x81, 0x2a, 0xf9, 0xbb, 0xba,
	0x32, 0xe5, 0x49, 0x80, 0x63, 0x35, 0x0f, 0xad, 0x6c, 0xf3, 0x70, 0xc7, 0x2d, 0x24, 0xb9, 0xca,
	0x6d, 0x6e, 0xe9, 0x36, 0xf7, 0x98, 0xd3, 0xe4, 0xc8, 0x53, 0xa2, 0x7f, 0xf9, 0xd3, 0xbe, 0x1d,
	0x51, 0x39, 0xcd, 0x27, 0x6e, 0xc8, 0x63, 0xaf, 0xb4, 0x66, 0xf1, 0x73, 0x4f, 0x90, 0x99, 0xa7,
	0x0c, 0x24, 0xf4, 0x81, 0x9a, 0x25, 0xe5, 0xc9, 0x40, 0xf7, 0x30, 0x7f, 0x30, 0xd0, 0x36, 0xd4,
	0x33, 0x0a, 0x84, 0xc4, 0x33, 0x20, 0x15, 0x81, 0xee, 0xbf, 0x11, 0xb8, 0xfb, 0x5f, 0x9a, 0xdf,
	0x5c, 0xf6, 0x19, 0xeb, 0x36, 0x05, 0x05, 0xe7, 0x09, 0xba, 0x75, 0xc2, 0xc3, 0xd9, 0x70, 0x95,
	0x27, 0x8f, 0x79, 0x92, 0x40, 0xa8, 0xf8, 0x9a, 0xef, 0xa2, 0x75, 0xf5, 0x3f, 0x52, 0x5e, 0x33,
	0xb4, 0xd7, 0xd6, 0x98, 0x3e, 0x65, 0x1e, 0xa0, 0x2d, 0xda, 0x38, 0x19, 0xe0, 0xe2, 0x68, 0x79,
	0xd7, 0x37, 0xe8, 0xe5, 0xaa, 0xce, 0x1d, 0x74, 0xf3, 0x51, 0x92, 0x72, 0xce, 0xbe, 0x9e, 0x52,
	0x09, 0x8c, 0x0a, 0x09, 0x64, 0xc4, 0x39, 0x13, 0x66, 0x0f, 0x75, 0x28, 0x51, 0x43, 0xed, 0xf4,
	0xbb, 0xbe, 0x5a, 0x3a, 0xbf, 0x75, 0x90, 0x73, 0xcc, 0x93, 0x10, 0x12, 0x99, 0xe1, 0x32, 0xef,
	0x91, 0x80, 0x6c, 0xc4, 0x05, 0xbd, 0xe8, 0x8d, 0xcb, 0xe3, 0x36, 0x5e, 0x33, 0x6e, 0x1b, 0x6d,
	0xa6, 0xe5, 0x71, 0xa5, 0xa7, 0xad, 0xf5, 0xa0, 0x2a, 0x34, 0x24, 0x4d, 0xb1, 0x9d, 0x0b, 0x62,
	0x3f, 0x47, 0xd7, 0xc4, 0x22, 0x91, 0x53, 0x90, 0x34, 0x0c, 0x54, 0xac, 0x1c, 0xd2, 0x5e, 0xfd,
	0x34, 0x14, 0x6f, 0x8e, 0x3b, 0xae, 0xb2, 0xd4, 0xdd, 0x1e, 0x75, 0x95, 0x53, 0xfc, 0xb7, 0x45,
	0x33, 0xb8, 0xda, 0x74, 0x57, 0xde, 0xb4, 0xe9, 0xd6, 0xfe, 0x0f, 0xd3, 0xdd, 0xf9, 0xd1, 0x40,
	0x37, 0x56, 0xbc, 0x9c, 0xe6, 0x1e, 0xda, 0x59, 0x11, 0x7e, 0x88, 0x25, 0x9d, 0x43, 0xaf, 0x65,
	0x5a, 0xcd, 0xf7, 0xa1, 0x86, 0x4f, 0x46, 0xe3, 0x29, 0xce, 0xa0, 0x67, 0x98, 0x7d, 0xf4, 0xc1,
	0x0a, 0xbc, 0x69, 0x9f, 0x22, 0xb3, 0xbd, 0xdb, 0x7d, 0xfa, 0xb3, 0xd5, 0x3a, 0x1a, 0x3d, 0x3f,
	0xb3, 0x8c, 0x17, 0x67, 0x96, 0xf1, 0xd7, 0x99, 0x65, 0xfc, 0x74, 0x6e, 0xb5, 0x5e, 0x9c, 0x5b,
	0xad, 0xdf, 0xcf, 0xad, 0xd6, 0xb7, 0x1f, 0x37, 0x14, 0x96, 0xa3, 0xbd, 0xc7, 0xf0, 0x44, 0x54,
	0x1b, 0x6f, 0x7e, 0xf8, 0xa1, 0xf7, 0x7d, 0xf3, 0x8b, 0xa8, 0x55, 0x4f, 0xd6, 0xf4, 0x77, 0xe6,
	0xa3, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xae, 0xb1, 0x4e, 0xd0, 0x34, 0x07, 0x00, 0x00,
}

func (this *SuperfluidAsset) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SuperfluidAsset)
	if !ok {
		that2, ok := that.(SuperfluidAsset)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Denom != that1.Denom {
		return false
	}
	if this.AssetType != that1.AssetType {
		return false
	}
	return true
}
func (m *SuperfluidAsset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuperfluidAsset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuperfluidAsset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AssetType != 0 {
		i = encodeVarintSuperfluid(dAtA, i, uint64(m.AssetType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintSuperfluid(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SuperfluidIntermediaryAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuperfluidIntermediaryAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuperfluidIntermediaryAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.GaugeId != 0 {
		i = encodeVarintSuperfluid(dAtA, i, uint64(m.GaugeId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ValAddr) > 0 {
		i -= len(m.ValAddr)
		copy(dAtA[i:], m.ValAddr)
		i = encodeVarintSuperfluid(dAtA, i, uint64(len(m.ValAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintSuperfluid(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *OsmoEquivalentMultiplierRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *OsmoEquivalentMultiplierRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *OsmoEquivalentMultiplierRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Multiplier.Size()
		i -= size
		if _, err := m.Multiplier.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSuperfluid(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintSuperfluid(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if m.EpochNumber != 0 {
		i = encodeVarintSuperfluid(dAtA, i, uint64(m.EpochNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SuperfluidDelegationRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SuperfluidDelegationRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SuperfluidDelegationRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EquivalentStakedAmount != nil {
		{
			size, err := m.EquivalentStakedAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSuperfluid(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	{
		size, err := m.DelegationAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSuperfluid(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintSuperfluid(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintSuperfluid(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LockIdIntermediaryAccountConnection) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LockIdIntermediaryAccountConnection) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LockIdIntermediaryAccountConnection) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IntermediaryAccount) > 0 {
		i -= len(m.IntermediaryAccount)
		copy(dAtA[i:], m.IntermediaryAccount)
		i = encodeVarintSuperfluid(dAtA, i, uint64(len(m.IntermediaryAccount)))
		i--
		dAtA[i] = 0x12
	}
	if m.LockId != 0 {
		i = encodeVarintSuperfluid(dAtA, i, uint64(m.LockId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UnpoolWhitelistedPools) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UnpoolWhitelistedPools) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UnpoolWhitelistedPools) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ids) > 0 {
		dAtA4 := make([]byte, len(m.Ids)*10)
		var j3 int
		for _, num := range m.Ids {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintSuperfluid(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConcentratedPoolUserPositionRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConcentratedPoolUserPositionRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConcentratedPoolUserPositionRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EquivalentStakedAmount != nil {
		{
			size, err := m.EquivalentStakedAmount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSuperfluid(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	{
		size, err := m.DelegationAmount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSuperfluid(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.SyntheticLock.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintSuperfluid(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.LockId != 0 {
		i = encodeVarintSuperfluid(dAtA, i, uint64(m.LockId))
		i--
		dAtA[i] = 0x18
	}
	if m.PositionId != 0 {
		i = encodeVarintSuperfluid(dAtA, i, uint64(m.PositionId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintSuperfluid(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSuperfluid(dAtA []byte, offset int, v uint64) int {
	offset -= sovSuperfluid(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SuperfluidAsset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovSuperfluid(uint64(l))
	}
	if m.AssetType != 0 {
		n += 1 + sovSuperfluid(uint64(m.AssetType))
	}
	return n
}

func (m *SuperfluidIntermediaryAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovSuperfluid(uint64(l))
	}
	l = len(m.ValAddr)
	if l > 0 {
		n += 1 + l + sovSuperfluid(uint64(l))
	}
	if m.GaugeId != 0 {
		n += 1 + sovSuperfluid(uint64(m.GaugeId))
	}
	return n
}

func (m *OsmoEquivalentMultiplierRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EpochNumber != 0 {
		n += 1 + sovSuperfluid(uint64(m.EpochNumber))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovSuperfluid(uint64(l))
	}
	l = m.Multiplier.Size()
	n += 1 + l + sovSuperfluid(uint64(l))
	return n
}

func (m *SuperfluidDelegationRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovSuperfluid(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovSuperfluid(uint64(l))
	}
	l = m.DelegationAmount.Size()
	n += 1 + l + sovSuperfluid(uint64(l))
	if m.EquivalentStakedAmount != nil {
		l = m.EquivalentStakedAmount.Size()
		n += 1 + l + sovSuperfluid(uint64(l))
	}
	return n
}

func (m *LockIdIntermediaryAccountConnection) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LockId != 0 {
		n += 1 + sovSuperfluid(uint64(m.LockId))
	}
	l = len(m.IntermediaryAccount)
	if l > 0 {
		n += 1 + l + sovSuperfluid(uint64(l))
	}
	return n
}

func (m *UnpoolWhitelistedPools) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ids) > 0 {
		l = 0
		for _, e := range m.Ids {
			l += sovSuperfluid(uint64(e))
		}
		n += 1 + sovSuperfluid(uint64(l)) + l
	}
	return n
}

func (m *ConcentratedPoolUserPositionRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovSuperfluid(uint64(l))
	}
	if m.PositionId != 0 {
		n += 1 + sovSuperfluid(uint64(m.PositionId))
	}
	if m.LockId != 0 {
		n += 1 + sovSuperfluid(uint64(m.LockId))
	}
	l = m.SyntheticLock.Size()
	n += 1 + l + sovSuperfluid(uint64(l))
	l = m.DelegationAmount.Size()
	n += 1 + l + sovSuperfluid(uint64(l))
	if m.EquivalentStakedAmount != nil {
		l = m.EquivalentStakedAmount.Size()
		n += 1 + l + sovSuperfluid(uint64(l))
	}
	return n
}

func sovSuperfluid(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSuperfluid(x uint64) (n int) {
	return sovSuperfluid(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SuperfluidAsset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSuperfluid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuperfluidAsset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuperfluidAsset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperfluid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSuperfluid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSuperfluid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetType", wireType)
			}
			m.AssetType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperfluid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AssetType |= SuperfluidAssetType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSuperfluid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSuperfluid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuperfluidIntermediaryAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSuperfluid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuperfluidIntermediaryAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuperfluidIntermediaryAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperfluid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSuperfluid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSuperfluid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperfluid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSuperfluid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSuperfluid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GaugeId", wireType)
			}
			m.GaugeId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperfluid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GaugeId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSuperfluid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSuperfluid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *OsmoEquivalentMultiplierRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSuperfluid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: OsmoEquivalentMultiplierRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: OsmoEquivalentMultiplierRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EpochNumber", wireType)
			}
			m.EpochNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperfluid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EpochNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperfluid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSuperfluid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSuperfluid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Multiplier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperfluid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSuperfluid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSuperfluid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Multiplier.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSuperfluid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSuperfluid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SuperfluidDelegationRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSuperfluid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SuperfluidDelegationRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SuperfluidDelegationRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperfluid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSuperfluid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSuperfluid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperfluid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSuperfluid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSuperfluid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperfluid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSuperfluid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSuperfluid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegationAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquivalentStakedAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperfluid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSuperfluid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSuperfluid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EquivalentStakedAmount == nil {
				m.EquivalentStakedAmount = &types.Coin{}
			}
			if err := m.EquivalentStakedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSuperfluid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSuperfluid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LockIdIntermediaryAccountConnection) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSuperfluid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LockIdIntermediaryAccountConnection: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LockIdIntermediaryAccountConnection: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockId", wireType)
			}
			m.LockId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperfluid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntermediaryAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperfluid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSuperfluid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSuperfluid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IntermediaryAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSuperfluid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSuperfluid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UnpoolWhitelistedPools) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSuperfluid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UnpoolWhitelistedPools: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UnpoolWhitelistedPools: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSuperfluid
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Ids = append(m.Ids, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSuperfluid
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthSuperfluid
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthSuperfluid
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Ids) == 0 {
					m.Ids = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSuperfluid
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Ids = append(m.Ids, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSuperfluid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSuperfluid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConcentratedPoolUserPositionRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSuperfluid
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConcentratedPoolUserPositionRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConcentratedPoolUserPositionRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperfluid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSuperfluid
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSuperfluid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			m.PositionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperfluid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PositionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockId", wireType)
			}
			m.LockId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperfluid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SyntheticLock", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperfluid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSuperfluid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSuperfluid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SyntheticLock.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegationAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperfluid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSuperfluid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSuperfluid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DelegationAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EquivalentStakedAmount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSuperfluid
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSuperfluid
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSuperfluid
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EquivalentStakedAmount == nil {
				m.EquivalentStakedAmount = &types.Coin{}
			}
			if err := m.EquivalentStakedAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSuperfluid(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSuperfluid
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSuperfluid(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSuperfluid
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSuperfluid
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSuperfluid
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSuperfluid
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSuperfluid
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSuperfluid
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSuperfluid        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSuperfluid          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSuperfluid = fmt.Errorf("proto: unexpected end of group")
)
