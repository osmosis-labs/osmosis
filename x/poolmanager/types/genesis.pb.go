// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/poolmanager/v1beta1/genesis.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params holds parameters for the poolmanager module
type Params struct {
	PoolCreationFee github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=pool_creation_fee,json=poolCreationFee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"pool_creation_fee" yaml:"pool_creation_fee"`
	// taker_fee_params is the container of taker fee parameters.
	TakerFeeParams TakerFeeParams `protobuf:"bytes,2,opt,name=taker_fee_params,json=takerFeeParams,proto3" json:"taker_fee_params" yaml:"taker_fee_params"`
	// authorized_quote_denoms is a list of quote denoms that can be used as
	// token1 when creating a concentrated pool. We limit the quote assets to a
	// small set for the purposes of having convinient price increments stemming
	// from tick to price conversion. These increments are in a human readable
	// magnitude only for token1 as a quote. For limit orders in the future, this
	// will be a desirable property in terms of UX as to allow users to set limit
	// orders at prices in terms of token1 (quote asset) that are easy to reason
	// about.
	AuthorizedQuoteDenoms []string `protobuf:"bytes,3,rep,name=authorized_quote_denoms,json=authorizedQuoteDenoms,proto3" json:"authorized_quote_denoms,omitempty" yaml:"authorized_quote_denoms"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa099d9fbdf68b35, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetPoolCreationFee() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.PoolCreationFee
	}
	return nil
}

func (m *Params) GetTakerFeeParams() TakerFeeParams {
	if m != nil {
		return m.TakerFeeParams
	}
	return TakerFeeParams{}
}

func (m *Params) GetAuthorizedQuoteDenoms() []string {
	if m != nil {
		return m.AuthorizedQuoteDenoms
	}
	return nil
}

// GenesisState defines the poolmanager module's genesis state.
type GenesisState struct {
	// the next_pool_id
	NextPoolId uint64 `protobuf:"varint,1,opt,name=next_pool_id,json=nextPoolId,proto3" json:"next_pool_id,omitempty"`
	// params is the container of poolmanager parameters.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
	// pool_routes is the container of the mappings from pool id to pool type.
	PoolRoutes []ModuleRoute `protobuf:"bytes,3,rep,name=pool_routes,json=poolRoutes,proto3" json:"pool_routes"`
	// KVStore state
	TakerFeesToStakersTracker       *TakerFeesToStakersTracker       `protobuf:"bytes,4,opt,name=taker_fees_to_stakers_tracker,json=takerFeesToStakersTracker,proto3" json:"taker_fees_to_stakers_tracker,omitempty"`
	TakerFeesToCommunityPoolTracker *TakerFeesToCommunityPoolTracker `protobuf:"bytes,5,opt,name=taker_fees_to_community_pool_tracker,json=takerFeesToCommunityPoolTracker,proto3" json:"taker_fees_to_community_pool_tracker,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa099d9fbdf68b35, []int{1}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetNextPoolId() uint64 {
	if m != nil {
		return m.NextPoolId
	}
	return 0
}

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetPoolRoutes() []ModuleRoute {
	if m != nil {
		return m.PoolRoutes
	}
	return nil
}

func (m *GenesisState) GetTakerFeesToStakersTracker() *TakerFeesToStakersTracker {
	if m != nil {
		return m.TakerFeesToStakersTracker
	}
	return nil
}

func (m *GenesisState) GetTakerFeesToCommunityPoolTracker() *TakerFeesToCommunityPoolTracker {
	if m != nil {
		return m.TakerFeesToCommunityPoolTracker
	}
	return nil
}

// TakerFeeParams consolidates the taker fee parameters for the poolmanager.
type TakerFeeParams struct {
	// default_taker_fee is the fee used when creating a new pool that doesn't
	// fall under a custom pool taker fee or stableswap taker fee category.
	DefaultTakerFee cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=default_taker_fee,json=defaultTakerFee,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"default_taker_fee"`
	// osmo_taker_fee_distribution defines the distribution of taker fees
	// generated in OSMO. As of this writing, it has two catagories:
	//   - staking_rewards: the percent of the taker fee that gets distributed to
	//     stakers.
	//   - community_pool: the percent of the taker fee that gets sent to the
	//     community pool.
	OsmoTakerFeeDistribution TakerFeeDistributionPercentage `protobuf:"bytes,2,opt,name=osmo_taker_fee_distribution,json=osmoTakerFeeDistribution,proto3" json:"osmo_taker_fee_distribution"`
	// non_osmo_taker_fee_distribution defines the distribution of taker fees
	// generated in non-OSMO. As of this writing, it has two categories:
	//   - staking_rewards: the percent of the taker fee that gets swapped to OSMO
	//     and then distirbuted to stakers.
	//   - community_pool: the percent of the taker fee that gets sent to the
	//     community pool. Note: If the non-OSMO asset is an authorized_quote_denom,
	//     that denom is sent directly to the community pool. Otherwise, it is
	//     swapped to the community_pool_denom_to_swap_non_whitelisted_assets_to and
	//     then sent to the community pool as that denom.
	NonOsmoTakerFeeDistribution TakerFeeDistributionPercentage `protobuf:"bytes,3,opt,name=non_osmo_taker_fee_distribution,json=nonOsmoTakerFeeDistribution,proto3" json:"non_osmo_taker_fee_distribution"`
	// admin_addresses is a list of addresses that are allowed to set and remove
	// custom taker fees for denom pairs. Governance also has the ability to set
	// and remove custom taker fees for denom pairs, but with the normal
	// governance delay.
	AdminAddresses []string `protobuf:"bytes,4,rep,name=admin_addresses,json=adminAddresses,proto3" json:"admin_addresses,omitempty" yaml:"admin_addresses"`
	// community_pool_denom_to_swap_non_whitelisted_assets_to is the denom that
	// non-whitelisted taker fees will be swapped to before being sent to
	// the community pool.
	CommunityPoolDenomToSwapNonWhitelistedAssetsTo string `protobuf:"bytes,5,opt,name=community_pool_denom_to_swap_non_whitelisted_assets_to,json=communityPoolDenomToSwapNonWhitelistedAssetsTo,proto3" json:"community_pool_denom_to_swap_non_whitelisted_assets_to,omitempty" yaml:"community_pool_denom_to_swap_non_whitelisted_assets_to"`
	// reduced_fee_whitelist is a list of addresses that are
	// allowed to pay a reduce taker fee when performing a swap
	// (i.e. swap without paying the taker fee).
	// It is intended to be used for integrators who meet qualifying factors
	// that are approved by governance.
	// Initially, the taker fee is allowed to be bypassed completely. However
	// In the future, we will charge a reduced taker fee instead of no fee at all.
	ReducedFeeWhitelist []string `protobuf:"bytes,6,rep,name=reduced_fee_whitelist,json=reducedFeeWhitelist,proto3" json:"reduced_fee_whitelist,omitempty" yaml:"reduced_fee_whitelist"`
}

func (m *TakerFeeParams) Reset()         { *m = TakerFeeParams{} }
func (m *TakerFeeParams) String() string { return proto.CompactTextString(m) }
func (*TakerFeeParams) ProtoMessage()    {}
func (*TakerFeeParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa099d9fbdf68b35, []int{2}
}
func (m *TakerFeeParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TakerFeeParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TakerFeeParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TakerFeeParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TakerFeeParams.Merge(m, src)
}
func (m *TakerFeeParams) XXX_Size() int {
	return m.Size()
}
func (m *TakerFeeParams) XXX_DiscardUnknown() {
	xxx_messageInfo_TakerFeeParams.DiscardUnknown(m)
}

var xxx_messageInfo_TakerFeeParams proto.InternalMessageInfo

func (m *TakerFeeParams) GetOsmoTakerFeeDistribution() TakerFeeDistributionPercentage {
	if m != nil {
		return m.OsmoTakerFeeDistribution
	}
	return TakerFeeDistributionPercentage{}
}

func (m *TakerFeeParams) GetNonOsmoTakerFeeDistribution() TakerFeeDistributionPercentage {
	if m != nil {
		return m.NonOsmoTakerFeeDistribution
	}
	return TakerFeeDistributionPercentage{}
}

func (m *TakerFeeParams) GetAdminAddresses() []string {
	if m != nil {
		return m.AdminAddresses
	}
	return nil
}

func (m *TakerFeeParams) GetCommunityPoolDenomToSwapNonWhitelistedAssetsTo() string {
	if m != nil {
		return m.CommunityPoolDenomToSwapNonWhitelistedAssetsTo
	}
	return ""
}

func (m *TakerFeeParams) GetReducedFeeWhitelist() []string {
	if m != nil {
		return m.ReducedFeeWhitelist
	}
	return nil
}

// TakerFeeDistributionPercentage defines what percent of the taker fee category
// gets distributed to the available categories.
type TakerFeeDistributionPercentage struct {
	StakingRewards cosmossdk_io_math.LegacyDec `protobuf:"bytes,1,opt,name=staking_rewards,json=stakingRewards,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"staking_rewards" yaml:"staking_rewards"`
	CommunityPool  cosmossdk_io_math.LegacyDec `protobuf:"bytes,2,opt,name=community_pool,json=communityPool,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"community_pool" yaml:"community_pool"`
}

func (m *TakerFeeDistributionPercentage) Reset()         { *m = TakerFeeDistributionPercentage{} }
func (m *TakerFeeDistributionPercentage) String() string { return proto.CompactTextString(m) }
func (*TakerFeeDistributionPercentage) ProtoMessage()    {}
func (*TakerFeeDistributionPercentage) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa099d9fbdf68b35, []int{3}
}
func (m *TakerFeeDistributionPercentage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TakerFeeDistributionPercentage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TakerFeeDistributionPercentage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TakerFeeDistributionPercentage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TakerFeeDistributionPercentage.Merge(m, src)
}
func (m *TakerFeeDistributionPercentage) XXX_Size() int {
	return m.Size()
}
func (m *TakerFeeDistributionPercentage) XXX_DiscardUnknown() {
	xxx_messageInfo_TakerFeeDistributionPercentage.DiscardUnknown(m)
}

var xxx_messageInfo_TakerFeeDistributionPercentage proto.InternalMessageInfo

type TakerFeesToStakersTracker struct {
	TakerFeesToStakers         github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=taker_fees_to_stakers,json=takerFeesToStakers,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"taker_fees_to_stakers"`
	HeightAccountingStartsFrom uint64                                   `protobuf:"varint,2,opt,name=height_accounting_starts_from,json=heightAccountingStartsFrom,proto3" json:"height_accounting_starts_from,omitempty" yaml:"height_accounting_starts_from"`
}

func (m *TakerFeesToStakersTracker) Reset()         { *m = TakerFeesToStakersTracker{} }
func (m *TakerFeesToStakersTracker) String() string { return proto.CompactTextString(m) }
func (*TakerFeesToStakersTracker) ProtoMessage()    {}
func (*TakerFeesToStakersTracker) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa099d9fbdf68b35, []int{4}
}
func (m *TakerFeesToStakersTracker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TakerFeesToStakersTracker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TakerFeesToStakersTracker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TakerFeesToStakersTracker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TakerFeesToStakersTracker.Merge(m, src)
}
func (m *TakerFeesToStakersTracker) XXX_Size() int {
	return m.Size()
}
func (m *TakerFeesToStakersTracker) XXX_DiscardUnknown() {
	xxx_messageInfo_TakerFeesToStakersTracker.DiscardUnknown(m)
}

var xxx_messageInfo_TakerFeesToStakersTracker proto.InternalMessageInfo

func (m *TakerFeesToStakersTracker) GetTakerFeesToStakers() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.TakerFeesToStakers
	}
	return nil
}

func (m *TakerFeesToStakersTracker) GetHeightAccountingStartsFrom() uint64 {
	if m != nil {
		return m.HeightAccountingStartsFrom
	}
	return 0
}

type TakerFeesToCommunityPoolTracker struct {
	TakerFeesToCommunityPool   github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=taker_fees_to_community_pool,json=takerFeesToCommunityPool,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"taker_fees_to_community_pool"`
	HeightAccountingStartsFrom uint64                                   `protobuf:"varint,2,opt,name=height_accounting_starts_from,json=heightAccountingStartsFrom,proto3" json:"height_accounting_starts_from,omitempty" yaml:"height_accounting_starts_from"`
}

func (m *TakerFeesToCommunityPoolTracker) Reset()         { *m = TakerFeesToCommunityPoolTracker{} }
func (m *TakerFeesToCommunityPoolTracker) String() string { return proto.CompactTextString(m) }
func (*TakerFeesToCommunityPoolTracker) ProtoMessage()    {}
func (*TakerFeesToCommunityPoolTracker) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa099d9fbdf68b35, []int{5}
}
func (m *TakerFeesToCommunityPoolTracker) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TakerFeesToCommunityPoolTracker) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TakerFeesToCommunityPoolTracker.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TakerFeesToCommunityPoolTracker) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TakerFeesToCommunityPoolTracker.Merge(m, src)
}
func (m *TakerFeesToCommunityPoolTracker) XXX_Size() int {
	return m.Size()
}
func (m *TakerFeesToCommunityPoolTracker) XXX_DiscardUnknown() {
	xxx_messageInfo_TakerFeesToCommunityPoolTracker.DiscardUnknown(m)
}

var xxx_messageInfo_TakerFeesToCommunityPoolTracker proto.InternalMessageInfo

func (m *TakerFeesToCommunityPoolTracker) GetTakerFeesToCommunityPool() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.TakerFeesToCommunityPool
	}
	return nil
}

func (m *TakerFeesToCommunityPoolTracker) GetHeightAccountingStartsFrom() uint64 {
	if m != nil {
		return m.HeightAccountingStartsFrom
	}
	return 0
}

func init() {
	proto.RegisterType((*Params)(nil), "osmosis.poolmanager.v1beta1.Params")
	proto.RegisterType((*GenesisState)(nil), "osmosis.poolmanager.v1beta1.GenesisState")
	proto.RegisterType((*TakerFeeParams)(nil), "osmosis.poolmanager.v1beta1.TakerFeeParams")
	proto.RegisterType((*TakerFeeDistributionPercentage)(nil), "osmosis.poolmanager.v1beta1.TakerFeeDistributionPercentage")
	proto.RegisterType((*TakerFeesToStakersTracker)(nil), "osmosis.poolmanager.v1beta1.TakerFeesToStakersTracker")
	proto.RegisterType((*TakerFeesToCommunityPoolTracker)(nil), "osmosis.poolmanager.v1beta1.TakerFeesToCommunityPoolTracker")
}

func init() {
	proto.RegisterFile("osmosis/poolmanager/v1beta1/genesis.proto", fileDescriptor_aa099d9fbdf68b35)
}

var fileDescriptor_aa099d9fbdf68b35 = []byte{
	// 1021 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x56, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0xce, 0x26, 0x21, 0x52, 0x26, 0x25, 0xa1, 0x03, 0xa1, 0x9b, 0xa4, 0xf5, 0x5a, 0xdb, 0x1e,
	0x8c, 0x50, 0x77, 0xdb, 0x20, 0x05, 0x09, 0xda, 0x43, 0x9c, 0x28, 0x08, 0xa9, 0xb4, 0xe9, 0xc6,
	0x12, 0x52, 0x2f, 0xa3, 0xf1, 0xee, 0xf3, 0x7a, 0x65, 0xef, 0x8e, 0xd9, 0x99, 0x4d, 0x62, 0x0e,
	0x9c, 0x91, 0x7a, 0x41, 0xe2, 0xda, 0x33, 0x07, 0x6e, 0xfc, 0x8b, 0x1e, 0x38, 0xf4, 0x88, 0x38,
	0x2c, 0xc8, 0x39, 0x73, 0xf1, 0x2f, 0x40, 0x33, 0xb3, 0xeb, 0xc4, 0x69, 0xec, 0x1a, 0x10, 0x3d,
	0x25, 0xf3, 0xde, 0xfb, 0xbe, 0xf9, 0xde, 0x9b, 0xf7, 0x9e, 0x17, 0x7d, 0xc4, 0x78, 0xcc, 0x78,
	0xc4, 0xdd, 0x1e, 0x63, 0xdd, 0x98, 0x26, 0x34, 0x84, 0xd4, 0x3d, 0xbe, 0xdf, 0x04, 0x41, 0xef,
	0xbb, 0x21, 0x24, 0xc0, 0x23, 0xee, 0xf4, 0x52, 0x26, 0x18, 0xde, 0x2a, 0x42, 0x9d, 0x0b, 0xa1,
	0x4e, 0x11, 0xba, 0xf9, 0x41, 0xc8, 0x42, 0xa6, 0xe2, 0x5c, 0xf9, 0x9f, 0x86, 0x6c, 0x6e, 0x84,
	0x8c, 0x85, 0x5d, 0x70, 0xd5, 0xa9, 0x99, 0xb5, 0x5c, 0x9a, 0xf4, 0x4b, 0x97, 0xaf, 0xe8, 0x88,
	0xc6, 0xe8, 0x43, 0xe1, 0xaa, 0x5c, 0x46, 0x05, 0x59, 0x4a, 0x45, 0xc4, 0x92, 0xd2, 0xaf, 0xa3,
	0xdd, 0x26, 0xe5, 0x30, 0xd2, 0xea, 0xb3, 0xa8, 0xf4, 0x3b, 0xd3, 0x72, 0x8a, 0x59, 0x90, 0x75,
	0x81, 0xa4, 0x2c, 0x13, 0xa0, 0xe3, 0xed, 0xe1, 0x3c, 0x5a, 0x3a, 0xa4, 0x29, 0x8d, 0x39, 0xfe,
	0xd1, 0x40, 0xd7, 0x25, 0x8a, 0xf8, 0x29, 0xa8, 0x2b, 0x49, 0x0b, 0xc0, 0x34, 0xaa, 0x0b, 0xb5,
	0x95, 0xed, 0x0d, 0xa7, 0x50, 0x29, 0xef, 0x2d, 0x13, 0x77, 0xf6, 0x58, 0x94, 0xd4, 0x1f, 0xbd,
	0xcc, 0xad, 0xb9, 0x61, 0x6e, 0x99, 0x7d, 0x1a, 0x77, 0x3f, 0xb3, 0x5f, 0x63, 0xb0, 0x7f, 0xfe,
	0xc3, 0xaa, 0x85, 0x91, 0x68, 0x67, 0x4d, 0xc7, 0x67, 0x71, 0x91, 0x6e, 0xf1, 0xe7, 0x2e, 0x0f,
	0x3a, 0xae, 0xe8, 0xf7, 0x80, 0x2b, 0x32, 0xee, 0xad, 0x49, 0xfc, 0x5e, 0x01, 0x3f, 0x00, 0xc0,
	0xc7, 0xe8, 0x3d, 0x41, 0x3b, 0x90, 0x4a, 0x2a, 0xd2, 0x53, 0x4a, 0xcd, 0xf9, 0xaa, 0x51, 0x5b,
	0xd9, 0xfe, 0xd8, 0x99, 0xf2, 0x28, 0x4e, 0x43, 0x82, 0x0e, 0x00, 0x74, 0x72, 0x75, 0xab, 0x50,
	0x79, 0x43, 0xab, 0xbc, 0x4c, 0x69, 0x7b, 0xab, 0x62, 0x0c, 0x80, 0x9f, 0xa1, 0x1b, 0x34, 0x13,
	0x6d, 0x96, 0x46, 0xdf, 0x42, 0x40, 0xbe, 0xc9, 0x98, 0x00, 0x12, 0x40, 0xc2, 0x62, 0x6e, 0x2e,
	0x54, 0x17, 0x6a, 0xcb, 0x75, 0x7b, 0x98, 0x5b, 0x15, 0xcd, 0x36, 0x21, 0xd0, 0xf6, 0xd6, 0xcf,
	0x3d, 0x4f, 0xa5, 0x63, 0x5f, 0xdb, 0x7f, 0x5d, 0x40, 0xd7, 0xbe, 0xd0, 0xfd, 0x75, 0x24, 0xa8,
	0x00, 0x5c, 0x45, 0xd7, 0x12, 0x38, 0x15, 0x44, 0x15, 0x2f, 0x0a, 0x4c, 0xa3, 0x6a, 0xd4, 0x16,
	0x3d, 0x24, 0x6d, 0x87, 0x8c, 0x75, 0xbf, 0x0c, 0xf0, 0x2e, 0x5a, 0x1a, 0x4b, 0xfe, 0xf6, 0xd4,
	0xe4, 0x8b, 0xa4, 0x17, 0x65, 0xd2, 0x5e, 0x01, 0xc4, 0x4f, 0xd0, 0x8a, 0xe2, 0x57, 0xcf, 0xaf,
	0xb3, 0x58, 0xd9, 0xae, 0x4d, 0xe5, 0xf9, 0x4a, 0x35, 0x8c, 0x27, 0x01, 0x05, 0x19, 0x92, 0x61,
	0xca, 0xc0, 0xf1, 0x29, 0xba, 0x35, 0xaa, 0x23, 0x27, 0x82, 0x11, 0xae, 0x8e, 0x9c, 0x88, 0x94,
	0xfa, 0x1d, 0x48, 0xcd, 0x45, 0x25, 0x75, 0x67, 0xa6, 0x77, 0xe2, 0x0d, 0x76, 0xa4, 0xe1, 0x0d,
	0x8d, 0xf6, 0x36, 0xc4, 0x24, 0x17, 0x7e, 0x6e, 0xa0, 0x3b, 0xe3, 0x57, 0xfb, 0x2c, 0x8e, 0xb3,
	0x24, 0x12, 0x7d, 0x5d, 0xc3, 0x52, 0xc1, 0x3b, 0x4a, 0xc1, 0x83, 0x59, 0x15, 0xec, 0x95, 0x2c,
	0xb2, 0xea, 0xa5, 0x0e, 0x4b, 0x4c, 0x0f, 0xb0, 0x9f, 0x2f, 0xa1, 0xd5, 0xf1, 0x76, 0xc3, 0x4d,
	0x74, 0x3d, 0x80, 0x16, 0xcd, 0xba, 0x82, 0x8c, 0x74, 0xaa, 0x57, 0x5d, 0xae, 0xef, 0xc8, 0x3a,
	0xfe, 0x9e, 0x5b, 0x5b, 0x7a, 0x02, 0x78, 0xd0, 0x71, 0x22, 0xe6, 0xc6, 0x54, 0xb4, 0x9d, 0x47,
	0x10, 0x52, 0xbf, 0xbf, 0x0f, 0xfe, 0x20, 0xb7, 0xd6, 0xf6, 0x35, 0xbe, 0x24, 0xf6, 0xd6, 0x82,
	0x71, 0x03, 0x7e, 0x61, 0x20, 0xb5, 0x96, 0xce, 0x6f, 0x20, 0x41, 0xc4, 0x45, 0x1a, 0x35, 0x33,
	0x39, 0x3c, 0x45, 0xa3, 0x7c, 0x3e, 0x53, 0xee, 0xfb, 0x17, 0x80, 0x87, 0x90, 0xfa, 0x90, 0x08,
	0x1a, 0x42, 0xbd, 0x2a, 0xb5, 0x0e, 0x72, 0xcb, 0x7c, 0xc2, 0x63, 0x76, 0x55, 0xac, 0x67, 0xb2,
	0x09, 0x1e, 0xfc, 0x93, 0x81, 0xac, 0x84, 0x25, 0x64, 0x9a, 0xc4, 0x85, 0xff, 0x2e, 0xf1, 0x76,
	0x21, 0x71, 0xeb, 0x31, 0x4b, 0x26, 0xaa, 0xdc, 0x4a, 0x26, 0x3b, 0xf1, 0x1e, 0x5a, 0xa3, 0x41,
	0x1c, 0x25, 0x84, 0x06, 0x41, 0x0a, 0x9c, 0x03, 0x37, 0x17, 0xd5, 0x84, 0x6f, 0x0e, 0x73, 0xeb,
	0xc3, 0x62, 0xc2, 0xc7, 0x03, 0x6c, 0x6f, 0x55, 0x59, 0x76, 0x4b, 0x03, 0xfe, 0xc5, 0x40, 0x3b,
	0x97, 0x7a, 0x50, 0x2d, 0x01, 0x35, 0x16, 0x27, 0xb4, 0x47, 0x64, 0x29, 0x4e, 0xda, 0x91, 0x80,
	0x6e, 0xc4, 0x05, 0x04, 0x84, 0x72, 0x0e, 0x42, 0xb6, 0xae, 0xea, 0xd1, 0xe5, 0xfa, 0xee, 0x30,
	0xb7, 0x1e, 0xea, 0xcb, 0xfe, 0x1d, 0x8f, 0xed, 0x39, 0xfe, 0xc5, 0xee, 0x54, 0xbb, 0xa6, 0xc1,
	0x8e, 0x4e, 0x68, 0xef, 0x31, 0x4b, 0xbe, 0x3e, 0x87, 0xec, 0x2a, 0x44, 0x83, 0xe1, 0x06, 0x5a,
	0x4f, 0x21, 0xc8, 0x7c, 0x08, 0xd4, 0xcb, 0x8c, 0x58, 0xcd, 0x25, 0x95, 0x7e, 0x75, 0x98, 0x5b,
	0x37, 0xb5, 0xa2, 0x2b, 0xc3, 0x6c, 0xef, 0xfd, 0xc2, 0x7e, 0x00, 0x30, 0xe2, 0xb7, 0xff, 0x32,
	0x50, 0x65, 0xfa, 0x9b, 0xe1, 0x16, 0x5a, 0x93, 0xab, 0x22, 0x4a, 0x42, 0x92, 0xc2, 0x09, 0x4d,
	0x03, 0x5e, 0xcc, 0xc6, 0xc3, 0x19, 0x66, 0xe3, 0xfc, 0x51, 0x2e, 0x71, 0xd8, 0xde, 0x6a, 0x61,
	0xf1, 0xb4, 0x01, 0xfb, 0x68, 0x75, 0xbc, 0x96, 0x6a, 0x26, 0x96, 0xeb, 0x0f, 0x66, 0xbb, 0x66,
	0xfd, 0xaa, 0xe7, 0xb0, 0xbd, 0x77, 0xc7, 0xca, 0x6c, 0x7f, 0x3f, 0x8f, 0x36, 0x26, 0x2e, 0x31,
	0xfc, 0x1d, 0x5a, 0xbf, 0x72, 0x47, 0xbe, 0xf9, 0x77, 0xf5, 0x9e, 0x14, 0xf9, 0x8f, 0x7e, 0x3b,
	0xf1, 0xeb, 0x0b, 0x13, 0x77, 0xd0, 0xad, 0x36, 0x44, 0x61, 0x5b, 0x10, 0xea, 0xfb, 0x2c, 0x4b,
	0x84, 0x2c, 0x18, 0x17, 0x34, 0x15, 0x9c, 0xb4, 0x52, 0x16, 0xab, 0x8a, 0x2c, 0xd6, 0x6b, 0xc3,
	0xdc, 0xba, 0xa3, 0xd3, 0x9d, 0x1a, 0x6e, 0x7b, 0x9b, 0xda, 0xbf, 0x3b, 0x72, 0x1f, 0x29, 0xef,
	0x81, 0x74, 0xbe, 0x98, 0x47, 0xd6, 0x1b, 0xb6, 0xa9, 0x5c, 0xdd, 0x37, 0xa7, 0xad, 0xee, 0xff,
	0xa3, 0x30, 0xe6, 0xa4, 0x0d, 0xfe, 0x56, 0xcb, 0x53, 0x7f, 0xfa, 0x72, 0x50, 0x31, 0x5e, 0x0d,
	0x2a, 0xc6, 0x9f, 0x83, 0x8a, 0xf1, 0xc3, 0x59, 0x65, 0xee, 0xd5, 0x59, 0x65, 0xee, 0xb7, 0xb3,
	0xca, 0xdc, 0xb3, 0x4f, 0x2f, 0xa4, 0x52, 0xec, 0xc2, 0xbb, 0x5d, 0xda, 0xe4, 0xe5, 0xc1, 0x3d,
	0xde, 0xbe, 0xe7, 0x9e, 0x8e, 0x7d, 0xd3, 0xa9, 0xfc, 0x9a, 0x4b, 0xea, 0x2b, 0xee, 0x93, 0xbf,
	0x03, 0x00, 0x00, 0xff, 0xff, 0xd6, 0x07, 0xe9, 0x1d, 0xcb, 0x0a, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AuthorizedQuoteDenoms) > 0 {
		for iNdEx := len(m.AuthorizedQuoteDenoms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AuthorizedQuoteDenoms[iNdEx])
			copy(dAtA[i:], m.AuthorizedQuoteDenoms[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.AuthorizedQuoteDenoms[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.TakerFeeParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.PoolCreationFee) > 0 {
		for iNdEx := len(m.PoolCreationFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolCreationFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TakerFeesToCommunityPoolTracker != nil {
		{
			size, err := m.TakerFeesToCommunityPoolTracker.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.TakerFeesToStakersTracker != nil {
		{
			size, err := m.TakerFeesToStakersTracker.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.PoolRoutes) > 0 {
		for iNdEx := len(m.PoolRoutes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolRoutes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.NextPoolId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.NextPoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TakerFeeParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TakerFeeParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TakerFeeParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ReducedFeeWhitelist) > 0 {
		for iNdEx := len(m.ReducedFeeWhitelist) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.ReducedFeeWhitelist[iNdEx])
			copy(dAtA[i:], m.ReducedFeeWhitelist[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.ReducedFeeWhitelist[iNdEx])))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.CommunityPoolDenomToSwapNonWhitelistedAssetsTo) > 0 {
		i -= len(m.CommunityPoolDenomToSwapNonWhitelistedAssetsTo)
		copy(dAtA[i:], m.CommunityPoolDenomToSwapNonWhitelistedAssetsTo)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.CommunityPoolDenomToSwapNonWhitelistedAssetsTo)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.AdminAddresses) > 0 {
		for iNdEx := len(m.AdminAddresses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AdminAddresses[iNdEx])
			copy(dAtA[i:], m.AdminAddresses[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.AdminAddresses[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size, err := m.NonOsmoTakerFeeDistribution.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size, err := m.OsmoTakerFeeDistribution.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.DefaultTakerFee.Size()
		i -= size
		if _, err := m.DefaultTakerFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TakerFeeDistributionPercentage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TakerFeeDistributionPercentage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TakerFeeDistributionPercentage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.CommunityPool.Size()
		i -= size
		if _, err := m.CommunityPool.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.StakingRewards.Size()
		i -= size
		if _, err := m.StakingRewards.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TakerFeesToStakersTracker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TakerFeesToStakersTracker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TakerFeesToStakersTracker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HeightAccountingStartsFrom != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.HeightAccountingStartsFrom))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TakerFeesToStakers) > 0 {
		for iNdEx := len(m.TakerFeesToStakers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TakerFeesToStakers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TakerFeesToCommunityPoolTracker) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TakerFeesToCommunityPoolTracker) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TakerFeesToCommunityPoolTracker) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.HeightAccountingStartsFrom != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.HeightAccountingStartsFrom))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TakerFeesToCommunityPool) > 0 {
		for iNdEx := len(m.TakerFeesToCommunityPool) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.TakerFeesToCommunityPool[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PoolCreationFee) > 0 {
		for _, e := range m.PoolCreationFee {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = m.TakerFeeParams.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.AuthorizedQuoteDenoms) > 0 {
		for _, s := range m.AuthorizedQuoteDenoms {
			l = len(s)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NextPoolId != 0 {
		n += 1 + sovGenesis(uint64(m.NextPoolId))
	}
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.PoolRoutes) > 0 {
		for _, e := range m.PoolRoutes {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.TakerFeesToStakersTracker != nil {
		l = m.TakerFeesToStakersTracker.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.TakerFeesToCommunityPoolTracker != nil {
		l = m.TakerFeesToCommunityPoolTracker.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func (m *TakerFeeParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DefaultTakerFee.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.OsmoTakerFeeDistribution.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.NonOsmoTakerFeeDistribution.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.AdminAddresses) > 0 {
		for _, s := range m.AdminAddresses {
			l = len(s)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = len(m.CommunityPoolDenomToSwapNonWhitelistedAssetsTo)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.ReducedFeeWhitelist) > 0 {
		for _, s := range m.ReducedFeeWhitelist {
			l = len(s)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *TakerFeeDistributionPercentage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StakingRewards.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.CommunityPool.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *TakerFeesToStakersTracker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TakerFeesToStakers) > 0 {
		for _, e := range m.TakerFeesToStakers {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.HeightAccountingStartsFrom != 0 {
		n += 1 + sovGenesis(uint64(m.HeightAccountingStartsFrom))
	}
	return n
}

func (m *TakerFeesToCommunityPoolTracker) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.TakerFeesToCommunityPool) > 0 {
		for _, e := range m.TakerFeesToCommunityPool {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.HeightAccountingStartsFrom != 0 {
		n += 1 + sovGenesis(uint64(m.HeightAccountingStartsFrom))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolCreationFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolCreationFee = append(m.PoolCreationFee, types.Coin{})
			if err := m.PoolCreationFee[len(m.PoolCreationFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerFeeParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TakerFeeParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizedQuoteDenoms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorizedQuoteDenoms = append(m.AuthorizedQuoteDenoms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPoolId", wireType)
			}
			m.NextPoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextPoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolRoutes = append(m.PoolRoutes, ModuleRoute{})
			if err := m.PoolRoutes[len(m.PoolRoutes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerFeesToStakersTracker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TakerFeesToStakersTracker == nil {
				m.TakerFeesToStakersTracker = &TakerFeesToStakersTracker{}
			}
			if err := m.TakerFeesToStakersTracker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerFeesToCommunityPoolTracker", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TakerFeesToCommunityPoolTracker == nil {
				m.TakerFeesToCommunityPoolTracker = &TakerFeesToCommunityPoolTracker{}
			}
			if err := m.TakerFeesToCommunityPoolTracker.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TakerFeeParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TakerFeeParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TakerFeeParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTakerFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultTakerFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsmoTakerFeeDistribution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OsmoTakerFeeDistribution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonOsmoTakerFeeDistribution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NonOsmoTakerFeeDistribution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAddresses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAddresses = append(m.AdminAddresses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommunityPoolDenomToSwapNonWhitelistedAssetsTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommunityPoolDenomToSwapNonWhitelistedAssetsTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReducedFeeWhitelist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReducedFeeWhitelist = append(m.ReducedFeeWhitelist, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TakerFeeDistributionPercentage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TakerFeeDistributionPercentage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TakerFeeDistributionPercentage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingRewards", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakingRewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommunityPool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommunityPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TakerFeesToStakersTracker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TakerFeesToStakersTracker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TakerFeesToStakersTracker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerFeesToStakers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TakerFeesToStakers = append(m.TakerFeesToStakers, types.Coin{})
			if err := m.TakerFeesToStakers[len(m.TakerFeesToStakers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeightAccountingStartsFrom", wireType)
			}
			m.HeightAccountingStartsFrom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeightAccountingStartsFrom |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TakerFeesToCommunityPoolTracker) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TakerFeesToCommunityPoolTracker: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TakerFeesToCommunityPoolTracker: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerFeesToCommunityPool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TakerFeesToCommunityPool = append(m.TakerFeesToCommunityPool, types.Coin{})
			if err := m.TakerFeesToCommunityPool[len(m.TakerFeesToCommunityPool)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeightAccountingStartsFrom", wireType)
			}
			m.HeightAccountingStartsFrom = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeightAccountingStartsFrom |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
