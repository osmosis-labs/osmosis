// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/poolmanager/v1beta1/genesis.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params holds parameters for the poolmanager module
type Params struct {
	PoolCreationFee github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=pool_creation_fee,json=poolCreationFee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"pool_creation_fee" yaml:"pool_creation_fee"`
	// default_taker_fee is the fee used when creating a new pool that doesn't
	// fall under a custom pool taker fee or stableswap taker fee category.
	DefaultTakerFee github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=default_taker_fee,json=defaultTakerFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"default_taker_fee"`
	// stableswap_taker_fee is the fee used when creating a new pool in which all
	// the underlying tokens are present in the stablecoin_denoms paramater entry
	// OR has a liquid_stake_denom_pairings entry.
	StableswapTakerFee github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=stableswap_taker_fee,json=stableswapTakerFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"stableswap_taker_fee"`
	// osmo_taker_fee_distribution defines the distribution of taker fees
	// generated in OSMO. As of this writing, it has two catagories:
	// - staking_rewards: the percent of the taker fee that gets distributed to
	//   stakers.
	// - community_pool: the percent of the taker fee that gets sent to the
	//   community pool.
	OsmoTakerFeeDistribution TakerFeeDistributionPercentage `protobuf:"bytes,5,opt,name=osmo_taker_fee_distribution,json=osmoTakerFeeDistribution,proto3" json:"osmo_taker_fee_distribution"`
	// non_osmo_taker_fee_distribution defines the distribution of taker fees
	// generated in non-OSMO. As of this writing, it has two catagories:
	// - staking_rewards: the percent of the taker fee that gets swapped to OSMO
	//   and then distirbuted to stakers.
	// - community_pool: the percent of the taker fee that gets sent to the
	//   community pool. Note: If the non-OSMO asset is an authorized_quote_denom,
	//   that denom is sent directly to the community pool. Otherwise, it is
	//   swapped to the community_pool_denom_to_swap_non_whitelisted_assets_to and
	//   then sent to the community pool as that denom.
	NonOsmoTakerFeeDistribution TakerFeeDistributionPercentage `protobuf:"bytes,6,opt,name=non_osmo_taker_fee_distribution,json=nonOsmoTakerFeeDistribution,proto3" json:"non_osmo_taker_fee_distribution"`
	// authorized_quote_denoms is a list of quote denoms that can be used as
	// token1 when creating a concentrated pool. We limit the quote assets to a
	// small set for the purposes of having convinient price increments stemming
	// from tick to price conversion. These increments are in a human readable
	// magnitude only for token1 as a quote. For limit orders in the future, this
	// will be a desirable property in terms of UX as to allow users to set limit
	// orders at prices in terms of token1 (quote asset) that are easy to reason
	// about.
	AuthorizedQuoteDenoms []string `protobuf:"bytes,7,rep,name=authorized_quote_denoms,json=authorizedQuoteDenoms,proto3" json:"authorized_quote_denoms,omitempty" yaml:"authorized_quote_denoms"`
	// community_pool_denom_to_swap_non_whitelisted_assets_to is the denom that
	// taker fees that are not whitelisted will be swapped to when being sent to
	// the community pool.
	CommunityPoolDenomToSwapNonWhitelistedAssetsTo string `protobuf:"bytes,8,opt,name=community_pool_denom_to_swap_non_whitelisted_assets_to,json=communityPoolDenomToSwapNonWhitelistedAssetsTo,proto3" json:"community_pool_denom_to_swap_non_whitelisted_assets_to,omitempty" yaml:"community_pool_denom_to_swap_non_whitelisted_assets_to"`
	// stablecoin_denoms is a list of denoms that are considered stablecoins.
	// This is used to determine if a pool should use the stableswap taker
	// fee. Note: LSTs are NOT apart of this catagory, even though they are
	// eligible for stableswap taker fees. This is determined via the
	// liquid_stake_denom_pairings field.
	StablecoinDenoms []string `protobuf:"bytes,9,rep,name=stablecoin_denoms,json=stablecoinDenoms,proto3" json:"stablecoin_denoms,omitempty" yaml:"stablecoin_denoms"`
	// liquid_stake_denom_pairings is a list of pairings of a natural denom with
	// its corresponding LST denoms. If a pool is created with a natural denom
	// that is paired with an LST denom, then the pool will be considered a
	// stableswap pool and will use the stableswap taker fee.
	LiquidStakeDenomPairings []*LiquidStakedTokenToUnderlyingDenom `protobuf:"bytes,10,rep,name=liquid_stake_denom_pairings,json=liquidStakeDenomPairings,proto3" json:"liquid_stake_denom_pairings,omitempty" yaml:"liquid_stake_denom_pairings"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa099d9fbdf68b35, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetPoolCreationFee() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.PoolCreationFee
	}
	return nil
}

func (m *Params) GetOsmoTakerFeeDistribution() TakerFeeDistributionPercentage {
	if m != nil {
		return m.OsmoTakerFeeDistribution
	}
	return TakerFeeDistributionPercentage{}
}

func (m *Params) GetNonOsmoTakerFeeDistribution() TakerFeeDistributionPercentage {
	if m != nil {
		return m.NonOsmoTakerFeeDistribution
	}
	return TakerFeeDistributionPercentage{}
}

func (m *Params) GetAuthorizedQuoteDenoms() []string {
	if m != nil {
		return m.AuthorizedQuoteDenoms
	}
	return nil
}

func (m *Params) GetCommunityPoolDenomToSwapNonWhitelistedAssetsTo() string {
	if m != nil {
		return m.CommunityPoolDenomToSwapNonWhitelistedAssetsTo
	}
	return ""
}

func (m *Params) GetStablecoinDenoms() []string {
	if m != nil {
		return m.StablecoinDenoms
	}
	return nil
}

func (m *Params) GetLiquidStakeDenomPairings() []*LiquidStakedTokenToUnderlyingDenom {
	if m != nil {
		return m.LiquidStakeDenomPairings
	}
	return nil
}

// GenesisState defines the poolmanager module's genesis state.
type GenesisState struct {
	// the next_pool_id
	NextPoolId uint64 `protobuf:"varint,1,opt,name=next_pool_id,json=nextPoolId,proto3" json:"next_pool_id,omitempty"`
	// params is the container of poolmanager parameters.
	Params Params `protobuf:"bytes,2,opt,name=params,proto3" json:"params"`
	// pool_routes is the container of the mappings from pool id to pool type.
	PoolRoutes []ModuleRoute `protobuf:"bytes,3,rep,name=pool_routes,json=poolRoutes,proto3" json:"pool_routes"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa099d9fbdf68b35, []int{1}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetNextPoolId() uint64 {
	if m != nil {
		return m.NextPoolId
	}
	return 0
}

func (m *GenesisState) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func (m *GenesisState) GetPoolRoutes() []ModuleRoute {
	if m != nil {
		return m.PoolRoutes
	}
	return nil
}

// TakerFeeDistributionPercentage defines what percent of the taker fee category
// gets distributed to the available categories.
type TakerFeeDistributionPercentage struct {
	StakingRewards github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=staking_rewards,json=stakingRewards,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"staking_rewards" yaml:"staking_rewards"`
	CommunityPool  github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,2,opt,name=community_pool,json=communityPool,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"community_pool" yaml:"community_pool"`
}

func (m *TakerFeeDistributionPercentage) Reset()         { *m = TakerFeeDistributionPercentage{} }
func (m *TakerFeeDistributionPercentage) String() string { return proto.CompactTextString(m) }
func (*TakerFeeDistributionPercentage) ProtoMessage()    {}
func (*TakerFeeDistributionPercentage) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa099d9fbdf68b35, []int{2}
}
func (m *TakerFeeDistributionPercentage) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TakerFeeDistributionPercentage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TakerFeeDistributionPercentage.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TakerFeeDistributionPercentage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TakerFeeDistributionPercentage.Merge(m, src)
}
func (m *TakerFeeDistributionPercentage) XXX_Size() int {
	return m.Size()
}
func (m *TakerFeeDistributionPercentage) XXX_DiscardUnknown() {
	xxx_messageInfo_TakerFeeDistributionPercentage.DiscardUnknown(m)
}

var xxx_messageInfo_TakerFeeDistributionPercentage proto.InternalMessageInfo

// LiquidStakedTokenToUnderlyingDenom defines a pairing of a single natural
// denom with its corresponding LST denoms.
type LiquidStakedTokenToUnderlyingDenom struct {
	LiquidStakedTokenDenoms []string `protobuf:"bytes,1,rep,name=liquid_staked_token_denoms,json=liquidStakedTokenDenoms,proto3" json:"liquid_staked_token_denoms,omitempty" yaml:"liquid_staked_token_denoms"`
	UnderlyingTokenDenom    string   `protobuf:"bytes,2,opt,name=underlying_token_denom,json=underlyingTokenDenom,proto3" json:"underlying_token_denom,omitempty" yaml:"underlying_token_denom"`
}

func (m *LiquidStakedTokenToUnderlyingDenom) Reset()         { *m = LiquidStakedTokenToUnderlyingDenom{} }
func (m *LiquidStakedTokenToUnderlyingDenom) String() string { return proto.CompactTextString(m) }
func (*LiquidStakedTokenToUnderlyingDenom) ProtoMessage()    {}
func (*LiquidStakedTokenToUnderlyingDenom) Descriptor() ([]byte, []int) {
	return fileDescriptor_aa099d9fbdf68b35, []int{3}
}
func (m *LiquidStakedTokenToUnderlyingDenom) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidStakedTokenToUnderlyingDenom) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidStakedTokenToUnderlyingDenom.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidStakedTokenToUnderlyingDenom) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidStakedTokenToUnderlyingDenom.Merge(m, src)
}
func (m *LiquidStakedTokenToUnderlyingDenom) XXX_Size() int {
	return m.Size()
}
func (m *LiquidStakedTokenToUnderlyingDenom) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidStakedTokenToUnderlyingDenom.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidStakedTokenToUnderlyingDenom proto.InternalMessageInfo

func (m *LiquidStakedTokenToUnderlyingDenom) GetLiquidStakedTokenDenoms() []string {
	if m != nil {
		return m.LiquidStakedTokenDenoms
	}
	return nil
}

func (m *LiquidStakedTokenToUnderlyingDenom) GetUnderlyingTokenDenom() string {
	if m != nil {
		return m.UnderlyingTokenDenom
	}
	return ""
}

func init() {
	proto.RegisterType((*Params)(nil), "osmosis.poolmanager.v1beta1.Params")
	proto.RegisterType((*GenesisState)(nil), "osmosis.poolmanager.v1beta1.GenesisState")
	proto.RegisterType((*TakerFeeDistributionPercentage)(nil), "osmosis.poolmanager.v1beta1.TakerFeeDistributionPercentage")
	proto.RegisterType((*LiquidStakedTokenToUnderlyingDenom)(nil), "osmosis.poolmanager.v1beta1.LiquidStakedTokenToUnderlyingDenom")
}

func init() {
	proto.RegisterFile("osmosis/poolmanager/v1beta1/genesis.proto", fileDescriptor_aa099d9fbdf68b35)
}

var fileDescriptor_aa099d9fbdf68b35 = []byte{
	// 934 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x4f, 0x6f, 0xdc, 0xc4,
	0x1b, 0x8e, 0x9b, 0xfe, 0xf2, 0x63, 0x27, 0xa5, 0x21, 0x56, 0xda, 0xba, 0x09, 0xd8, 0x5b, 0x57,
	0x54, 0xcb, 0xa1, 0xb6, 0x12, 0x24, 0x2a, 0x81, 0x10, 0xca, 0x76, 0xd5, 0x52, 0xa9, 0xb4, 0xa9,
	0xb3, 0xa8, 0x52, 0x2f, 0xd6, 0x78, 0xfd, 0xc6, 0x19, 0xc5, 0x9e, 0xd9, 0x78, 0xc6, 0x49, 0x97,
	0x2b, 0x5f, 0x00, 0x89, 0x2b, 0xe7, 0x1e, 0xb8, 0xf1, 0x1d, 0x38, 0xf4, 0x58, 0x6e, 0x88, 0x83,
	0x81, 0xcd, 0x37, 0xd8, 0x4f, 0x80, 0x66, 0x3c, 0xde, 0x3f, 0x4d, 0xb2, 0x10, 0x38, 0x25, 0xf3,
	0xbe, 0xef, 0xf3, 0x3c, 0xef, 0xbc, 0xfb, 0xcc, 0x6b, 0xf4, 0x11, 0xe3, 0x19, 0xe3, 0x84, 0xfb,
	0x7d, 0xc6, 0xd2, 0x0c, 0x53, 0x9c, 0x40, 0xee, 0x1f, 0x6d, 0x46, 0x20, 0xf0, 0xa6, 0x9f, 0x00,
	0x05, 0x4e, 0xb8, 0xd7, 0xcf, 0x99, 0x60, 0xe6, 0x86, 0x2e, 0xf5, 0xa6, 0x4a, 0x3d, 0x5d, 0xba,
	0xbe, 0x96, 0xb0, 0x84, 0xa9, 0x3a, 0x5f, 0xfe, 0x57, 0x41, 0xd6, 0x6f, 0x26, 0x8c, 0x25, 0x29,
	0xf8, 0xea, 0x14, 0x15, 0x7b, 0x3e, 0xa6, 0x83, 0x3a, 0xd5, 0x53, 0x74, 0x61, 0x85, 0xa9, 0x0e,
	0x3a, 0x65, 0xbf, 0x8d, 0x8a, 0x8b, 0x1c, 0x0b, 0xc2, 0x68, 0x9d, 0xaf, 0xaa, 0xfd, 0x08, 0x73,
	0x18, 0xf7, 0xda, 0x63, 0xa4, 0xce, 0x7b, 0xf3, 0xee, 0x94, 0xb1, 0xb8, 0x48, 0x21, 0xcc, 0x59,
	0x21, 0xa0, 0xaa, 0x77, 0x7f, 0x69, 0xa0, 0xa5, 0x1d, 0x9c, 0xe3, 0x8c, 0x9b, 0xdf, 0x1b, 0x68,
	0x55, 0xa2, 0xc2, 0x5e, 0x0e, 0x4a, 0x32, 0xdc, 0x03, 0xb0, 0x8c, 0xe6, 0x62, 0x6b, 0x79, 0xeb,
	0xa6, 0xa7, 0xbb, 0x94, 0xba, 0xf5, 0xc5, 0xbd, 0xfb, 0x8c, 0xd0, 0xf6, 0xe3, 0xd7, 0xa5, 0xb3,
	0x30, 0x2a, 0x1d, 0x6b, 0x80, 0xb3, 0xf4, 0x53, 0xf7, 0x14, 0x83, 0xfb, 0xe3, 0xef, 0x4e, 0x2b,
	0x21, 0x62, 0xbf, 0x88, 0xbc, 0x1e, 0xcb, 0xf4, 0x75, 0xf5, 0x9f, 0xbb, 0x3c, 0x3e, 0xf0, 0xc5,
	0xa0, 0x0f, 0x5c, 0x91, 0xf1, 0x60, 0x45, 0xe2, 0xef, 0x6b, 0xf8, 0x03, 0x00, 0x33, 0x43, 0xab,
	0x31, 0xec, 0xe1, 0x22, 0x15, 0xa1, 0xc0, 0x07, 0x90, 0xab, 0xa6, 0x2e, 0x35, 0x8d, 0x56, 0xa3,
	0xbd, 0x2d, 0x95, 0x7f, 0x2b, 0x9d, 0x3b, 0xff, 0x80, 0xbd, 0x03, 0xbd, 0x61, 0xe9, 0xac, 0x74,
	0x2a, 0xaa, 0xae, 0x64, 0x7a, 0x00, 0x10, 0xac, 0xc4, 0xb3, 0x01, 0xf3, 0x08, 0xad, 0x71, 0x81,
	0xa3, 0x14, 0xf8, 0x31, 0xee, 0x4f, 0x29, 0x2e, 0x2a, 0xc5, 0xce, 0x85, 0x15, 0xcd, 0xdd, 0x31,
	0xdb, 0x58, 0xd4, 0xe4, 0xa7, 0x62, 0xe6, 0x0f, 0x06, 0x52, 0x1e, 0x9b, 0x48, 0x86, 0x31, 0xe1,
	0x22, 0x27, 0x51, 0x21, 0x27, 0x61, 0xfd, 0xaf, 0x69, 0xb4, 0x96, 0xb7, 0x3e, 0xf3, 0xe6, 0xf8,
	0xd0, 0xab, 0xc9, 0x3a, 0x53, 0xc0, 0x1d, 0xc8, 0x7b, 0x40, 0x05, 0x4e, 0xa0, 0xdd, 0x94, 0xcd,
	0x0f, 0x4b, 0xc7, 0x7a, 0xca, 0x33, 0x76, 0x56, 0x6d, 0x60, 0xb1, 0x73, 0x32, 0xe6, 0x2b, 0x03,
	0x39, 0x94, 0xd1, 0x70, 0x5e, 0x8b, 0x4b, 0xff, 0xbd, 0xc5, 0xdb, 0xba, 0xc5, 0x8d, 0x27, 0x8c,
	0x9e, 0xdb, 0xe5, 0x06, 0x3d, 0x3f, 0x69, 0xbe, 0x40, 0x37, 0x70, 0x21, 0xf6, 0x59, 0x4e, 0xbe,
	0x81, 0x38, 0x3c, 0x2c, 0x98, 0x80, 0x30, 0x06, 0xca, 0x32, 0x6e, 0xfd, 0xbf, 0xb9, 0xd8, 0x6a,
	0xb4, 0xdd, 0x51, 0xe9, 0xd8, 0x95, 0x55, 0xcf, 0x29, 0x74, 0x83, 0x6b, 0x93, 0xcc, 0x33, 0x99,
	0xe8, 0xa8, 0xb8, 0xf9, 0x93, 0x81, 0x3e, 0xe9, 0xb1, 0x2c, 0x2b, 0x28, 0x11, 0x83, 0x50, 0x19,
	0x5d, 0x21, 0x42, 0xc1, 0x42, 0x65, 0x17, 0x39, 0xa1, 0xe3, 0x7d, 0x22, 0x20, 0x25, 0x5c, 0x40,
	0x1c, 0x62, 0xce, 0x41, 0xf0, 0x50, 0x30, 0xeb, 0x9d, 0xca, 0xb0, 0xa3, 0xd2, 0xf9, 0xbc, 0xd2,
	0xfe, 0x77, 0x3c, 0x6e, 0xe0, 0x8d, 0x81, 0x3b, 0x8c, 0xa5, 0xaa, 0xb1, 0x2e, 0xdb, 0x3d, 0xc6,
	0xfd, 0x27, 0x8c, 0x3e, 0x9f, 0x40, 0xb6, 0x15, 0xa2, 0xcb, 0xcc, 0x47, 0x68, 0xb5, 0x72, 0x9b,
	0xdc, 0x11, 0xf5, 0x24, 0x1a, 0x6a, 0x12, 0xef, 0x4f, 0x1e, 0xed, 0xa9, 0x12, 0x37, 0x78, 0x6f,
	0x12, 0xd3, 0xd7, 0x7f, 0x65, 0xa0, 0x8d, 0x94, 0x1c, 0x16, 0x24, 0x0e, 0xb9, 0xb4, 0x80, 0x6e,
	0xba, 0x8f, 0x49, 0x4e, 0x68, 0xc2, 0x2d, 0xa4, 0x36, 0xc5, 0x17, 0x73, 0x7f, 0xff, 0xc7, 0x0a,
	0xbf, 0x2b, 0xe1, 0x71, 0x97, 0x1d, 0x00, 0xed, 0xb2, 0xaf, 0x69, 0x0c, 0x79, 0x3a, 0x20, 0x34,
	0x51, 0x3a, 0xed, 0x3b, 0xa3, 0xd2, 0x71, 0xab, 0xb6, 0xe6, 0xa8, 0xb9, 0x81, 0x95, 0x4e, 0xb8,
	0x14, 0x72, 0xa7, 0x4e, 0xfd, 0x6c, 0xa0, 0x2b, 0x0f, 0xab, 0xf5, 0xbd, 0x2b, 0xb0, 0x00, 0xb3,
	0x89, 0xae, 0x50, 0x78, 0x29, 0xaa, 0x51, 0x93, 0xd8, 0x32, 0x9a, 0x46, 0xeb, 0x72, 0x80, 0x64,
	0x4c, 0x4e, 0xf1, 0x51, 0x6c, 0x6e, 0xa3, 0xa5, 0xbe, 0xda, 0x82, 0x6a, 0xb5, 0x2c, 0x6f, 0xdd,
	0x9e, 0x7b, 0x8b, 0x6a, 0x61, 0xb6, 0x2f, 0x4b, 0xb7, 0x06, 0x1a, 0x68, 0x3e, 0x45, 0xcb, 0x8a,
	0x5f, 0x6d, 0x57, 0x6e, 0x2d, 0xaa, 0x69, 0xb4, 0xe6, 0xf2, 0x7c, 0xa5, 0xf6, 0x71, 0x20, 0x01,
	0x9a, 0x0c, 0xc9, 0x32, 0x15, 0xe0, 0xee, 0xb7, 0x97, 0x90, 0x3d, 0xff, 0xbd, 0x98, 0x87, 0x68,
	0x45, 0x0e, 0x87, 0xd0, 0x24, 0xcc, 0xe1, 0x18, 0xe7, 0x31, 0x57, 0x77, 0x6b, 0xb4, 0xbf, 0xbc,
	0xd8, 0xa2, 0x1a, 0x95, 0xce, 0xf5, 0xb1, 0x13, 0xa6, 0xe9, 0xdc, 0xe0, 0xaa, 0x8e, 0x04, 0x55,
	0xc0, 0xa4, 0xe8, 0xea, 0xac, 0x77, 0xf5, 0x32, 0x7e, 0x78, 0x61, 0xc5, 0x6b, 0x67, 0xbd, 0x04,
	0x37, 0x78, 0x77, 0xc6, 0xe1, 0xee, 0x9f, 0x06, 0x72, 0xff, 0xde, 0x35, 0x66, 0x84, 0xd6, 0xa7,
	0xdd, 0x12, 0x87, 0x42, 0xd6, 0xd5, 0x86, 0x37, 0x94, 0xe1, 0x3f, 0x1c, 0x95, 0xce, 0xad, 0xd3,
	0xce, 0x9a, 0xad, 0x75, 0x83, 0x1b, 0xe9, 0xdb, 0x72, 0xfa, 0x01, 0x3c, 0x47, 0xd7, 0x8b, 0xb1,
	0xec, 0x34, 0x48, 0x8f, 0xe0, 0xd6, 0xa8, 0x74, 0x3e, 0xa8, 0xf8, 0xcf, 0xae, 0x73, 0x83, 0xb5,
	0x49, 0x62, 0xc2, 0xdc, 0x7e, 0xf6, 0x7a, 0x68, 0x1b, 0x6f, 0x86, 0xb6, 0xf1, 0xc7, 0xd0, 0x36,
	0xbe, 0x3b, 0xb1, 0x17, 0xde, 0x9c, 0xd8, 0x0b, 0xbf, 0x9e, 0xd8, 0x0b, 0x2f, 0xee, 0x4d, 0x4d,
	0x53, 0x3b, 0xe9, 0x6e, 0x8a, 0x23, 0x5e, 0x1f, 0xfc, 0xa3, 0xcd, 0x7b, 0xfe, 0xcb, 0x99, 0x8f,
	0xbd, 0x1a, 0x71, 0xb4, 0xa4, 0x3e, 0xef, 0x1f, 0xff, 0x15, 0x00, 0x00, 0xff, 0xff, 0x42, 0x15,
	0xdf, 0x9b, 0xe4, 0x08, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.LiquidStakeDenomPairings) > 0 {
		for iNdEx := len(m.LiquidStakeDenomPairings) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LiquidStakeDenomPairings[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x52
		}
	}
	if len(m.StablecoinDenoms) > 0 {
		for iNdEx := len(m.StablecoinDenoms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.StablecoinDenoms[iNdEx])
			copy(dAtA[i:], m.StablecoinDenoms[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.StablecoinDenoms[iNdEx])))
			i--
			dAtA[i] = 0x4a
		}
	}
	if len(m.CommunityPoolDenomToSwapNonWhitelistedAssetsTo) > 0 {
		i -= len(m.CommunityPoolDenomToSwapNonWhitelistedAssetsTo)
		copy(dAtA[i:], m.CommunityPoolDenomToSwapNonWhitelistedAssetsTo)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.CommunityPoolDenomToSwapNonWhitelistedAssetsTo)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.AuthorizedQuoteDenoms) > 0 {
		for iNdEx := len(m.AuthorizedQuoteDenoms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.AuthorizedQuoteDenoms[iNdEx])
			copy(dAtA[i:], m.AuthorizedQuoteDenoms[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.AuthorizedQuoteDenoms[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	{
		size, err := m.NonOsmoTakerFeeDistribution.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	{
		size, err := m.OsmoTakerFeeDistribution.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.StableswapTakerFee.Size()
		i -= size
		if _, err := m.StableswapTakerFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	{
		size := m.DefaultTakerFee.Size()
		i -= size
		if _, err := m.DefaultTakerFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.PoolCreationFee) > 0 {
		for iNdEx := len(m.PoolCreationFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolCreationFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolRoutes) > 0 {
		for iNdEx := len(m.PoolRoutes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolRoutes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if m.NextPoolId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.NextPoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TakerFeeDistributionPercentage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TakerFeeDistributionPercentage) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TakerFeeDistributionPercentage) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.CommunityPool.Size()
		i -= size
		if _, err := m.CommunityPool.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size := m.StakingRewards.Size()
		i -= size
		if _, err := m.StakingRewards.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LiquidStakedTokenToUnderlyingDenom) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidStakedTokenToUnderlyingDenom) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidStakedTokenToUnderlyingDenom) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnderlyingTokenDenom) > 0 {
		i -= len(m.UnderlyingTokenDenom)
		copy(dAtA[i:], m.UnderlyingTokenDenom)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.UnderlyingTokenDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.LiquidStakedTokenDenoms) > 0 {
		for iNdEx := len(m.LiquidStakedTokenDenoms) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.LiquidStakedTokenDenoms[iNdEx])
			copy(dAtA[i:], m.LiquidStakedTokenDenoms[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.LiquidStakedTokenDenoms[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PoolCreationFee) > 0 {
		for _, e := range m.PoolCreationFee {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = m.DefaultTakerFee.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.StableswapTakerFee.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.OsmoTakerFeeDistribution.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.NonOsmoTakerFeeDistribution.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.AuthorizedQuoteDenoms) > 0 {
		for _, s := range m.AuthorizedQuoteDenoms {
			l = len(s)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = len(m.CommunityPoolDenomToSwapNonWhitelistedAssetsTo)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.StablecoinDenoms) > 0 {
		for _, s := range m.StablecoinDenoms {
			l = len(s)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.LiquidStakeDenomPairings) > 0 {
		for _, e := range m.LiquidStakeDenomPairings {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NextPoolId != 0 {
		n += 1 + sovGenesis(uint64(m.NextPoolId))
	}
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.PoolRoutes) > 0 {
		for _, e := range m.PoolRoutes {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *TakerFeeDistributionPercentage) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.StakingRewards.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.CommunityPool.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *LiquidStakedTokenToUnderlyingDenom) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LiquidStakedTokenDenoms) > 0 {
		for _, s := range m.LiquidStakedTokenDenoms {
			l = len(s)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = len(m.UnderlyingTokenDenom)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolCreationFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolCreationFee = append(m.PoolCreationFee, types.Coin{})
			if err := m.PoolCreationFee[len(m.PoolCreationFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultTakerFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DefaultTakerFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StableswapTakerFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StableswapTakerFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OsmoTakerFeeDistribution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OsmoTakerFeeDistribution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NonOsmoTakerFeeDistribution", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NonOsmoTakerFeeDistribution.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthorizedQuoteDenoms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthorizedQuoteDenoms = append(m.AuthorizedQuoteDenoms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommunityPoolDenomToSwapNonWhitelistedAssetsTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CommunityPoolDenomToSwapNonWhitelistedAssetsTo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StablecoinDenoms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StablecoinDenoms = append(m.StablecoinDenoms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidStakeDenomPairings", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidStakeDenomPairings = append(m.LiquidStakeDenomPairings, &LiquidStakedTokenToUnderlyingDenom{})
			if err := m.LiquidStakeDenomPairings[len(m.LiquidStakeDenomPairings)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPoolId", wireType)
			}
			m.NextPoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextPoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolRoutes = append(m.PoolRoutes, ModuleRoute{})
			if err := m.PoolRoutes[len(m.PoolRoutes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TakerFeeDistributionPercentage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TakerFeeDistributionPercentage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TakerFeeDistributionPercentage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingRewards", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StakingRewards.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommunityPool", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CommunityPool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidStakedTokenToUnderlyingDenom) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidStakedTokenToUnderlyingDenom: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidStakedTokenToUnderlyingDenom: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidStakedTokenDenoms", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidStakedTokenDenoms = append(m.LiquidStakedTokenDenoms, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnderlyingTokenDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnderlyingTokenDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
