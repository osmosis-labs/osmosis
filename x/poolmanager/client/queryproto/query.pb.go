// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/poolmanager/v1beta1/query.proto

package queryproto

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types1 "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types2 "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/osmosis-labs/osmosis/v21/x/poolmanager/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// =============================== Params
type ParamsRequest struct {
}

func (m *ParamsRequest) Reset()         { *m = ParamsRequest{} }
func (m *ParamsRequest) String() string { return proto.CompactTextString(m) }
func (*ParamsRequest) ProtoMessage()    {}
func (*ParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6256a4106f701b7d, []int{0}
}
func (m *ParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParamsRequest.Merge(m, src)
}
func (m *ParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ParamsRequest proto.InternalMessageInfo

type ParamsResponse struct {
	Params types.Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *ParamsResponse) Reset()         { *m = ParamsResponse{} }
func (m *ParamsResponse) String() string { return proto.CompactTextString(m) }
func (*ParamsResponse) ProtoMessage()    {}
func (*ParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6256a4106f701b7d, []int{1}
}
func (m *ParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParamsResponse.Merge(m, src)
}
func (m *ParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ParamsResponse proto.InternalMessageInfo

func (m *ParamsResponse) GetParams() types.Params {
	if m != nil {
		return m.Params
	}
	return types.Params{}
}

// =============================== EstimateSwapExactAmountIn
type EstimateSwapExactAmountInRequest struct {
	PoolId  uint64                    `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"` // Deprecated: Do not use.
	TokenIn string                    `protobuf:"bytes,3,opt,name=token_in,json=tokenIn,proto3" json:"token_in,omitempty" yaml:"token_in"`
	Routes  []types.SwapAmountInRoute `protobuf:"bytes,4,rep,name=routes,proto3" json:"routes" yaml:"routes"`
}

func (m *EstimateSwapExactAmountInRequest) Reset()         { *m = EstimateSwapExactAmountInRequest{} }
func (m *EstimateSwapExactAmountInRequest) String() string { return proto.CompactTextString(m) }
func (*EstimateSwapExactAmountInRequest) ProtoMessage()    {}
func (*EstimateSwapExactAmountInRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6256a4106f701b7d, []int{2}
}
func (m *EstimateSwapExactAmountInRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstimateSwapExactAmountInRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstimateSwapExactAmountInRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstimateSwapExactAmountInRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateSwapExactAmountInRequest.Merge(m, src)
}
func (m *EstimateSwapExactAmountInRequest) XXX_Size() int {
	return m.Size()
}
func (m *EstimateSwapExactAmountInRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateSwapExactAmountInRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateSwapExactAmountInRequest proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *EstimateSwapExactAmountInRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *EstimateSwapExactAmountInRequest) GetTokenIn() string {
	if m != nil {
		return m.TokenIn
	}
	return ""
}

func (m *EstimateSwapExactAmountInRequest) GetRoutes() []types.SwapAmountInRoute {
	if m != nil {
		return m.Routes
	}
	return nil
}

type EstimateSwapExactAmountInWithPrimitiveTypesRequest struct {
	PoolId              uint64   `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"` // Deprecated: Do not use.
	TokenIn             string   `protobuf:"bytes,2,opt,name=token_in,json=tokenIn,proto3" json:"token_in,omitempty" yaml:"token_in"`
	RoutesPoolId        []uint64 `protobuf:"varint,3,rep,packed,name=routes_pool_id,json=routesPoolId,proto3" json:"routes_pool_id,omitempty" yaml:"routes_pool_id"`
	RoutesTokenOutDenom []string `protobuf:"bytes,4,rep,name=routes_token_out_denom,json=routesTokenOutDenom,proto3" json:"routes_token_out_denom,omitempty" yaml:"routes_token_out_denom"`
}

func (m *EstimateSwapExactAmountInWithPrimitiveTypesRequest) Reset() {
	*m = EstimateSwapExactAmountInWithPrimitiveTypesRequest{}
}
func (m *EstimateSwapExactAmountInWithPrimitiveTypesRequest) String() string {
	return proto.CompactTextString(m)
}
func (*EstimateSwapExactAmountInWithPrimitiveTypesRequest) ProtoMessage() {}
func (*EstimateSwapExactAmountInWithPrimitiveTypesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6256a4106f701b7d, []int{3}
}
func (m *EstimateSwapExactAmountInWithPrimitiveTypesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstimateSwapExactAmountInWithPrimitiveTypesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstimateSwapExactAmountInWithPrimitiveTypesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstimateSwapExactAmountInWithPrimitiveTypesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateSwapExactAmountInWithPrimitiveTypesRequest.Merge(m, src)
}
func (m *EstimateSwapExactAmountInWithPrimitiveTypesRequest) XXX_Size() int {
	return m.Size()
}
func (m *EstimateSwapExactAmountInWithPrimitiveTypesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateSwapExactAmountInWithPrimitiveTypesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateSwapExactAmountInWithPrimitiveTypesRequest proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *EstimateSwapExactAmountInWithPrimitiveTypesRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *EstimateSwapExactAmountInWithPrimitiveTypesRequest) GetTokenIn() string {
	if m != nil {
		return m.TokenIn
	}
	return ""
}

func (m *EstimateSwapExactAmountInWithPrimitiveTypesRequest) GetRoutesPoolId() []uint64 {
	if m != nil {
		return m.RoutesPoolId
	}
	return nil
}

func (m *EstimateSwapExactAmountInWithPrimitiveTypesRequest) GetRoutesTokenOutDenom() []string {
	if m != nil {
		return m.RoutesTokenOutDenom
	}
	return nil
}

type EstimateSinglePoolSwapExactAmountInRequest struct {
	PoolId        uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	TokenIn       string `protobuf:"bytes,2,opt,name=token_in,json=tokenIn,proto3" json:"token_in,omitempty" yaml:"token_in"`
	TokenOutDenom string `protobuf:"bytes,3,opt,name=token_out_denom,json=tokenOutDenom,proto3" json:"token_out_denom,omitempty" yaml:"token_out_denom"`
}

func (m *EstimateSinglePoolSwapExactAmountInRequest) Reset() {
	*m = EstimateSinglePoolSwapExactAmountInRequest{}
}
func (m *EstimateSinglePoolSwapExactAmountInRequest) String() string {
	return proto.CompactTextString(m)
}
func (*EstimateSinglePoolSwapExactAmountInRequest) ProtoMessage() {}
func (*EstimateSinglePoolSwapExactAmountInRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6256a4106f701b7d, []int{4}
}
func (m *EstimateSinglePoolSwapExactAmountInRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstimateSinglePoolSwapExactAmountInRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstimateSinglePoolSwapExactAmountInRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstimateSinglePoolSwapExactAmountInRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateSinglePoolSwapExactAmountInRequest.Merge(m, src)
}
func (m *EstimateSinglePoolSwapExactAmountInRequest) XXX_Size() int {
	return m.Size()
}
func (m *EstimateSinglePoolSwapExactAmountInRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateSinglePoolSwapExactAmountInRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateSinglePoolSwapExactAmountInRequest proto.InternalMessageInfo

func (m *EstimateSinglePoolSwapExactAmountInRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *EstimateSinglePoolSwapExactAmountInRequest) GetTokenIn() string {
	if m != nil {
		return m.TokenIn
	}
	return ""
}

func (m *EstimateSinglePoolSwapExactAmountInRequest) GetTokenOutDenom() string {
	if m != nil {
		return m.TokenOutDenom
	}
	return ""
}

type EstimateSwapExactAmountInResponse struct {
	TokenOutAmount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=token_out_amount,json=tokenOutAmount,proto3,customtype=cosmossdk.io/math.Int" json:"token_out_amount" yaml:"token_out_amount"`
}

func (m *EstimateSwapExactAmountInResponse) Reset()         { *m = EstimateSwapExactAmountInResponse{} }
func (m *EstimateSwapExactAmountInResponse) String() string { return proto.CompactTextString(m) }
func (*EstimateSwapExactAmountInResponse) ProtoMessage()    {}
func (*EstimateSwapExactAmountInResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6256a4106f701b7d, []int{5}
}
func (m *EstimateSwapExactAmountInResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstimateSwapExactAmountInResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstimateSwapExactAmountInResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstimateSwapExactAmountInResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateSwapExactAmountInResponse.Merge(m, src)
}
func (m *EstimateSwapExactAmountInResponse) XXX_Size() int {
	return m.Size()
}
func (m *EstimateSwapExactAmountInResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateSwapExactAmountInResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateSwapExactAmountInResponse proto.InternalMessageInfo

// =============================== EstimateSwapExactAmountOut
type EstimateSwapExactAmountOutRequest struct {
	PoolId   uint64                     `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"` // Deprecated: Do not use.
	Routes   []types.SwapAmountOutRoute `protobuf:"bytes,3,rep,name=routes,proto3" json:"routes" yaml:"routes"`
	TokenOut string                     `protobuf:"bytes,4,opt,name=token_out,json=tokenOut,proto3" json:"token_out,omitempty" yaml:"token_out"`
}

func (m *EstimateSwapExactAmountOutRequest) Reset()         { *m = EstimateSwapExactAmountOutRequest{} }
func (m *EstimateSwapExactAmountOutRequest) String() string { return proto.CompactTextString(m) }
func (*EstimateSwapExactAmountOutRequest) ProtoMessage()    {}
func (*EstimateSwapExactAmountOutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6256a4106f701b7d, []int{6}
}
func (m *EstimateSwapExactAmountOutRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstimateSwapExactAmountOutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstimateSwapExactAmountOutRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstimateSwapExactAmountOutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateSwapExactAmountOutRequest.Merge(m, src)
}
func (m *EstimateSwapExactAmountOutRequest) XXX_Size() int {
	return m.Size()
}
func (m *EstimateSwapExactAmountOutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateSwapExactAmountOutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateSwapExactAmountOutRequest proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *EstimateSwapExactAmountOutRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *EstimateSwapExactAmountOutRequest) GetRoutes() []types.SwapAmountOutRoute {
	if m != nil {
		return m.Routes
	}
	return nil
}

func (m *EstimateSwapExactAmountOutRequest) GetTokenOut() string {
	if m != nil {
		return m.TokenOut
	}
	return ""
}

type EstimateSwapExactAmountOutWithPrimitiveTypesRequest struct {
	PoolId             uint64   `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"` // Deprecated: Do not use.
	RoutesPoolId       []uint64 `protobuf:"varint,2,rep,packed,name=routes_pool_id,json=routesPoolId,proto3" json:"routes_pool_id,omitempty" yaml:"routes_pool_id"`
	RoutesTokenInDenom []string `protobuf:"bytes,3,rep,name=routes_token_in_denom,json=routesTokenInDenom,proto3" json:"routes_token_in_denom,omitempty" yaml:"routes_token_in_denom"`
	TokenOut           string   `protobuf:"bytes,4,opt,name=token_out,json=tokenOut,proto3" json:"token_out,omitempty" yaml:"token_out"`
}

func (m *EstimateSwapExactAmountOutWithPrimitiveTypesRequest) Reset() {
	*m = EstimateSwapExactAmountOutWithPrimitiveTypesRequest{}
}
func (m *EstimateSwapExactAmountOutWithPrimitiveTypesRequest) String() string {
	return proto.CompactTextString(m)
}
func (*EstimateSwapExactAmountOutWithPrimitiveTypesRequest) ProtoMessage() {}
func (*EstimateSwapExactAmountOutWithPrimitiveTypesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6256a4106f701b7d, []int{7}
}
func (m *EstimateSwapExactAmountOutWithPrimitiveTypesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstimateSwapExactAmountOutWithPrimitiveTypesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstimateSwapExactAmountOutWithPrimitiveTypesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstimateSwapExactAmountOutWithPrimitiveTypesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateSwapExactAmountOutWithPrimitiveTypesRequest.Merge(m, src)
}
func (m *EstimateSwapExactAmountOutWithPrimitiveTypesRequest) XXX_Size() int {
	return m.Size()
}
func (m *EstimateSwapExactAmountOutWithPrimitiveTypesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateSwapExactAmountOutWithPrimitiveTypesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateSwapExactAmountOutWithPrimitiveTypesRequest proto.InternalMessageInfo

// Deprecated: Do not use.
func (m *EstimateSwapExactAmountOutWithPrimitiveTypesRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *EstimateSwapExactAmountOutWithPrimitiveTypesRequest) GetRoutesPoolId() []uint64 {
	if m != nil {
		return m.RoutesPoolId
	}
	return nil
}

func (m *EstimateSwapExactAmountOutWithPrimitiveTypesRequest) GetRoutesTokenInDenom() []string {
	if m != nil {
		return m.RoutesTokenInDenom
	}
	return nil
}

func (m *EstimateSwapExactAmountOutWithPrimitiveTypesRequest) GetTokenOut() string {
	if m != nil {
		return m.TokenOut
	}
	return ""
}

type EstimateSinglePoolSwapExactAmountOutRequest struct {
	PoolId       uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	TokenInDenom string `protobuf:"bytes,2,opt,name=token_in_denom,json=tokenInDenom,proto3" json:"token_in_denom,omitempty" yaml:"token_in_denom"`
	TokenOut     string `protobuf:"bytes,3,opt,name=token_out,json=tokenOut,proto3" json:"token_out,omitempty" yaml:"token_out"`
}

func (m *EstimateSinglePoolSwapExactAmountOutRequest) Reset() {
	*m = EstimateSinglePoolSwapExactAmountOutRequest{}
}
func (m *EstimateSinglePoolSwapExactAmountOutRequest) String() string {
	return proto.CompactTextString(m)
}
func (*EstimateSinglePoolSwapExactAmountOutRequest) ProtoMessage() {}
func (*EstimateSinglePoolSwapExactAmountOutRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6256a4106f701b7d, []int{8}
}
func (m *EstimateSinglePoolSwapExactAmountOutRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstimateSinglePoolSwapExactAmountOutRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstimateSinglePoolSwapExactAmountOutRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstimateSinglePoolSwapExactAmountOutRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateSinglePoolSwapExactAmountOutRequest.Merge(m, src)
}
func (m *EstimateSinglePoolSwapExactAmountOutRequest) XXX_Size() int {
	return m.Size()
}
func (m *EstimateSinglePoolSwapExactAmountOutRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateSinglePoolSwapExactAmountOutRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateSinglePoolSwapExactAmountOutRequest proto.InternalMessageInfo

func (m *EstimateSinglePoolSwapExactAmountOutRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *EstimateSinglePoolSwapExactAmountOutRequest) GetTokenInDenom() string {
	if m != nil {
		return m.TokenInDenom
	}
	return ""
}

func (m *EstimateSinglePoolSwapExactAmountOutRequest) GetTokenOut() string {
	if m != nil {
		return m.TokenOut
	}
	return ""
}

type EstimateSwapExactAmountOutResponse struct {
	TokenInAmount cosmossdk_io_math.Int `protobuf:"bytes,1,opt,name=token_in_amount,json=tokenInAmount,proto3,customtype=cosmossdk.io/math.Int" json:"token_in_amount" yaml:"token_in_amount"`
}

func (m *EstimateSwapExactAmountOutResponse) Reset()         { *m = EstimateSwapExactAmountOutResponse{} }
func (m *EstimateSwapExactAmountOutResponse) String() string { return proto.CompactTextString(m) }
func (*EstimateSwapExactAmountOutResponse) ProtoMessage()    {}
func (*EstimateSwapExactAmountOutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6256a4106f701b7d, []int{9}
}
func (m *EstimateSwapExactAmountOutResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstimateSwapExactAmountOutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstimateSwapExactAmountOutResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstimateSwapExactAmountOutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateSwapExactAmountOutResponse.Merge(m, src)
}
func (m *EstimateSwapExactAmountOutResponse) XXX_Size() int {
	return m.Size()
}
func (m *EstimateSwapExactAmountOutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateSwapExactAmountOutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateSwapExactAmountOutResponse proto.InternalMessageInfo

// =============================== NumPools
type NumPoolsRequest struct {
}

func (m *NumPoolsRequest) Reset()         { *m = NumPoolsRequest{} }
func (m *NumPoolsRequest) String() string { return proto.CompactTextString(m) }
func (*NumPoolsRequest) ProtoMessage()    {}
func (*NumPoolsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6256a4106f701b7d, []int{10}
}
func (m *NumPoolsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NumPoolsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NumPoolsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NumPoolsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NumPoolsRequest.Merge(m, src)
}
func (m *NumPoolsRequest) XXX_Size() int {
	return m.Size()
}
func (m *NumPoolsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NumPoolsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NumPoolsRequest proto.InternalMessageInfo

type NumPoolsResponse struct {
	NumPools uint64 `protobuf:"varint,1,opt,name=num_pools,json=numPools,proto3" json:"num_pools,omitempty" yaml:"num_pools"`
}

func (m *NumPoolsResponse) Reset()         { *m = NumPoolsResponse{} }
func (m *NumPoolsResponse) String() string { return proto.CompactTextString(m) }
func (*NumPoolsResponse) ProtoMessage()    {}
func (*NumPoolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6256a4106f701b7d, []int{11}
}
func (m *NumPoolsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NumPoolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NumPoolsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NumPoolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NumPoolsResponse.Merge(m, src)
}
func (m *NumPoolsResponse) XXX_Size() int {
	return m.Size()
}
func (m *NumPoolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NumPoolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NumPoolsResponse proto.InternalMessageInfo

func (m *NumPoolsResponse) GetNumPools() uint64 {
	if m != nil {
		return m.NumPools
	}
	return 0
}

// =============================== Pool
type PoolRequest struct {
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
}

func (m *PoolRequest) Reset()         { *m = PoolRequest{} }
func (m *PoolRequest) String() string { return proto.CompactTextString(m) }
func (*PoolRequest) ProtoMessage()    {}
func (*PoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6256a4106f701b7d, []int{12}
}
func (m *PoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolRequest.Merge(m, src)
}
func (m *PoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *PoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PoolRequest proto.InternalMessageInfo

func (m *PoolRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

type PoolResponse struct {
	Pool *types1.Any `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
}

func (m *PoolResponse) Reset()         { *m = PoolResponse{} }
func (m *PoolResponse) String() string { return proto.CompactTextString(m) }
func (*PoolResponse) ProtoMessage()    {}
func (*PoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6256a4106f701b7d, []int{13}
}
func (m *PoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolResponse.Merge(m, src)
}
func (m *PoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *PoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PoolResponse proto.InternalMessageInfo

func (m *PoolResponse) GetPool() *types1.Any {
	if m != nil {
		return m.Pool
	}
	return nil
}

// =============================== AllPools
type AllPoolsRequest struct {
}

func (m *AllPoolsRequest) Reset()         { *m = AllPoolsRequest{} }
func (m *AllPoolsRequest) String() string { return proto.CompactTextString(m) }
func (*AllPoolsRequest) ProtoMessage()    {}
func (*AllPoolsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6256a4106f701b7d, []int{14}
}
func (m *AllPoolsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllPoolsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllPoolsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllPoolsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllPoolsRequest.Merge(m, src)
}
func (m *AllPoolsRequest) XXX_Size() int {
	return m.Size()
}
func (m *AllPoolsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AllPoolsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AllPoolsRequest proto.InternalMessageInfo

type AllPoolsResponse struct {
	Pools []*types1.Any `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools,omitempty"`
}

func (m *AllPoolsResponse) Reset()         { *m = AllPoolsResponse{} }
func (m *AllPoolsResponse) String() string { return proto.CompactTextString(m) }
func (*AllPoolsResponse) ProtoMessage()    {}
func (*AllPoolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6256a4106f701b7d, []int{15}
}
func (m *AllPoolsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllPoolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllPoolsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllPoolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllPoolsResponse.Merge(m, src)
}
func (m *AllPoolsResponse) XXX_Size() int {
	return m.Size()
}
func (m *AllPoolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AllPoolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AllPoolsResponse proto.InternalMessageInfo

func (m *AllPoolsResponse) GetPools() []*types1.Any {
	if m != nil {
		return m.Pools
	}
	return nil
}

// =======================================================
// ListPoolsByDenomRequest
type ListPoolsByDenomRequest struct {
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty" yaml:"denom"`
}

func (m *ListPoolsByDenomRequest) Reset()         { *m = ListPoolsByDenomRequest{} }
func (m *ListPoolsByDenomRequest) String() string { return proto.CompactTextString(m) }
func (*ListPoolsByDenomRequest) ProtoMessage()    {}
func (*ListPoolsByDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6256a4106f701b7d, []int{16}
}
func (m *ListPoolsByDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListPoolsByDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListPoolsByDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListPoolsByDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPoolsByDenomRequest.Merge(m, src)
}
func (m *ListPoolsByDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListPoolsByDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPoolsByDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListPoolsByDenomRequest proto.InternalMessageInfo

func (m *ListPoolsByDenomRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

type ListPoolsByDenomResponse struct {
	Pools []*types1.Any `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools,omitempty"`
}

func (m *ListPoolsByDenomResponse) Reset()         { *m = ListPoolsByDenomResponse{} }
func (m *ListPoolsByDenomResponse) String() string { return proto.CompactTextString(m) }
func (*ListPoolsByDenomResponse) ProtoMessage()    {}
func (*ListPoolsByDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6256a4106f701b7d, []int{17}
}
func (m *ListPoolsByDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListPoolsByDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListPoolsByDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListPoolsByDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListPoolsByDenomResponse.Merge(m, src)
}
func (m *ListPoolsByDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListPoolsByDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListPoolsByDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListPoolsByDenomResponse proto.InternalMessageInfo

func (m *ListPoolsByDenomResponse) GetPools() []*types1.Any {
	if m != nil {
		return m.Pools
	}
	return nil
}

// ==========================================================
// SpotPriceRequest defines the gRPC request structure for a SpotPrice
// query.
type SpotPriceRequest struct {
	PoolId          uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	BaseAssetDenom  string `protobuf:"bytes,2,opt,name=base_asset_denom,json=baseAssetDenom,proto3" json:"base_asset_denom,omitempty" yaml:"base_asset_denom"`
	QuoteAssetDenom string `protobuf:"bytes,3,opt,name=quote_asset_denom,json=quoteAssetDenom,proto3" json:"quote_asset_denom,omitempty" yaml:"quote_asset_denom"`
}

func (m *SpotPriceRequest) Reset()         { *m = SpotPriceRequest{} }
func (m *SpotPriceRequest) String() string { return proto.CompactTextString(m) }
func (*SpotPriceRequest) ProtoMessage()    {}
func (*SpotPriceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6256a4106f701b7d, []int{18}
}
func (m *SpotPriceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpotPriceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpotPriceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpotPriceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpotPriceRequest.Merge(m, src)
}
func (m *SpotPriceRequest) XXX_Size() int {
	return m.Size()
}
func (m *SpotPriceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SpotPriceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SpotPriceRequest proto.InternalMessageInfo

func (m *SpotPriceRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *SpotPriceRequest) GetBaseAssetDenom() string {
	if m != nil {
		return m.BaseAssetDenom
	}
	return ""
}

func (m *SpotPriceRequest) GetQuoteAssetDenom() string {
	if m != nil {
		return m.QuoteAssetDenom
	}
	return ""
}

// SpotPriceResponse defines the gRPC response structure for a SpotPrice
// query.
type SpotPriceResponse struct {
	// String of the Dec. Ex) 10.203uatom
	SpotPrice string `protobuf:"bytes,1,opt,name=spot_price,json=spotPrice,proto3" json:"spot_price,omitempty" yaml:"spot_price"`
}

func (m *SpotPriceResponse) Reset()         { *m = SpotPriceResponse{} }
func (m *SpotPriceResponse) String() string { return proto.CompactTextString(m) }
func (*SpotPriceResponse) ProtoMessage()    {}
func (*SpotPriceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6256a4106f701b7d, []int{19}
}
func (m *SpotPriceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SpotPriceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SpotPriceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SpotPriceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SpotPriceResponse.Merge(m, src)
}
func (m *SpotPriceResponse) XXX_Size() int {
	return m.Size()
}
func (m *SpotPriceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SpotPriceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SpotPriceResponse proto.InternalMessageInfo

func (m *SpotPriceResponse) GetSpotPrice() string {
	if m != nil {
		return m.SpotPrice
	}
	return ""
}

// =============================== TotalPoolLiquidity
type TotalPoolLiquidityRequest struct {
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
}

func (m *TotalPoolLiquidityRequest) Reset()         { *m = TotalPoolLiquidityRequest{} }
func (m *TotalPoolLiquidityRequest) String() string { return proto.CompactTextString(m) }
func (*TotalPoolLiquidityRequest) ProtoMessage()    {}
func (*TotalPoolLiquidityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6256a4106f701b7d, []int{20}
}
func (m *TotalPoolLiquidityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TotalPoolLiquidityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TotalPoolLiquidityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TotalPoolLiquidityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TotalPoolLiquidityRequest.Merge(m, src)
}
func (m *TotalPoolLiquidityRequest) XXX_Size() int {
	return m.Size()
}
func (m *TotalPoolLiquidityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TotalPoolLiquidityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TotalPoolLiquidityRequest proto.InternalMessageInfo

func (m *TotalPoolLiquidityRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

type TotalPoolLiquidityResponse struct {
	Liquidity github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=liquidity,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"liquidity" yaml:"liquidity"`
}

func (m *TotalPoolLiquidityResponse) Reset()         { *m = TotalPoolLiquidityResponse{} }
func (m *TotalPoolLiquidityResponse) String() string { return proto.CompactTextString(m) }
func (*TotalPoolLiquidityResponse) ProtoMessage()    {}
func (*TotalPoolLiquidityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6256a4106f701b7d, []int{21}
}
func (m *TotalPoolLiquidityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TotalPoolLiquidityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TotalPoolLiquidityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TotalPoolLiquidityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TotalPoolLiquidityResponse.Merge(m, src)
}
func (m *TotalPoolLiquidityResponse) XXX_Size() int {
	return m.Size()
}
func (m *TotalPoolLiquidityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TotalPoolLiquidityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TotalPoolLiquidityResponse proto.InternalMessageInfo

func (m *TotalPoolLiquidityResponse) GetLiquidity() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Liquidity
	}
	return nil
}

// =============================== TotalLiquidity
type TotalLiquidityRequest struct {
}

func (m *TotalLiquidityRequest) Reset()         { *m = TotalLiquidityRequest{} }
func (m *TotalLiquidityRequest) String() string { return proto.CompactTextString(m) }
func (*TotalLiquidityRequest) ProtoMessage()    {}
func (*TotalLiquidityRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6256a4106f701b7d, []int{22}
}
func (m *TotalLiquidityRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TotalLiquidityRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TotalLiquidityRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TotalLiquidityRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TotalLiquidityRequest.Merge(m, src)
}
func (m *TotalLiquidityRequest) XXX_Size() int {
	return m.Size()
}
func (m *TotalLiquidityRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TotalLiquidityRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TotalLiquidityRequest proto.InternalMessageInfo

type TotalLiquidityResponse struct {
	Liquidity github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=liquidity,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"liquidity" yaml:"liquidity"`
}

func (m *TotalLiquidityResponse) Reset()         { *m = TotalLiquidityResponse{} }
func (m *TotalLiquidityResponse) String() string { return proto.CompactTextString(m) }
func (*TotalLiquidityResponse) ProtoMessage()    {}
func (*TotalLiquidityResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6256a4106f701b7d, []int{23}
}
func (m *TotalLiquidityResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TotalLiquidityResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TotalLiquidityResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TotalLiquidityResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TotalLiquidityResponse.Merge(m, src)
}
func (m *TotalLiquidityResponse) XXX_Size() int {
	return m.Size()
}
func (m *TotalLiquidityResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TotalLiquidityResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TotalLiquidityResponse proto.InternalMessageInfo

func (m *TotalLiquidityResponse) GetLiquidity() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Liquidity
	}
	return nil
}

// =============================== TotalVolumeForPool
type TotalVolumeForPoolRequest struct {
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
}

func (m *TotalVolumeForPoolRequest) Reset()         { *m = TotalVolumeForPoolRequest{} }
func (m *TotalVolumeForPoolRequest) String() string { return proto.CompactTextString(m) }
func (*TotalVolumeForPoolRequest) ProtoMessage()    {}
func (*TotalVolumeForPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6256a4106f701b7d, []int{24}
}
func (m *TotalVolumeForPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TotalVolumeForPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TotalVolumeForPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TotalVolumeForPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TotalVolumeForPoolRequest.Merge(m, src)
}
func (m *TotalVolumeForPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *TotalVolumeForPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TotalVolumeForPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TotalVolumeForPoolRequest proto.InternalMessageInfo

func (m *TotalVolumeForPoolRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

type TotalVolumeForPoolResponse struct {
	Volume github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,1,rep,name=volume,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"volume" yaml:"volume"`
}

func (m *TotalVolumeForPoolResponse) Reset()         { *m = TotalVolumeForPoolResponse{} }
func (m *TotalVolumeForPoolResponse) String() string { return proto.CompactTextString(m) }
func (*TotalVolumeForPoolResponse) ProtoMessage()    {}
func (*TotalVolumeForPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6256a4106f701b7d, []int{25}
}
func (m *TotalVolumeForPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TotalVolumeForPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TotalVolumeForPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TotalVolumeForPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TotalVolumeForPoolResponse.Merge(m, src)
}
func (m *TotalVolumeForPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *TotalVolumeForPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TotalVolumeForPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TotalVolumeForPoolResponse proto.InternalMessageInfo

func (m *TotalVolumeForPoolResponse) GetVolume() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.Volume
	}
	return nil
}

// =============================== TradingPairTakerFee
type TradingPairTakerFeeRequest struct {
	Denom_0 string `protobuf:"bytes,1,opt,name=denom_0,json=denom0,proto3" json:"denom_0,omitempty" yaml:"denom_0"`
	Denom_1 string `protobuf:"bytes,2,opt,name=denom_1,json=denom1,proto3" json:"denom_1,omitempty" yaml:"denom_1"`
}

func (m *TradingPairTakerFeeRequest) Reset()         { *m = TradingPairTakerFeeRequest{} }
func (m *TradingPairTakerFeeRequest) String() string { return proto.CompactTextString(m) }
func (*TradingPairTakerFeeRequest) ProtoMessage()    {}
func (*TradingPairTakerFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6256a4106f701b7d, []int{26}
}
func (m *TradingPairTakerFeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TradingPairTakerFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TradingPairTakerFeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TradingPairTakerFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradingPairTakerFeeRequest.Merge(m, src)
}
func (m *TradingPairTakerFeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *TradingPairTakerFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TradingPairTakerFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TradingPairTakerFeeRequest proto.InternalMessageInfo

func (m *TradingPairTakerFeeRequest) GetDenom_0() string {
	if m != nil {
		return m.Denom_0
	}
	return ""
}

func (m *TradingPairTakerFeeRequest) GetDenom_1() string {
	if m != nil {
		return m.Denom_1
	}
	return ""
}

type TradingPairTakerFeeResponse struct {
	TakerFee github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=taker_fee,json=takerFee,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"taker_fee"`
}

func (m *TradingPairTakerFeeResponse) Reset()         { *m = TradingPairTakerFeeResponse{} }
func (m *TradingPairTakerFeeResponse) String() string { return proto.CompactTextString(m) }
func (*TradingPairTakerFeeResponse) ProtoMessage()    {}
func (*TradingPairTakerFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6256a4106f701b7d, []int{27}
}
func (m *TradingPairTakerFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TradingPairTakerFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TradingPairTakerFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TradingPairTakerFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TradingPairTakerFeeResponse.Merge(m, src)
}
func (m *TradingPairTakerFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *TradingPairTakerFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TradingPairTakerFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TradingPairTakerFeeResponse proto.InternalMessageInfo

// EstimateTradeBasedOnPriceImpactRequest represents a request to estimate a
// trade for Balancer/StableSwap/Concentrated liquidity pool types based on the
// given parameters.
type EstimateTradeBasedOnPriceImpactRequest struct {
	// from_coin is the total amount of tokens that the user wants to sell.
	FromCoin types2.Coin `protobuf:"bytes,1,opt,name=from_coin,json=fromCoin,proto3" json:"from_coin"`
	// to_coin_denom is the denom identifier of the token that the user wants to
	// buy.
	ToCoinDenom string `protobuf:"bytes,2,opt,name=to_coin_denom,json=toCoinDenom,proto3" json:"to_coin_denom,omitempty"`
	// pool_id is the identifier of the liquidity pool that the trade will occur
	// on.
	PoolId uint64 `protobuf:"varint,3,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	// max_price_impact is the maximum percentage that the user is willing
	// to affect the price of the liquidity pool.
	MaxPriceImpact github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,4,opt,name=max_price_impact,json=maxPriceImpact,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"max_price_impact"`
	// external_price is an optional external price that the user can enter.
	// It adjusts the MaxPriceImpact as the SpotPrice of a pool can be changed at
	// any time.
	ExternalPrice github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,5,opt,name=external_price,json=externalPrice,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"external_price"`
}

func (m *EstimateTradeBasedOnPriceImpactRequest) Reset() {
	*m = EstimateTradeBasedOnPriceImpactRequest{}
}
func (m *EstimateTradeBasedOnPriceImpactRequest) String() string { return proto.CompactTextString(m) }
func (*EstimateTradeBasedOnPriceImpactRequest) ProtoMessage()    {}
func (*EstimateTradeBasedOnPriceImpactRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_6256a4106f701b7d, []int{28}
}
func (m *EstimateTradeBasedOnPriceImpactRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstimateTradeBasedOnPriceImpactRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstimateTradeBasedOnPriceImpactRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstimateTradeBasedOnPriceImpactRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateTradeBasedOnPriceImpactRequest.Merge(m, src)
}
func (m *EstimateTradeBasedOnPriceImpactRequest) XXX_Size() int {
	return m.Size()
}
func (m *EstimateTradeBasedOnPriceImpactRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateTradeBasedOnPriceImpactRequest.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateTradeBasedOnPriceImpactRequest proto.InternalMessageInfo

func (m *EstimateTradeBasedOnPriceImpactRequest) GetFromCoin() types2.Coin {
	if m != nil {
		return m.FromCoin
	}
	return types2.Coin{}
}

func (m *EstimateTradeBasedOnPriceImpactRequest) GetToCoinDenom() string {
	if m != nil {
		return m.ToCoinDenom
	}
	return ""
}

func (m *EstimateTradeBasedOnPriceImpactRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

// EstimateTradeBasedOnPriceImpactResponse represents the response data
// for an estimated trade based on price impact. If a trade fails to be
// estimated the response would be 0,0 for input_coin and output_coin and will
// not error.
type EstimateTradeBasedOnPriceImpactResponse struct {
	// input_coin is the actual input amount that would be tradeable
	// under the specified price impact.
	InputCoin types2.Coin `protobuf:"bytes,1,opt,name=input_coin,json=inputCoin,proto3" json:"input_coin"`
	// output_coin is the amount of tokens of the ToCoinDenom type
	// that will be received for the actual InputCoin trade.
	OutputCoin types2.Coin `protobuf:"bytes,2,opt,name=output_coin,json=outputCoin,proto3" json:"output_coin"`
}

func (m *EstimateTradeBasedOnPriceImpactResponse) Reset() {
	*m = EstimateTradeBasedOnPriceImpactResponse{}
}
func (m *EstimateTradeBasedOnPriceImpactResponse) String() string { return proto.CompactTextString(m) }
func (*EstimateTradeBasedOnPriceImpactResponse) ProtoMessage()    {}
func (*EstimateTradeBasedOnPriceImpactResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6256a4106f701b7d, []int{29}
}
func (m *EstimateTradeBasedOnPriceImpactResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EstimateTradeBasedOnPriceImpactResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EstimateTradeBasedOnPriceImpactResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EstimateTradeBasedOnPriceImpactResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EstimateTradeBasedOnPriceImpactResponse.Merge(m, src)
}
func (m *EstimateTradeBasedOnPriceImpactResponse) XXX_Size() int {
	return m.Size()
}
func (m *EstimateTradeBasedOnPriceImpactResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_EstimateTradeBasedOnPriceImpactResponse.DiscardUnknown(m)
}

var xxx_messageInfo_EstimateTradeBasedOnPriceImpactResponse proto.InternalMessageInfo

func (m *EstimateTradeBasedOnPriceImpactResponse) GetInputCoin() types2.Coin {
	if m != nil {
		return m.InputCoin
	}
	return types2.Coin{}
}

func (m *EstimateTradeBasedOnPriceImpactResponse) GetOutputCoin() types2.Coin {
	if m != nil {
		return m.OutputCoin
	}
	return types2.Coin{}
}

func init() {
	proto.RegisterType((*ParamsRequest)(nil), "osmosis.poolmanager.v1beta1.ParamsRequest")
	proto.RegisterType((*ParamsResponse)(nil), "osmosis.poolmanager.v1beta1.ParamsResponse")
	proto.RegisterType((*EstimateSwapExactAmountInRequest)(nil), "osmosis.poolmanager.v1beta1.EstimateSwapExactAmountInRequest")
	proto.RegisterType((*EstimateSwapExactAmountInWithPrimitiveTypesRequest)(nil), "osmosis.poolmanager.v1beta1.EstimateSwapExactAmountInWithPrimitiveTypesRequest")
	proto.RegisterType((*EstimateSinglePoolSwapExactAmountInRequest)(nil), "osmosis.poolmanager.v1beta1.EstimateSinglePoolSwapExactAmountInRequest")
	proto.RegisterType((*EstimateSwapExactAmountInResponse)(nil), "osmosis.poolmanager.v1beta1.EstimateSwapExactAmountInResponse")
	proto.RegisterType((*EstimateSwapExactAmountOutRequest)(nil), "osmosis.poolmanager.v1beta1.EstimateSwapExactAmountOutRequest")
	proto.RegisterType((*EstimateSwapExactAmountOutWithPrimitiveTypesRequest)(nil), "osmosis.poolmanager.v1beta1.EstimateSwapExactAmountOutWithPrimitiveTypesRequest")
	proto.RegisterType((*EstimateSinglePoolSwapExactAmountOutRequest)(nil), "osmosis.poolmanager.v1beta1.EstimateSinglePoolSwapExactAmountOutRequest")
	proto.RegisterType((*EstimateSwapExactAmountOutResponse)(nil), "osmosis.poolmanager.v1beta1.EstimateSwapExactAmountOutResponse")
	proto.RegisterType((*NumPoolsRequest)(nil), "osmosis.poolmanager.v1beta1.NumPoolsRequest")
	proto.RegisterType((*NumPoolsResponse)(nil), "osmosis.poolmanager.v1beta1.NumPoolsResponse")
	proto.RegisterType((*PoolRequest)(nil), "osmosis.poolmanager.v1beta1.PoolRequest")
	proto.RegisterType((*PoolResponse)(nil), "osmosis.poolmanager.v1beta1.PoolResponse")
	proto.RegisterType((*AllPoolsRequest)(nil), "osmosis.poolmanager.v1beta1.AllPoolsRequest")
	proto.RegisterType((*AllPoolsResponse)(nil), "osmosis.poolmanager.v1beta1.AllPoolsResponse")
	proto.RegisterType((*ListPoolsByDenomRequest)(nil), "osmosis.poolmanager.v1beta1.ListPoolsByDenomRequest")
	proto.RegisterType((*ListPoolsByDenomResponse)(nil), "osmosis.poolmanager.v1beta1.ListPoolsByDenomResponse")
	proto.RegisterType((*SpotPriceRequest)(nil), "osmosis.poolmanager.v1beta1.SpotPriceRequest")
	proto.RegisterType((*SpotPriceResponse)(nil), "osmosis.poolmanager.v1beta1.SpotPriceResponse")
	proto.RegisterType((*TotalPoolLiquidityRequest)(nil), "osmosis.poolmanager.v1beta1.TotalPoolLiquidityRequest")
	proto.RegisterType((*TotalPoolLiquidityResponse)(nil), "osmosis.poolmanager.v1beta1.TotalPoolLiquidityResponse")
	proto.RegisterType((*TotalLiquidityRequest)(nil), "osmosis.poolmanager.v1beta1.TotalLiquidityRequest")
	proto.RegisterType((*TotalLiquidityResponse)(nil), "osmosis.poolmanager.v1beta1.TotalLiquidityResponse")
	proto.RegisterType((*TotalVolumeForPoolRequest)(nil), "osmosis.poolmanager.v1beta1.TotalVolumeForPoolRequest")
	proto.RegisterType((*TotalVolumeForPoolResponse)(nil), "osmosis.poolmanager.v1beta1.TotalVolumeForPoolResponse")
	proto.RegisterType((*TradingPairTakerFeeRequest)(nil), "osmosis.poolmanager.v1beta1.TradingPairTakerFeeRequest")
	proto.RegisterType((*TradingPairTakerFeeResponse)(nil), "osmosis.poolmanager.v1beta1.TradingPairTakerFeeResponse")
	proto.RegisterType((*EstimateTradeBasedOnPriceImpactRequest)(nil), "osmosis.poolmanager.v1beta1.EstimateTradeBasedOnPriceImpactRequest")
	proto.RegisterType((*EstimateTradeBasedOnPriceImpactResponse)(nil), "osmosis.poolmanager.v1beta1.EstimateTradeBasedOnPriceImpactResponse")
}

func init() {
	proto.RegisterFile("osmosis/poolmanager/v1beta1/query.proto", fileDescriptor_6256a4106f701b7d)
}

var fileDescriptor_6256a4106f701b7d = []byte{
	// 2041 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x59, 0xcf, 0x73, 0x1b, 0x49,
	0xf5, 0xcf, 0xc8, 0x3f, 0xd6, 0x7a, 0x8e, 0x65, 0xa5, 0x13, 0x27, 0xb6, 0x92, 0xaf, 0xe5, 0xed,
	0xec, 0x37, 0xeb, 0x8d, 0xa3, 0x51, 0x6c, 0x27, 0x24, 0x04, 0x76, 0x83, 0x64, 0x3b, 0x1b, 0x41,
	0x20, 0xde, 0x89, 0xf7, 0x07, 0x0b, 0x61, 0x6a, 0x6c, 0x75, 0x94, 0x21, 0x9a, 0x19, 0x45, 0xd3,
	0xe3, 0x58, 0x45, 0xed, 0x85, 0x2a, 0x0a, 0x2e, 0x50, 0x0b, 0x1c, 0xf6, 0xc0, 0x81, 0xe2, 0xc0,
	0x85, 0x1f, 0x37, 0x38, 0x70, 0xe7, 0x90, 0xa2, 0x0a, 0x2a, 0x55, 0x70, 0xa0, 0x38, 0x08, 0x2a,
	0xe1, 0x40, 0x15, 0x14, 0x07, 0xf1, 0x0f, 0x50, 0xfd, 0x63, 0x46, 0xd2, 0x58, 0x1a, 0x8d, 0xe4,
	0x1c, 0x38, 0x45, 0xee, 0x7e, 0xef, 0xf5, 0xfb, 0x7c, 0xfa, 0x7d, 0xba, 0xfb, 0x4d, 0xe0, 0x75,
	0xc7, 0xb5, 0x1c, 0xd7, 0x74, 0xf3, 0x35, 0xc7, 0xa9, 0x5a, 0x86, 0x6d, 0x54, 0x48, 0x3d, 0xbf,
	0xbf, 0xba, 0x4b, 0xa8, 0xb1, 0x9a, 0x7f, 0xec, 0x91, 0x7a, 0x43, 0xad, 0xd5, 0x1d, 0xea, 0xa0,
	0xb3, 0xd2, 0x50, 0xed, 0x30, 0x54, 0xa5, 0x61, 0xe6, 0x54, 0xc5, 0xa9, 0x38, 0xdc, 0x2e, 0xcf,
	0x7e, 0x09, 0x97, 0xcc, 0x1b, 0x51, 0xb1, 0x2b, 0xc4, 0x26, 0x3c, 0x1c, 0x37, 0x7d, 0x2d, 0xca,
	0x94, 0x1e, 0x48, 0xab, 0x4b, 0x51, 0x56, 0xee, 0x13, 0xa3, 0xa6, 0xd7, 0x1d, 0x8f, 0x12, 0x69,
	0xbd, 0xb8, 0xc7, 0xcd, 0xf3, 0xbb, 0x86, 0x4b, 0x02, 0xab, 0x3d, 0xc7, 0xb4, 0xe5, 0xfc, 0xc5,
	0xce, 0x79, 0x0e, 0x35, 0xb0, 0xaa, 0x19, 0x15, 0xd3, 0x36, 0xa8, 0xe9, 0xf8, 0xb6, 0xe7, 0x2a,
	0x8e, 0x53, 0xa9, 0x92, 0xbc, 0x51, 0x33, 0xf3, 0x86, 0x6d, 0x3b, 0x94, 0x4f, 0xfa, 0xd9, 0x2f,
	0xc8, 0x59, 0xfe, 0xd7, 0xae, 0xf7, 0x20, 0x6f, 0xd8, 0x0d, 0x7f, 0x4a, 0x2c, 0xa2, 0x0b, 0x72,
	0xc4, 0x1f, 0x72, 0x2a, 0x1b, 0xf6, 0xa2, 0xa6, 0x45, 0x5c, 0x6a, 0x58, 0x35, 0x61, 0x80, 0x67,
	0x61, 0x66, 0xdb, 0xa8, 0x1b, 0x96, 0xab, 0x91, 0xc7, 0x1e, 0x71, 0x29, 0xbe, 0x07, 0x29, 0x7f,
	0xc0, 0xad, 0x39, 0xb6, 0x4b, 0x50, 0x01, 0x26, 0x6b, 0x7c, 0x64, 0x5e, 0x59, 0x52, 0x96, 0xa7,
	0xd7, 0xce, 0xab, 0x11, 0xdb, 0xa4, 0x0a, 0xe7, 0xe2, 0xf8, 0xd3, 0x66, 0xf6, 0x98, 0x26, 0x1d,
	0xf1, 0xbf, 0x15, 0x58, 0xda, 0x72, 0xa9, 0x69, 0x19, 0x94, 0xdc, 0x7b, 0x62, 0xd4, 0xb6, 0x0e,
	0x8c, 0x3d, 0x5a, 0xb0, 0x1c, 0xcf, 0xa6, 0x25, 0x5b, 0xae, 0x8c, 0x72, 0xf0, 0x0a, 0x0b, 0xa8,
	0x9b, 0xe5, 0xf9, 0xc4, 0x92, 0xb2, 0x3c, 0x5e, 0x3c, 0xd5, 0x6a, 0x66, 0x53, 0x0d, 0xc3, 0xaa,
	0xde, 0xc0, 0x72, 0x02, 0xcf, 0x2b, 0xda, 0x24, 0xfb, 0x5d, 0x2a, 0x23, 0x15, 0xa6, 0xa8, 0xf3,
	0x88, 0xd8, 0xba, 0x69, 0xcf, 0x8f, 0x2d, 0x29, 0xcb, 0xc9, 0xe2, 0xc9, 0x56, 0x33, 0x3b, 0x2b,
	0xec, 0xfd, 0x19, 0xac, 0xbd, 0xc2, 0x7f, 0x96, 0x6c, 0x74, 0x1f, 0x26, 0xf9, 0xce, 0xb9, 0xf3,
	0xe3, 0x4b, 0x63, 0xcb, 0xd3, 0x6b, 0x6a, 0x24, 0x0c, 0x96, 0x65, 0x90, 0x20, 0x73, 0x2b, 0xce,
	0x31, 0x44, 0xad, 0x66, 0x76, 0x46, 0xac, 0x20, 0x62, 0x61, 0x4d, 0x06, 0xfd, 0xfc, 0xf8, 0x94,
	0x92, 0x4e, 0x68, 0x93, 0x2e, 0xb1, 0xcb, 0xa4, 0x8e, 0x7f, 0x91, 0x80, 0xb5, 0xbe, 0x80, 0xdf,
	0x37, 0xe9, 0xc3, 0xed, 0xba, 0x69, 0x99, 0xd4, 0xdc, 0x27, 0x3b, 0x8d, 0x1a, 0x71, 0x7b, 0x50,
	0xa0, 0x0c, 0x49, 0x41, 0x22, 0x06, 0x05, 0x37, 0x21, 0x25, 0xb2, 0xd5, 0xfd, 0x55, 0xc6, 0x96,
	0xc6, 0x96, 0xc7, 0x8b, 0x0b, 0xad, 0x66, 0x76, 0xae, 0x13, 0x96, 0x3f, 0x8f, 0xb5, 0xe3, 0x62,
	0x60, 0x5b, 0x2c, 0xf8, 0x1e, 0x9c, 0x96, 0x06, 0x22, 0xba, 0xe3, 0x51, 0xbd, 0x4c, 0x6c, 0xc7,
	0xe2, 0x9c, 0x26, 0x8b, 0xaf, 0xb6, 0x9a, 0xd9, 0xff, 0xeb, 0x0a, 0x14, 0xb2, 0xc3, 0xda, 0x49,
	0x31, 0xb1, 0xc3, 0xc6, 0xef, 0x7a, 0x74, 0x93, 0x8f, 0xfe, 0x5e, 0x81, 0x8b, 0x01, 0x5d, 0xa6,
	0x5d, 0xa9, 0x12, 0xb6, 0x60, 0xdf, 0x4a, 0x59, 0x09, 0xd3, 0x84, 0x0e, 0xd3, 0x34, 0x32, 0x49,
	0x45, 0x98, 0x0d, 0x83, 0x13, 0xe5, 0x95, 0x69, 0x35, 0xb3, 0xa7, 0x3b, 0xdd, 0x3a, 0x50, 0xcd,
	0xd0, 0x2e, 0x3c, 0xdf, 0x56, 0xe0, 0xd5, 0x88, 0x7a, 0x97, 0xc2, 0xda, 0x85, 0x74, 0x3b, 0x90,
	0xc1, 0x67, 0x39, 0x9e, 0x64, 0xf1, 0x3a, 0xab, 0xb5, 0xbf, 0x34, 0xb3, 0x73, 0x42, 0xcc, 0x6e,
	0xf9, 0x91, 0x6a, 0x3a, 0x79, 0xcb, 0xa0, 0x0f, 0xd5, 0x92, 0x4d, 0x5b, 0xcd, 0xec, 0x99, 0x70,
	0x1e, 0xc2, 0x1d, 0x6b, 0x29, 0x3f, 0x11, 0xb1, 0x1a, 0xfe, 0x4f, 0xff, 0x4c, 0xee, 0x7a, 0x74,
	0x44, 0xe9, 0x7d, 0x2d, 0x90, 0xd2, 0x18, 0x97, 0x52, 0x3e, 0xa6, 0x94, 0xd8, 0x8a, 0x31, 0xb4,
	0x84, 0x56, 0x21, 0x19, 0x20, 0x9b, 0x1f, 0xe7, 0x8c, 0xb0, 0x84, 0xd2, 0x21, 0xd0, 0x58, 0x9b,
	0xf2, 0xd1, 0x86, 0xe4, 0xf7, 0xcb, 0x04, 0xac, 0xf7, 0x47, 0xfd, 0xd2, 0xf4, 0x77, 0x58, 0x4f,
	0x89, 0xe1, 0xf4, 0x74, 0x0f, 0xe6, 0xba, 0x74, 0x62, 0xda, 0x41, 0xc5, 0x31, 0x39, 0x2d, 0xb5,
	0x9a, 0xd9, 0x73, 0x3d, 0xe4, 0xe4, 0x9b, 0x61, 0x0d, 0x75, 0xa8, 0xa9, 0x64, 0xf3, 0xe2, 0x1b,
	0x81, 0x3d, 0xfc, 0x07, 0x05, 0x56, 0x06, 0xea, 0xaf, 0xa3, 0x5e, 0x86, 0x12, 0xe0, 0x4d, 0x48,
	0x85, 0xd0, 0x09, 0x19, 0x76, 0xb0, 0x14, 0x86, 0x75, 0x9c, 0xf6, 0x05, 0x34, 0x16, 0x0b, 0xd0,
	0xb7, 0x14, 0xc0, 0x51, 0x65, 0x2f, 0x15, 0xa8, 0xfb, 0x5a, 0x37, 0xed, 0x6e, 0x01, 0x5e, 0x1b,
	0x24, 0xc0, 0xd3, 0xa1, 0xc4, 0x7d, 0xfd, 0xcd, 0xc8, 0xcc, 0xa5, 0xfc, 0x4e, 0xc0, 0xec, 0x97,
	0x3c, 0x8b, 0x91, 0x19, 0x5c, 0xb0, 0x5b, 0x90, 0x6e, 0x0f, 0xc9, 0x3c, 0x56, 0x21, 0x69, 0x7b,
	0x16, 0xaf, 0x12, 0xb7, 0xa3, 0xf2, 0x24, 0xc2, 0x60, 0x0a, 0x6b, 0x53, 0xb6, 0x74, 0xc5, 0x37,
	0x60, 0x9a, 0xfd, 0x18, 0x65, 0x47, 0xf0, 0x06, 0x1c, 0x17, 0xbe, 0x72, 0xf9, 0x75, 0x18, 0x67,
	0x33, 0xf2, 0x7e, 0x3f, 0xa5, 0x8a, 0x47, 0x83, 0xea, 0x3f, 0x1a, 0xd4, 0x82, 0xdd, 0x28, 0x26,
	0x7f, 0xf7, 0xab, 0xdc, 0x04, 0x2f, 0x5b, 0x8d, 0x1b, 0x33, 0x68, 0x85, 0x6a, 0xb5, 0x0b, 0x5a,
	0x09, 0xd2, 0xed, 0x21, 0x19, 0xfb, 0x2a, 0x4c, 0xf8, 0xb0, 0xc6, 0xe2, 0x04, 0x17, 0xd6, 0xb8,
	0x00, 0x67, 0xee, 0x98, 0x2e, 0xe5, 0xb1, 0x8a, 0x0d, 0x5e, 0x07, 0x3e, 0xd4, 0x0b, 0x30, 0x21,
	0xca, 0x48, 0x6c, 0x55, 0xba, 0xd5, 0xcc, 0x1e, 0x17, 0x40, 0x65, 0xf5, 0x88, 0x69, 0xfc, 0x0e,
	0xcc, 0x1f, 0x0e, 0x71, 0xb4, 0xac, 0x9e, 0x29, 0x90, 0xbe, 0x57, 0x73, 0xe8, 0x76, 0xdd, 0xdc,
	0x23, 0x23, 0x89, 0x61, 0x0b, 0xd2, 0xec, 0x2d, 0xa8, 0x1b, 0xae, 0x4b, 0x68, 0x97, 0x1c, 0xce,
	0xb6, 0x8f, 0xf5, 0xb0, 0x05, 0xd6, 0x52, 0x6c, 0xa8, 0xc0, 0x46, 0x84, 0x24, 0x6e, 0xc3, 0x89,
	0xc7, 0x9e, 0x43, 0xbb, 0xe3, 0x08, 0x69, 0x9c, 0x6b, 0x35, 0xb3, 0xf3, 0x22, 0xce, 0x21, 0x13,
	0xac, 0xcd, 0xf2, 0xb1, 0x76, 0x24, 0x5c, 0x82, 0x13, 0x1d, 0x88, 0x24, 0x3d, 0x57, 0x00, 0xdc,
	0x9a, 0x43, 0xf5, 0x1a, 0x1b, 0x95, 0x3c, 0xcf, 0xb5, 0x9a, 0xd9, 0x13, 0x22, 0x6e, 0x7b, 0x0e,
	0x6b, 0x49, 0xd7, 0xf7, 0xc6, 0xb7, 0x61, 0x61, 0xc7, 0xa1, 0x06, 0x2f, 0x80, 0x3b, 0xe6, 0x63,
	0xcf, 0x2c, 0x9b, 0xb4, 0x31, 0x52, 0x81, 0xfe, 0x48, 0x81, 0x4c, 0xaf, 0x50, 0x32, 0xbd, 0x8f,
	0x20, 0x59, 0xf5, 0x07, 0xe5, 0x0e, 0x2e, 0xa8, 0xf2, 0xdd, 0xcb, 0x88, 0x0a, 0xae, 0x9e, 0x0d,
	0xc7, 0xb4, 0x8b, 0x9b, 0xf2, 0xb2, 0x91, 0x6a, 0x0a, 0x3c, 0xf1, 0xcf, 0xfe, 0x9a, 0x5d, 0xae,
	0x98, 0xf4, 0xa1, 0xb7, 0xab, 0xee, 0x39, 0x96, 0x7c, 0x38, 0xcb, 0x7f, 0x72, 0x6e, 0xf9, 0x51,
	0x9e, 0xb2, 0xbb, 0x81, 0x07, 0x71, 0xb5, 0xf6, 0x8a, 0xf8, 0x0c, 0xcc, 0xf1, 0xe4, 0xc2, 0x18,
	0xf1, 0x27, 0x0a, 0x9c, 0x0e, 0xcf, 0xfc, 0x6f, 0xa4, 0xec, 0x6f, 0xcd, 0x7b, 0x4e, 0xd5, 0xb3,
	0xc8, 0x2d, 0xa7, 0x3e, 0xf2, 0xd9, 0xf1, 0x03, 0x7f, 0x6b, 0x42, 0xa1, 0x24, 0x4e, 0x0a, 0x93,
	0xfb, 0x7c, 0x62, 0x30, 0xc8, 0x42, 0xf7, 0x23, 0x40, 0xb8, 0x0d, 0x87, 0x50, 0xae, 0x85, 0xf7,
	0x21, 0xb3, 0x53, 0x37, 0xca, 0xa6, 0x5d, 0xd9, 0x36, 0xcc, 0xfa, 0x8e, 0xf1, 0x88, 0xd4, 0x6f,
	0x91, 0x4e, 0x81, 0xf2, 0xea, 0xd7, 0x2f, 0xcb, 0x52, 0xee, 0xc0, 0x27, 0x27, 0xb0, 0x36, 0xc9,
	0x7f, 0x5d, 0x6e, 0x1b, 0xaf, 0x4a, 0x5d, 0x1e, 0x32, 0x5e, 0xf5, 0x8d, 0x57, 0xf1, 0xd7, 0xe1,
	0x6c, 0xcf, 0x75, 0x25, 0x19, 0x5f, 0x80, 0x24, 0x65, 0x63, 0xfa, 0x03, 0xe2, 0xab, 0x48, 0x95,
	0x17, 0xcb, 0x85, 0x18, 0x18, 0x37, 0xc9, 0x9e, 0x36, 0x45, 0x65, 0x50, 0xfc, 0xa7, 0x04, 0x5c,
	0xf0, 0xaf, 0x34, 0xb6, 0x28, 0x29, 0x1a, 0x2e, 0x29, 0xdf, 0xb5, 0xb9, 0xf6, 0x4a, 0x56, 0xcd,
	0xd8, 0x0b, 0xae, 0xe7, 0xcf, 0x42, 0xf2, 0x41, 0xdd, 0xb1, 0x74, 0xd6, 0x88, 0xca, 0x43, 0x3d,
	0x62, 0x1f, 0x44, 0xab, 0x36, 0xc5, 0x3c, 0xd8, 0xdf, 0x08, 0xc3, 0x0c, 0x75, 0xb8, 0x6f, 0xe7,
	0xf9, 0xa4, 0x4d, 0x53, 0x87, 0x4d, 0x8b, 0xf3, 0xe7, 0x4c, 0xbb, 0x64, 0xd8, 0xa9, 0x33, 0x1e,
	0x9c, 0x6f, 0x1f, 0x40, 0xda, 0x32, 0x0e, 0xc4, 0xe1, 0xa0, 0x9b, 0x3c, 0x2b, 0xf9, 0x06, 0x19,
	0x16, 0x79, 0xca, 0x32, 0x0e, 0x3a, 0xb0, 0xa1, 0x77, 0x21, 0x45, 0x0e, 0x28, 0xa9, 0xdb, 0x46,
	0x55, 0x9e, 0x4b, 0x13, 0x23, 0xc5, 0x9d, 0xf1, 0xa3, 0x88, 0x43, 0xeb, 0xe7, 0x0a, 0xbc, 0x3e,
	0x90, 0x56, 0xb9, 0x9f, 0x6f, 0x01, 0x98, 0x76, 0xcd, 0xa3, 0x43, 0x11, 0x9b, 0xe4, 0x2e, 0x9c,
	0xd9, 0xcf, 0xc1, 0xb4, 0xe3, 0xd1, 0x20, 0x40, 0x22, 0x5e, 0x00, 0x10, 0x3e, 0x6c, 0x64, 0xed,
	0xbb, 0xe7, 0x60, 0xe2, 0x1d, 0x8f, 0xd4, 0x1b, 0xe8, 0x7b, 0x0a, 0x4c, 0x8a, 0x5e, 0x1b, 0x5d,
	0x8c, 0xd1, 0x90, 0xcb, 0xd2, 0xc8, 0xac, 0xc4, 0xb2, 0x15, 0x78, 0xf1, 0xca, 0x37, 0xff, 0xf8,
	0xf7, 0x1f, 0x26, 0xfe, 0x1f, 0x9d, 0xcf, 0x47, 0x7d, 0x14, 0x91, 0x59, 0xfc, 0x43, 0x81, 0x85,
	0xbe, 0x3d, 0x0f, 0x7a, 0x33, 0x72, 0xdd, 0x41, 0xdf, 0x06, 0x32, 0x6f, 0x8d, 0xea, 0x2e, 0x91,
	0xdc, 0xe1, 0x48, 0x6e, 0xa1, 0xcd, 0x48, 0x24, 0xdf, 0x90, 0x35, 0xfd, 0x51, 0x9e, 0xc8, 0x88,
	0xe2, 0x8b, 0x0f, 0x61, 0x31, 0xe5, 0x13, 0x4f, 0x37, 0x6d, 0xf4, 0x93, 0x44, 0xc7, 0x73, 0x79,
	0x70, 0x77, 0x8f, 0xee, 0x8e, 0x96, 0x7d, 0xdf, 0x3e, 0xe5, 0xc8, 0x74, 0x18, 0x9c, 0x8e, 0xaf,
	0xa0, 0x2f, 0xbf, 0x0c, 0x3a, 0xf4, 0x27, 0x26, 0x7d, 0xc8, 0x24, 0x29, 0x12, 0xd5, 0xb9, 0xd4,
	0xd0, 0x77, 0x12, 0x70, 0x3e, 0x46, 0x4b, 0x8f, 0xde, 0x8e, 0x07, 0x65, 0xe0, 0x47, 0x81, 0x23,
	0x73, 0xf2, 0x01, 0xe7, 0x44, 0x43, 0xdb, 0x43, 0x73, 0xc2, 0x73, 0x13, 0x2d, 0x5e, 0xcf, 0x72,
	0xf9, 0x97, 0x02, 0x99, 0xfe, 0xcd, 0x08, 0x1a, 0x29, 0xf1, 0x76, 0x33, 0x96, 0xb9, 0x39, 0xb2,
	0xbf, 0x44, 0xfe, 0x45, 0x8e, 0xfc, 0x6d, 0xb4, 0x75, 0xf4, 0x6a, 0x70, 0x3c, 0x8a, 0x7e, 0x9a,
	0x80, 0x4b, 0xc3, 0x34, 0xdf, 0x68, 0x7b, 0x44, 0x00, 0xfd, 0xf5, 0x71, 0x64, 0x4a, 0x76, 0x39,
	0x25, 0x5f, 0x45, 0x1f, 0xbe, 0x14, 0x4a, 0x7a, 0x2b, 0xe4, 0xe3, 0x04, 0xbc, 0x16, 0xa7, 0xe9,
	0x46, 0xb7, 0x8f, 0x26, 0x91, 0x97, 0x59, 0x2a, 0xf7, 0x39, 0x2f, 0xef, 0xa3, 0x77, 0x87, 0xe4,
	0x85, 0xb1, 0x30, 0x40, 0x28, 0xac, 0x74, 0x3e, 0x51, 0x60, 0xca, 0x6f, 0x8e, 0xd1, 0xa5, 0xc8,
	0x64, 0x43, 0x6d, 0x75, 0x26, 0x17, 0xd3, 0x5a, 0x02, 0x51, 0x39, 0x90, 0x65, 0x74, 0x21, 0x12,
	0x48, 0xd0, 0x79, 0xa3, 0xef, 0x2b, 0x30, 0xce, 0x22, 0xa0, 0xe5, 0xe8, 0x0b, 0xb4, 0xfd, 0xac,
	0xce, 0xbc, 0x11, 0xc3, 0x52, 0x66, 0x73, 0x85, 0x67, 0xa3, 0xa2, 0x4b, 0x91, 0xd9, 0xf0, 0x4c,
	0xda, 0xe4, 0x72, 0xb6, 0xfc, 0x7e, 0x7b, 0x00, 0x5b, 0xa1, 0x4e, 0x7d, 0x00, 0x5b, 0xe1, 0x26,
	0x3e, 0x26, 0x5b, 0x46, 0xb5, 0x9a, 0x13, 0x6c, 0xfd, 0x46, 0x81, 0x74, 0xb8, 0xf7, 0x46, 0x57,
	0x22, 0xd7, 0xec, 0xd3, 0xed, 0x67, 0xae, 0x0e, 0xe9, 0x25, 0x33, 0xbe, 0xce, 0x33, 0x5e, 0x43,
	0x97, 0x23, 0x33, 0xae, 0x9a, 0x2e, 0x15, 0x29, 0xe7, 0x76, 0x1b, 0x39, 0xfe, 0xda, 0x45, 0x3f,
	0x56, 0x20, 0x19, 0x74, 0xc4, 0x28, 0x9a, 0xa8, 0xf0, 0xb7, 0x80, 0x8c, 0x1a, 0xd7, 0x5c, 0xa6,
	0xb9, 0xce, 0xd3, 0xcc, 0xa1, 0x95, 0x9e, 0x69, 0x86, 0x36, 0x3c, 0xcf, 0x9f, 0xbd, 0x2e, 0x7a,
	0xa6, 0x00, 0x3a, 0xdc, 0x1d, 0xa3, 0x4f, 0x45, 0xae, 0xdd, 0xb7, 0x33, 0xcf, 0x5c, 0x1b, 0xda,
	0x4f, 0x26, 0x5f, 0xe2, 0xc9, 0x6f, 0xa0, 0xc2, 0x30, 0x55, 0x9b, 0xa7, 0x2c, 0xa0, 0x38, 0x04,
	0x82, 0xfe, 0x14, 0xfd, 0x5a, 0x81, 0x54, 0x77, 0xe7, 0x8c, 0xd6, 0x06, 0xa7, 0x75, 0x08, 0xca,
	0xfa, 0x50, 0x3e, 0x12, 0xc6, 0x0d, 0x0e, 0xe3, 0x0a, 0x5a, 0x8b, 0x01, 0x43, 0x24, 0xdf, 0xce,
	0xfb, 0xa9, 0xbf, 0x15, 0x5d, 0xdd, 0x70, 0x9c, 0xad, 0xe8, 0xd5, 0x89, 0xc7, 0xd9, 0x8a, 0x9e,
	0x6d, 0x37, 0x2e, 0x70, 0x0c, 0x9f, 0x41, 0x9f, 0x1e, 0x61, 0x2b, 0x44, 0x0f, 0x8d, 0x7e, 0xab,
	0xc0, 0xc9, 0x1e, 0xcd, 0x2c, 0x1a, 0x90, 0x53, 0xdf, 0xb6, 0x3b, 0x73, 0x7d, 0x78, 0xc7, 0xa1,
	0x76, 0x84, 0x8a, 0x08, 0x7a, 0xcd, 0x30, 0xeb, 0x3a, 0x6f, 0x93, 0x1f, 0x10, 0x82, 0xfe, 0xa9,
	0x40, 0x76, 0x40, 0x3f, 0x87, 0x36, 0x62, 0x5d, 0x83, 0xd1, 0x4d, 0x76, 0x66, 0xf3, 0x68, 0x41,
	0x24, 0xd4, 0x37, 0x39, 0xd4, 0x6b, 0xe8, 0xea, 0xb0, 0x17, 0x2a, 0xe5, 0x81, 0xef, 0x3f, 0x7d,
	0xbe, 0xa8, 0x3c, 0x7b, 0xbe, 0xa8, 0xfc, 0xed, 0xf9, 0xa2, 0xf2, 0xf1, 0x8b, 0xc5, 0x63, 0xcf,
	0x5e, 0x2c, 0x1e, 0xfb, 0xf3, 0x8b, 0xc5, 0x63, 0x1f, 0x6e, 0x74, 0xb4, 0xc3, 0x32, 0x74, 0xae,
	0x6a, 0xec, 0xba, 0xc1, 0x3a, 0xfb, 0x6b, 0xab, 0xf9, 0x83, 0xae, 0xd5, 0xf6, 0xaa, 0x26, 0xb1,
	0xa9, 0xf8, 0x6f, 0x6a, 0xf1, 0x21, 0x74, 0x92, 0xff, 0xb3, 0xfe, 0xdf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xb3, 0xf8, 0xe5, 0xf8, 0xc2, 0x1f, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	Params(ctx context.Context, in *ParamsRequest, opts ...grpc.CallOption) (*ParamsResponse, error)
	// Estimates swap amount out given in.
	EstimateSwapExactAmountIn(ctx context.Context, in *EstimateSwapExactAmountInRequest, opts ...grpc.CallOption) (*EstimateSwapExactAmountInResponse, error)
	// EstimateSwapExactAmountInWithPrimitiveTypes is an alternative query for
	// EstimateSwapExactAmountIn. Supports query via GRPC-Gateway by using
	// primitive types instead of repeated structs. Each index in the
	// routes_pool_id field corresponds to the respective routes_token_out_denom
	// value, thus they are required to have the same length and are grouped
	// together as pairs.
	// example usage:
	// http://0.0.0.0:1317/osmosis/poolmanager/v1beta1/1/estimate/
	// swap_exact_amount_in_with_primitive_types?token_in=100000stake&routes_token_out_denom=uatom
	// &routes_token_out_denom=uion&routes_pool_id=1&routes_pool_id=2
	EstimateSwapExactAmountInWithPrimitiveTypes(ctx context.Context, in *EstimateSwapExactAmountInWithPrimitiveTypesRequest, opts ...grpc.CallOption) (*EstimateSwapExactAmountInResponse, error)
	EstimateSinglePoolSwapExactAmountIn(ctx context.Context, in *EstimateSinglePoolSwapExactAmountInRequest, opts ...grpc.CallOption) (*EstimateSwapExactAmountInResponse, error)
	// Estimates swap amount in given out.
	EstimateSwapExactAmountOut(ctx context.Context, in *EstimateSwapExactAmountOutRequest, opts ...grpc.CallOption) (*EstimateSwapExactAmountOutResponse, error)
	// Estimates swap amount in given out.
	EstimateSwapExactAmountOutWithPrimitiveTypes(ctx context.Context, in *EstimateSwapExactAmountOutWithPrimitiveTypesRequest, opts ...grpc.CallOption) (*EstimateSwapExactAmountOutResponse, error)
	EstimateSinglePoolSwapExactAmountOut(ctx context.Context, in *EstimateSinglePoolSwapExactAmountOutRequest, opts ...grpc.CallOption) (*EstimateSwapExactAmountOutResponse, error)
	// Returns the total number of pools existing in Osmosis.
	NumPools(ctx context.Context, in *NumPoolsRequest, opts ...grpc.CallOption) (*NumPoolsResponse, error)
	// Pool returns the Pool specified by the pool id
	Pool(ctx context.Context, in *PoolRequest, opts ...grpc.CallOption) (*PoolResponse, error)
	// AllPools returns all pools on the Osmosis chain sorted by IDs.
	AllPools(ctx context.Context, in *AllPoolsRequest, opts ...grpc.CallOption) (*AllPoolsResponse, error)
	// ListPoolsByDenom return all pools by denom
	ListPoolsByDenom(ctx context.Context, in *ListPoolsByDenomRequest, opts ...grpc.CallOption) (*ListPoolsByDenomResponse, error)
	// SpotPrice defines a gRPC query handler that returns the spot price given
	// a base denomination and a quote denomination.
	SpotPrice(ctx context.Context, in *SpotPriceRequest, opts ...grpc.CallOption) (*SpotPriceResponse, error)
	// TotalPoolLiquidity returns the total liquidity of the specified pool.
	TotalPoolLiquidity(ctx context.Context, in *TotalPoolLiquidityRequest, opts ...grpc.CallOption) (*TotalPoolLiquidityResponse, error)
	// TotalLiquidity returns the total liquidity across all pools.
	TotalLiquidity(ctx context.Context, in *TotalLiquidityRequest, opts ...grpc.CallOption) (*TotalLiquidityResponse, error)
	// TotalVolumeForPool returns the total volume of the specified pool.
	TotalVolumeForPool(ctx context.Context, in *TotalVolumeForPoolRequest, opts ...grpc.CallOption) (*TotalVolumeForPoolResponse, error)
	// TradingPairTakerFee returns the taker fee for a given set of denoms
	TradingPairTakerFee(ctx context.Context, in *TradingPairTakerFeeRequest, opts ...grpc.CallOption) (*TradingPairTakerFeeResponse, error)
	// EstimateTradeBasedOnPriceImpact returns an estimated trade based on price
	// impact, if a trade cannot be estimated a 0 input and 0 output would be
	// returned.
	EstimateTradeBasedOnPriceImpact(ctx context.Context, in *EstimateTradeBasedOnPriceImpactRequest, opts ...grpc.CallOption) (*EstimateTradeBasedOnPriceImpactResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *ParamsRequest, opts ...grpc.CallOption) (*ParamsResponse, error) {
	out := new(ParamsResponse)
	err := c.cc.Invoke(ctx, "/osmosis.poolmanager.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EstimateSwapExactAmountIn(ctx context.Context, in *EstimateSwapExactAmountInRequest, opts ...grpc.CallOption) (*EstimateSwapExactAmountInResponse, error) {
	out := new(EstimateSwapExactAmountInResponse)
	err := c.cc.Invoke(ctx, "/osmosis.poolmanager.v1beta1.Query/EstimateSwapExactAmountIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EstimateSwapExactAmountInWithPrimitiveTypes(ctx context.Context, in *EstimateSwapExactAmountInWithPrimitiveTypesRequest, opts ...grpc.CallOption) (*EstimateSwapExactAmountInResponse, error) {
	out := new(EstimateSwapExactAmountInResponse)
	err := c.cc.Invoke(ctx, "/osmosis.poolmanager.v1beta1.Query/EstimateSwapExactAmountInWithPrimitiveTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EstimateSinglePoolSwapExactAmountIn(ctx context.Context, in *EstimateSinglePoolSwapExactAmountInRequest, opts ...grpc.CallOption) (*EstimateSwapExactAmountInResponse, error) {
	out := new(EstimateSwapExactAmountInResponse)
	err := c.cc.Invoke(ctx, "/osmosis.poolmanager.v1beta1.Query/EstimateSinglePoolSwapExactAmountIn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EstimateSwapExactAmountOut(ctx context.Context, in *EstimateSwapExactAmountOutRequest, opts ...grpc.CallOption) (*EstimateSwapExactAmountOutResponse, error) {
	out := new(EstimateSwapExactAmountOutResponse)
	err := c.cc.Invoke(ctx, "/osmosis.poolmanager.v1beta1.Query/EstimateSwapExactAmountOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EstimateSwapExactAmountOutWithPrimitiveTypes(ctx context.Context, in *EstimateSwapExactAmountOutWithPrimitiveTypesRequest, opts ...grpc.CallOption) (*EstimateSwapExactAmountOutResponse, error) {
	out := new(EstimateSwapExactAmountOutResponse)
	err := c.cc.Invoke(ctx, "/osmosis.poolmanager.v1beta1.Query/EstimateSwapExactAmountOutWithPrimitiveTypes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EstimateSinglePoolSwapExactAmountOut(ctx context.Context, in *EstimateSinglePoolSwapExactAmountOutRequest, opts ...grpc.CallOption) (*EstimateSwapExactAmountOutResponse, error) {
	out := new(EstimateSwapExactAmountOutResponse)
	err := c.cc.Invoke(ctx, "/osmosis.poolmanager.v1beta1.Query/EstimateSinglePoolSwapExactAmountOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NumPools(ctx context.Context, in *NumPoolsRequest, opts ...grpc.CallOption) (*NumPoolsResponse, error) {
	out := new(NumPoolsResponse)
	err := c.cc.Invoke(ctx, "/osmosis.poolmanager.v1beta1.Query/NumPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Pool(ctx context.Context, in *PoolRequest, opts ...grpc.CallOption) (*PoolResponse, error) {
	out := new(PoolResponse)
	err := c.cc.Invoke(ctx, "/osmosis.poolmanager.v1beta1.Query/Pool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllPools(ctx context.Context, in *AllPoolsRequest, opts ...grpc.CallOption) (*AllPoolsResponse, error) {
	out := new(AllPoolsResponse)
	err := c.cc.Invoke(ctx, "/osmosis.poolmanager.v1beta1.Query/AllPools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListPoolsByDenom(ctx context.Context, in *ListPoolsByDenomRequest, opts ...grpc.CallOption) (*ListPoolsByDenomResponse, error) {
	out := new(ListPoolsByDenomResponse)
	err := c.cc.Invoke(ctx, "/osmosis.poolmanager.v1beta1.Query/ListPoolsByDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SpotPrice(ctx context.Context, in *SpotPriceRequest, opts ...grpc.CallOption) (*SpotPriceResponse, error) {
	out := new(SpotPriceResponse)
	err := c.cc.Invoke(ctx, "/osmosis.poolmanager.v1beta1.Query/SpotPrice", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalPoolLiquidity(ctx context.Context, in *TotalPoolLiquidityRequest, opts ...grpc.CallOption) (*TotalPoolLiquidityResponse, error) {
	out := new(TotalPoolLiquidityResponse)
	err := c.cc.Invoke(ctx, "/osmosis.poolmanager.v1beta1.Query/TotalPoolLiquidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalLiquidity(ctx context.Context, in *TotalLiquidityRequest, opts ...grpc.CallOption) (*TotalLiquidityResponse, error) {
	out := new(TotalLiquidityResponse)
	err := c.cc.Invoke(ctx, "/osmosis.poolmanager.v1beta1.Query/TotalLiquidity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TotalVolumeForPool(ctx context.Context, in *TotalVolumeForPoolRequest, opts ...grpc.CallOption) (*TotalVolumeForPoolResponse, error) {
	out := new(TotalVolumeForPoolResponse)
	err := c.cc.Invoke(ctx, "/osmosis.poolmanager.v1beta1.Query/TotalVolumeForPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TradingPairTakerFee(ctx context.Context, in *TradingPairTakerFeeRequest, opts ...grpc.CallOption) (*TradingPairTakerFeeResponse, error) {
	out := new(TradingPairTakerFeeResponse)
	err := c.cc.Invoke(ctx, "/osmosis.poolmanager.v1beta1.Query/TradingPairTakerFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) EstimateTradeBasedOnPriceImpact(ctx context.Context, in *EstimateTradeBasedOnPriceImpactRequest, opts ...grpc.CallOption) (*EstimateTradeBasedOnPriceImpactResponse, error) {
	out := new(EstimateTradeBasedOnPriceImpactResponse)
	err := c.cc.Invoke(ctx, "/osmosis.poolmanager.v1beta1.Query/EstimateTradeBasedOnPriceImpact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	Params(context.Context, *ParamsRequest) (*ParamsResponse, error)
	// Estimates swap amount out given in.
	EstimateSwapExactAmountIn(context.Context, *EstimateSwapExactAmountInRequest) (*EstimateSwapExactAmountInResponse, error)
	// EstimateSwapExactAmountInWithPrimitiveTypes is an alternative query for
	// EstimateSwapExactAmountIn. Supports query via GRPC-Gateway by using
	// primitive types instead of repeated structs. Each index in the
	// routes_pool_id field corresponds to the respective routes_token_out_denom
	// value, thus they are required to have the same length and are grouped
	// together as pairs.
	// example usage:
	// http://0.0.0.0:1317/osmosis/poolmanager/v1beta1/1/estimate/
	// swap_exact_amount_in_with_primitive_types?token_in=100000stake&routes_token_out_denom=uatom
	// &routes_token_out_denom=uion&routes_pool_id=1&routes_pool_id=2
	EstimateSwapExactAmountInWithPrimitiveTypes(context.Context, *EstimateSwapExactAmountInWithPrimitiveTypesRequest) (*EstimateSwapExactAmountInResponse, error)
	EstimateSinglePoolSwapExactAmountIn(context.Context, *EstimateSinglePoolSwapExactAmountInRequest) (*EstimateSwapExactAmountInResponse, error)
	// Estimates swap amount in given out.
	EstimateSwapExactAmountOut(context.Context, *EstimateSwapExactAmountOutRequest) (*EstimateSwapExactAmountOutResponse, error)
	// Estimates swap amount in given out.
	EstimateSwapExactAmountOutWithPrimitiveTypes(context.Context, *EstimateSwapExactAmountOutWithPrimitiveTypesRequest) (*EstimateSwapExactAmountOutResponse, error)
	EstimateSinglePoolSwapExactAmountOut(context.Context, *EstimateSinglePoolSwapExactAmountOutRequest) (*EstimateSwapExactAmountOutResponse, error)
	// Returns the total number of pools existing in Osmosis.
	NumPools(context.Context, *NumPoolsRequest) (*NumPoolsResponse, error)
	// Pool returns the Pool specified by the pool id
	Pool(context.Context, *PoolRequest) (*PoolResponse, error)
	// AllPools returns all pools on the Osmosis chain sorted by IDs.
	AllPools(context.Context, *AllPoolsRequest) (*AllPoolsResponse, error)
	// ListPoolsByDenom return all pools by denom
	ListPoolsByDenom(context.Context, *ListPoolsByDenomRequest) (*ListPoolsByDenomResponse, error)
	// SpotPrice defines a gRPC query handler that returns the spot price given
	// a base denomination and a quote denomination.
	SpotPrice(context.Context, *SpotPriceRequest) (*SpotPriceResponse, error)
	// TotalPoolLiquidity returns the total liquidity of the specified pool.
	TotalPoolLiquidity(context.Context, *TotalPoolLiquidityRequest) (*TotalPoolLiquidityResponse, error)
	// TotalLiquidity returns the total liquidity across all pools.
	TotalLiquidity(context.Context, *TotalLiquidityRequest) (*TotalLiquidityResponse, error)
	// TotalVolumeForPool returns the total volume of the specified pool.
	TotalVolumeForPool(context.Context, *TotalVolumeForPoolRequest) (*TotalVolumeForPoolResponse, error)
	// TradingPairTakerFee returns the taker fee for a given set of denoms
	TradingPairTakerFee(context.Context, *TradingPairTakerFeeRequest) (*TradingPairTakerFeeResponse, error)
	// EstimateTradeBasedOnPriceImpact returns an estimated trade based on price
	// impact, if a trade cannot be estimated a 0 input and 0 output would be
	// returned.
	EstimateTradeBasedOnPriceImpact(context.Context, *EstimateTradeBasedOnPriceImpactRequest) (*EstimateTradeBasedOnPriceImpactResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *ParamsRequest) (*ParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) EstimateSwapExactAmountIn(ctx context.Context, req *EstimateSwapExactAmountInRequest) (*EstimateSwapExactAmountInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateSwapExactAmountIn not implemented")
}
func (*UnimplementedQueryServer) EstimateSwapExactAmountInWithPrimitiveTypes(ctx context.Context, req *EstimateSwapExactAmountInWithPrimitiveTypesRequest) (*EstimateSwapExactAmountInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateSwapExactAmountInWithPrimitiveTypes not implemented")
}
func (*UnimplementedQueryServer) EstimateSinglePoolSwapExactAmountIn(ctx context.Context, req *EstimateSinglePoolSwapExactAmountInRequest) (*EstimateSwapExactAmountInResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateSinglePoolSwapExactAmountIn not implemented")
}
func (*UnimplementedQueryServer) EstimateSwapExactAmountOut(ctx context.Context, req *EstimateSwapExactAmountOutRequest) (*EstimateSwapExactAmountOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateSwapExactAmountOut not implemented")
}
func (*UnimplementedQueryServer) EstimateSwapExactAmountOutWithPrimitiveTypes(ctx context.Context, req *EstimateSwapExactAmountOutWithPrimitiveTypesRequest) (*EstimateSwapExactAmountOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateSwapExactAmountOutWithPrimitiveTypes not implemented")
}
func (*UnimplementedQueryServer) EstimateSinglePoolSwapExactAmountOut(ctx context.Context, req *EstimateSinglePoolSwapExactAmountOutRequest) (*EstimateSwapExactAmountOutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateSinglePoolSwapExactAmountOut not implemented")
}
func (*UnimplementedQueryServer) NumPools(ctx context.Context, req *NumPoolsRequest) (*NumPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NumPools not implemented")
}
func (*UnimplementedQueryServer) Pool(ctx context.Context, req *PoolRequest) (*PoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pool not implemented")
}
func (*UnimplementedQueryServer) AllPools(ctx context.Context, req *AllPoolsRequest) (*AllPoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllPools not implemented")
}
func (*UnimplementedQueryServer) ListPoolsByDenom(ctx context.Context, req *ListPoolsByDenomRequest) (*ListPoolsByDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPoolsByDenom not implemented")
}
func (*UnimplementedQueryServer) SpotPrice(ctx context.Context, req *SpotPriceRequest) (*SpotPriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SpotPrice not implemented")
}
func (*UnimplementedQueryServer) TotalPoolLiquidity(ctx context.Context, req *TotalPoolLiquidityRequest) (*TotalPoolLiquidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalPoolLiquidity not implemented")
}
func (*UnimplementedQueryServer) TotalLiquidity(ctx context.Context, req *TotalLiquidityRequest) (*TotalLiquidityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalLiquidity not implemented")
}
func (*UnimplementedQueryServer) TotalVolumeForPool(ctx context.Context, req *TotalVolumeForPoolRequest) (*TotalVolumeForPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TotalVolumeForPool not implemented")
}
func (*UnimplementedQueryServer) TradingPairTakerFee(ctx context.Context, req *TradingPairTakerFeeRequest) (*TradingPairTakerFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradingPairTakerFee not implemented")
}
func (*UnimplementedQueryServer) EstimateTradeBasedOnPriceImpact(ctx context.Context, req *EstimateTradeBasedOnPriceImpactRequest) (*EstimateTradeBasedOnPriceImpactResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateTradeBasedOnPriceImpact not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.poolmanager.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*ParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstimateSwapExactAmountIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateSwapExactAmountInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstimateSwapExactAmountIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.poolmanager.v1beta1.Query/EstimateSwapExactAmountIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstimateSwapExactAmountIn(ctx, req.(*EstimateSwapExactAmountInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstimateSwapExactAmountInWithPrimitiveTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateSwapExactAmountInWithPrimitiveTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstimateSwapExactAmountInWithPrimitiveTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.poolmanager.v1beta1.Query/EstimateSwapExactAmountInWithPrimitiveTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstimateSwapExactAmountInWithPrimitiveTypes(ctx, req.(*EstimateSwapExactAmountInWithPrimitiveTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstimateSinglePoolSwapExactAmountIn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateSinglePoolSwapExactAmountInRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstimateSinglePoolSwapExactAmountIn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.poolmanager.v1beta1.Query/EstimateSinglePoolSwapExactAmountIn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstimateSinglePoolSwapExactAmountIn(ctx, req.(*EstimateSinglePoolSwapExactAmountInRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstimateSwapExactAmountOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateSwapExactAmountOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstimateSwapExactAmountOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.poolmanager.v1beta1.Query/EstimateSwapExactAmountOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstimateSwapExactAmountOut(ctx, req.(*EstimateSwapExactAmountOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstimateSwapExactAmountOutWithPrimitiveTypes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateSwapExactAmountOutWithPrimitiveTypesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstimateSwapExactAmountOutWithPrimitiveTypes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.poolmanager.v1beta1.Query/EstimateSwapExactAmountOutWithPrimitiveTypes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstimateSwapExactAmountOutWithPrimitiveTypes(ctx, req.(*EstimateSwapExactAmountOutWithPrimitiveTypesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstimateSinglePoolSwapExactAmountOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateSinglePoolSwapExactAmountOutRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstimateSinglePoolSwapExactAmountOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.poolmanager.v1beta1.Query/EstimateSinglePoolSwapExactAmountOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstimateSinglePoolSwapExactAmountOut(ctx, req.(*EstimateSinglePoolSwapExactAmountOutRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NumPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NumPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.poolmanager.v1beta1.Query/NumPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NumPools(ctx, req.(*NumPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Pool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.poolmanager.v1beta1.Query/Pool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pool(ctx, req.(*PoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllPools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllPoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllPools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.poolmanager.v1beta1.Query/AllPools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllPools(ctx, req.(*AllPoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListPoolsByDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPoolsByDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListPoolsByDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.poolmanager.v1beta1.Query/ListPoolsByDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListPoolsByDenom(ctx, req.(*ListPoolsByDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SpotPrice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SpotPriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SpotPrice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.poolmanager.v1beta1.Query/SpotPrice",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SpotPrice(ctx, req.(*SpotPriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalPoolLiquidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalPoolLiquidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalPoolLiquidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.poolmanager.v1beta1.Query/TotalPoolLiquidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalPoolLiquidity(ctx, req.(*TotalPoolLiquidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalLiquidity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalLiquidityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalLiquidity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.poolmanager.v1beta1.Query/TotalLiquidity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalLiquidity(ctx, req.(*TotalLiquidityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TotalVolumeForPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalVolumeForPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TotalVolumeForPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.poolmanager.v1beta1.Query/TotalVolumeForPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TotalVolumeForPool(ctx, req.(*TotalVolumeForPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TradingPairTakerFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TradingPairTakerFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TradingPairTakerFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.poolmanager.v1beta1.Query/TradingPairTakerFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TradingPairTakerFee(ctx, req.(*TradingPairTakerFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_EstimateTradeBasedOnPriceImpact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateTradeBasedOnPriceImpactRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).EstimateTradeBasedOnPriceImpact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.poolmanager.v1beta1.Query/EstimateTradeBasedOnPriceImpact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).EstimateTradeBasedOnPriceImpact(ctx, req.(*EstimateTradeBasedOnPriceImpactRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "osmosis.poolmanager.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "EstimateSwapExactAmountIn",
			Handler:    _Query_EstimateSwapExactAmountIn_Handler,
		},
		{
			MethodName: "EstimateSwapExactAmountInWithPrimitiveTypes",
			Handler:    _Query_EstimateSwapExactAmountInWithPrimitiveTypes_Handler,
		},
		{
			MethodName: "EstimateSinglePoolSwapExactAmountIn",
			Handler:    _Query_EstimateSinglePoolSwapExactAmountIn_Handler,
		},
		{
			MethodName: "EstimateSwapExactAmountOut",
			Handler:    _Query_EstimateSwapExactAmountOut_Handler,
		},
		{
			MethodName: "EstimateSwapExactAmountOutWithPrimitiveTypes",
			Handler:    _Query_EstimateSwapExactAmountOutWithPrimitiveTypes_Handler,
		},
		{
			MethodName: "EstimateSinglePoolSwapExactAmountOut",
			Handler:    _Query_EstimateSinglePoolSwapExactAmountOut_Handler,
		},
		{
			MethodName: "NumPools",
			Handler:    _Query_NumPools_Handler,
		},
		{
			MethodName: "Pool",
			Handler:    _Query_Pool_Handler,
		},
		{
			MethodName: "AllPools",
			Handler:    _Query_AllPools_Handler,
		},
		{
			MethodName: "ListPoolsByDenom",
			Handler:    _Query_ListPoolsByDenom_Handler,
		},
		{
			MethodName: "SpotPrice",
			Handler:    _Query_SpotPrice_Handler,
		},
		{
			MethodName: "TotalPoolLiquidity",
			Handler:    _Query_TotalPoolLiquidity_Handler,
		},
		{
			MethodName: "TotalLiquidity",
			Handler:    _Query_TotalLiquidity_Handler,
		},
		{
			MethodName: "TotalVolumeForPool",
			Handler:    _Query_TotalVolumeForPool_Handler,
		},
		{
			MethodName: "TradingPairTakerFee",
			Handler:    _Query_TradingPairTakerFee_Handler,
		},
		{
			MethodName: "EstimateTradeBasedOnPriceImpact",
			Handler:    _Query_EstimateTradeBasedOnPriceImpact_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "osmosis/poolmanager/v1beta1/query.proto",
}

func (m *ParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EstimateSwapExactAmountInRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstimateSwapExactAmountInRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstimateSwapExactAmountInRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.TokenIn) > 0 {
		i -= len(m.TokenIn)
		copy(dAtA[i:], m.TokenIn)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenIn)))
		i--
		dAtA[i] = 0x1a
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *EstimateSwapExactAmountInWithPrimitiveTypesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstimateSwapExactAmountInWithPrimitiveTypesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstimateSwapExactAmountInWithPrimitiveTypesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoutesTokenOutDenom) > 0 {
		for iNdEx := len(m.RoutesTokenOutDenom) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RoutesTokenOutDenom[iNdEx])
			copy(dAtA[i:], m.RoutesTokenOutDenom[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.RoutesTokenOutDenom[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.RoutesPoolId) > 0 {
		dAtA3 := make([]byte, len(m.RoutesPoolId)*10)
		var j2 int
		for _, num := range m.RoutesPoolId {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintQuery(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenIn) > 0 {
		i -= len(m.TokenIn)
		copy(dAtA[i:], m.TokenIn)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenIn)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EstimateSinglePoolSwapExactAmountInRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstimateSinglePoolSwapExactAmountInRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstimateSinglePoolSwapExactAmountInRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenOutDenom) > 0 {
		i -= len(m.TokenOutDenom)
		copy(dAtA[i:], m.TokenOutDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenOutDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenIn) > 0 {
		i -= len(m.TokenIn)
		copy(dAtA[i:], m.TokenIn)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenIn)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EstimateSwapExactAmountInResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstimateSwapExactAmountInResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstimateSwapExactAmountInResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TokenOutAmount.Size()
		i -= size
		if _, err := m.TokenOutAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EstimateSwapExactAmountOutRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstimateSwapExactAmountOutRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstimateSwapExactAmountOutRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenOut) > 0 {
		i -= len(m.TokenOut)
		copy(dAtA[i:], m.TokenOut)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenOut)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *EstimateSwapExactAmountOutWithPrimitiveTypesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstimateSwapExactAmountOutWithPrimitiveTypesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstimateSwapExactAmountOutWithPrimitiveTypesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenOut) > 0 {
		i -= len(m.TokenOut)
		copy(dAtA[i:], m.TokenOut)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenOut)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RoutesTokenInDenom) > 0 {
		for iNdEx := len(m.RoutesTokenInDenom) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RoutesTokenInDenom[iNdEx])
			copy(dAtA[i:], m.RoutesTokenInDenom[iNdEx])
			i = encodeVarintQuery(dAtA, i, uint64(len(m.RoutesTokenInDenom[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.RoutesPoolId) > 0 {
		dAtA5 := make([]byte, len(m.RoutesPoolId)*10)
		var j4 int
		for _, num := range m.RoutesPoolId {
			for num >= 1<<7 {
				dAtA5[j4] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j4++
			}
			dAtA5[j4] = uint8(num)
			j4++
		}
		i -= j4
		copy(dAtA[i:], dAtA5[:j4])
		i = encodeVarintQuery(dAtA, i, uint64(j4))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EstimateSinglePoolSwapExactAmountOutRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstimateSinglePoolSwapExactAmountOutRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstimateSinglePoolSwapExactAmountOutRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TokenOut) > 0 {
		i -= len(m.TokenOut)
		copy(dAtA[i:], m.TokenOut)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenOut)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TokenInDenom) > 0 {
		i -= len(m.TokenInDenom)
		copy(dAtA[i:], m.TokenInDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenInDenom)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *EstimateSwapExactAmountOutResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstimateSwapExactAmountOutResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstimateSwapExactAmountOutResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TokenInAmount.Size()
		i -= size
		if _, err := m.TokenInAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *NumPoolsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NumPoolsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NumPoolsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *NumPoolsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NumPoolsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NumPoolsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumPools != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.NumPools))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pool != nil {
		{
			size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AllPoolsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllPoolsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllPoolsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *AllPoolsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllPoolsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllPoolsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for iNdEx := len(m.Pools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ListPoolsByDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListPoolsByDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListPoolsByDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ListPoolsByDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListPoolsByDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListPoolsByDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for iNdEx := len(m.Pools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SpotPriceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpotPriceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpotPriceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.QuoteAssetDenom) > 0 {
		i -= len(m.QuoteAssetDenom)
		copy(dAtA[i:], m.QuoteAssetDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.QuoteAssetDenom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.BaseAssetDenom) > 0 {
		i -= len(m.BaseAssetDenom)
		copy(dAtA[i:], m.BaseAssetDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BaseAssetDenom)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SpotPriceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SpotPriceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SpotPriceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SpotPrice) > 0 {
		i -= len(m.SpotPrice)
		copy(dAtA[i:], m.SpotPrice)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SpotPrice)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TotalPoolLiquidityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TotalPoolLiquidityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TotalPoolLiquidityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TotalPoolLiquidityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TotalPoolLiquidityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TotalPoolLiquidityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Liquidity) > 0 {
		for iNdEx := len(m.Liquidity) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Liquidity[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TotalLiquidityRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TotalLiquidityRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TotalLiquidityRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *TotalLiquidityResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TotalLiquidityResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TotalLiquidityResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Liquidity) > 0 {
		for iNdEx := len(m.Liquidity) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Liquidity[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TotalVolumeForPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TotalVolumeForPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TotalVolumeForPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TotalVolumeForPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TotalVolumeForPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TotalVolumeForPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Volume) > 0 {
		for iNdEx := len(m.Volume) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Volume[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TradingPairTakerFeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradingPairTakerFeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TradingPairTakerFeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom_1) > 0 {
		i -= len(m.Denom_1)
		copy(dAtA[i:], m.Denom_1)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom_1)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Denom_0) > 0 {
		i -= len(m.Denom_0)
		copy(dAtA[i:], m.Denom_0)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom_0)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TradingPairTakerFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TradingPairTakerFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TradingPairTakerFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.TakerFee.Size()
		i -= size
		if _, err := m.TakerFee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EstimateTradeBasedOnPriceImpactRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstimateTradeBasedOnPriceImpactRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstimateTradeBasedOnPriceImpactRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.ExternalPrice.Size()
		i -= size
		if _, err := m.ExternalPrice.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size := m.MaxPriceImpact.Size()
		i -= size
		if _, err := m.MaxPriceImpact.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.ToCoinDenom) > 0 {
		i -= len(m.ToCoinDenom)
		copy(dAtA[i:], m.ToCoinDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ToCoinDenom)))
		i--
		dAtA[i] = 0x12
	}
	{
		size, err := m.FromCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *EstimateTradeBasedOnPriceImpactResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EstimateTradeBasedOnPriceImpactResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EstimateTradeBasedOnPriceImpactResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.OutputCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	{
		size, err := m.InputCoin.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *EstimateSwapExactAmountInRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	l = len(m.TokenIn)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *EstimateSwapExactAmountInWithPrimitiveTypesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	l = len(m.TokenIn)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if len(m.RoutesPoolId) > 0 {
		l = 0
		for _, e := range m.RoutesPoolId {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	if len(m.RoutesTokenOutDenom) > 0 {
		for _, s := range m.RoutesTokenOutDenom {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *EstimateSinglePoolSwapExactAmountInRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	l = len(m.TokenIn)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TokenOutDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *EstimateSwapExactAmountInResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TokenOutAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *EstimateSwapExactAmountOutRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.TokenOut)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *EstimateSwapExactAmountOutWithPrimitiveTypesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	if len(m.RoutesPoolId) > 0 {
		l = 0
		for _, e := range m.RoutesPoolId {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	if len(m.RoutesTokenInDenom) > 0 {
		for _, s := range m.RoutesTokenInDenom {
			l = len(s)
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = len(m.TokenOut)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *EstimateSinglePoolSwapExactAmountOutRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	l = len(m.TokenInDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.TokenOut)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *EstimateSwapExactAmountOutResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TokenInAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *NumPoolsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *NumPoolsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumPools != 0 {
		n += 1 + sovQuery(uint64(m.NumPools))
	}
	return n
}

func (m *PoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	return n
}

func (m *PoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pool != nil {
		l = m.Pool.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *AllPoolsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *AllPoolsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for _, e := range m.Pools {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *ListPoolsByDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ListPoolsByDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for _, e := range m.Pools {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *SpotPriceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	l = len(m.BaseAssetDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.QuoteAssetDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *SpotPriceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SpotPrice)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *TotalPoolLiquidityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	return n
}

func (m *TotalPoolLiquidityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Liquidity) > 0 {
		for _, e := range m.Liquidity {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *TotalLiquidityRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *TotalLiquidityResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Liquidity) > 0 {
		for _, e := range m.Liquidity {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *TotalVolumeForPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	return n
}

func (m *TotalVolumeForPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Volume) > 0 {
		for _, e := range m.Volume {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *TradingPairTakerFeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom_0)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Denom_1)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *TradingPairTakerFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.TakerFee.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *EstimateTradeBasedOnPriceImpactRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.FromCoin.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = len(m.ToCoinDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	l = m.MaxPriceImpact.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.ExternalPrice.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *EstimateTradeBasedOnPriceImpactResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.InputCoin.Size()
	n += 1 + l + sovQuery(uint64(l))
	l = m.OutputCoin.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstimateSwapExactAmountInRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstimateSwapExactAmountInRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstimateSwapExactAmountInRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, types.SwapAmountInRoute{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstimateSwapExactAmountInWithPrimitiveTypesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstimateSwapExactAmountInWithPrimitiveTypesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstimateSwapExactAmountInWithPrimitiveTypesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RoutesPoolId = append(m.RoutesPoolId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RoutesPoolId) == 0 {
					m.RoutesPoolId = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RoutesPoolId = append(m.RoutesPoolId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RoutesPoolId", wireType)
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoutesTokenOutDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoutesTokenOutDenom = append(m.RoutesTokenOutDenom, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstimateSinglePoolSwapExactAmountInRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstimateSinglePoolSwapExactAmountInRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstimateSinglePoolSwapExactAmountInRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenOutDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenOutDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstimateSwapExactAmountInResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstimateSwapExactAmountInResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstimateSwapExactAmountInResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenOutAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenOutAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstimateSwapExactAmountOutRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstimateSwapExactAmountOutRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstimateSwapExactAmountOutRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, types.SwapAmountOutRoute{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenOut = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstimateSwapExactAmountOutWithPrimitiveTypesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstimateSwapExactAmountOutWithPrimitiveTypesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstimateSwapExactAmountOutWithPrimitiveTypesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.RoutesPoolId = append(m.RoutesPoolId, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.RoutesPoolId) == 0 {
					m.RoutesPoolId = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.RoutesPoolId = append(m.RoutesPoolId, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field RoutesPoolId", wireType)
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoutesTokenInDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoutesTokenInDenom = append(m.RoutesTokenInDenom, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenOut = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstimateSinglePoolSwapExactAmountOutRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstimateSinglePoolSwapExactAmountOutRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstimateSinglePoolSwapExactAmountOutRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenInDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenInDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenOut", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenOut = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstimateSwapExactAmountOutResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstimateSwapExactAmountOutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstimateSwapExactAmountOutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenInAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TokenInAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NumPoolsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NumPoolsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NumPoolsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NumPoolsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NumPoolsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NumPoolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumPools", wireType)
			}
			m.NumPools = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumPools |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pool == nil {
				m.Pool = &types1.Any{}
			}
			if err := m.Pool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllPoolsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllPoolsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllPoolsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllPoolsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllPoolsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllPoolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pools = append(m.Pools, &types1.Any{})
			if err := m.Pools[len(m.Pools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListPoolsByDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListPoolsByDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListPoolsByDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListPoolsByDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListPoolsByDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListPoolsByDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pools = append(m.Pools, &types1.Any{})
			if err := m.Pools[len(m.Pools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpotPriceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpotPriceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpotPriceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseAssetDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseAssetDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QuoteAssetDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.QuoteAssetDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SpotPriceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SpotPriceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SpotPriceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpotPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpotPrice = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TotalPoolLiquidityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TotalPoolLiquidityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TotalPoolLiquidityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TotalPoolLiquidityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TotalPoolLiquidityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TotalPoolLiquidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liquidity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Liquidity = append(m.Liquidity, types2.Coin{})
			if err := m.Liquidity[len(m.Liquidity)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TotalLiquidityRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TotalLiquidityRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TotalLiquidityRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TotalLiquidityResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TotalLiquidityResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TotalLiquidityResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liquidity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Liquidity = append(m.Liquidity, types2.Coin{})
			if err := m.Liquidity[len(m.Liquidity)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TotalVolumeForPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TotalVolumeForPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TotalVolumeForPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TotalVolumeForPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TotalVolumeForPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TotalVolumeForPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Volume", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Volume = append(m.Volume, types2.Coin{})
			if err := m.Volume[len(m.Volume)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TradingPairTakerFeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradingPairTakerFeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradingPairTakerFeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom_0", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom_0 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom_1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom_1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TradingPairTakerFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TradingPairTakerFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TradingPairTakerFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TakerFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TakerFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstimateTradeBasedOnPriceImpactRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstimateTradeBasedOnPriceImpactRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstimateTradeBasedOnPriceImpactRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FromCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToCoinDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToCoinDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPriceImpact", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.MaxPriceImpact.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalPrice", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExternalPrice.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EstimateTradeBasedOnPriceImpactResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EstimateTradeBasedOnPriceImpactResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EstimateTradeBasedOnPriceImpactResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InputCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InputCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutputCoin", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.OutputCoin.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
