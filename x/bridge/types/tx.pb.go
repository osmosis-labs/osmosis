// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/bridge/v1beta1/tx.proto

package types

import (
	context "context"
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgInboundTransfer defines the message structure for the InboundTransfer gRPC
// service method. It allows a sender to perform an inbound cross-chain
// transfer, i.e., to transfer their tokens from the source chain to Osmosis and
// get the equivalent amount of the corresponding token (specified in subdenom)
// on Osmosis in return. The tokens are minted through the x/tokenfactory module
// to the destination address.
type MsgInboundTransfer struct {
	// Sender is a sender's address
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	// DestAddr is a destination Osmosis address
	DestAddr string `protobuf:"bytes,2,opt,name=dest_addr,json=destAddr,proto3" json:"dest_addr,omitempty" yaml:"dest_addr"`
	// AssetID is the ID of the asset being transferred
	AssetId AssetID `protobuf:"bytes,3,opt,name=asset_id,json=assetId,proto3" json:"asset_id" yaml:"asset_id"`
	// Amount of coins to transfer
	Amount cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount" yaml:"amount"`
}

func (m *MsgInboundTransfer) Reset()         { *m = MsgInboundTransfer{} }
func (m *MsgInboundTransfer) String() string { return proto.CompactTextString(m) }
func (*MsgInboundTransfer) ProtoMessage()    {}
func (*MsgInboundTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e478e3238c885a8, []int{0}
}
func (m *MsgInboundTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInboundTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInboundTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInboundTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInboundTransfer.Merge(m, src)
}
func (m *MsgInboundTransfer) XXX_Size() int {
	return m.Size()
}
func (m *MsgInboundTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInboundTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInboundTransfer proto.InternalMessageInfo

func (m *MsgInboundTransfer) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgInboundTransfer) GetDestAddr() string {
	if m != nil {
		return m.DestAddr
	}
	return ""
}

func (m *MsgInboundTransfer) GetAssetId() AssetID {
	if m != nil {
		return m.AssetId
	}
	return AssetID{}
}

type MsgInboundTransferResponse struct {
}

func (m *MsgInboundTransferResponse) Reset()         { *m = MsgInboundTransferResponse{} }
func (m *MsgInboundTransferResponse) String() string { return proto.CompactTextString(m) }
func (*MsgInboundTransferResponse) ProtoMessage()    {}
func (*MsgInboundTransferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e478e3238c885a8, []int{1}
}
func (m *MsgInboundTransferResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgInboundTransferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgInboundTransferResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgInboundTransferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgInboundTransferResponse.Merge(m, src)
}
func (m *MsgInboundTransferResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgInboundTransferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgInboundTransferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgInboundTransferResponse proto.InternalMessageInfo

// MsgOutboundTransfer defines the message structure for the OutboundTransfer
// gRPC service method. It allows a sender to perform an outbound cross-chain
// transfer, i.e., to transfer their tokens from Osmosis to the destination
// chain. The tokens are burned through the x/tokenfactory module from the
// sender's address.
type MsgOutboundTransfer struct {
	// Sender is a sender's Osmosis address
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	// DestAddr is a destination address
	DestAddr string `protobuf:"bytes,2,opt,name=dest_addr,json=destAddr,proto3" json:"dest_addr,omitempty" yaml:"dest_addr"`
	// AssetID is the ID of the asset being transferred
	AssetId AssetID `protobuf:"bytes,3,opt,name=asset_id,json=assetId,proto3" json:"asset_id" yaml:"asset_id"`
	// Amount of coins to transfer
	Amount cosmossdk_io_math.Int `protobuf:"bytes,4,opt,name=amount,proto3,customtype=cosmossdk.io/math.Int" json:"amount" yaml:"amount"`
}

func (m *MsgOutboundTransfer) Reset()         { *m = MsgOutboundTransfer{} }
func (m *MsgOutboundTransfer) String() string { return proto.CompactTextString(m) }
func (*MsgOutboundTransfer) ProtoMessage()    {}
func (*MsgOutboundTransfer) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e478e3238c885a8, []int{2}
}
func (m *MsgOutboundTransfer) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOutboundTransfer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOutboundTransfer.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOutboundTransfer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOutboundTransfer.Merge(m, src)
}
func (m *MsgOutboundTransfer) XXX_Size() int {
	return m.Size()
}
func (m *MsgOutboundTransfer) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOutboundTransfer.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOutboundTransfer proto.InternalMessageInfo

func (m *MsgOutboundTransfer) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgOutboundTransfer) GetDestAddr() string {
	if m != nil {
		return m.DestAddr
	}
	return ""
}

func (m *MsgOutboundTransfer) GetAssetId() AssetID {
	if m != nil {
		return m.AssetId
	}
	return AssetID{}
}

type MsgOutboundTransferResponse struct {
}

func (m *MsgOutboundTransferResponse) Reset()         { *m = MsgOutboundTransferResponse{} }
func (m *MsgOutboundTransferResponse) String() string { return proto.CompactTextString(m) }
func (*MsgOutboundTransferResponse) ProtoMessage()    {}
func (*MsgOutboundTransferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e478e3238c885a8, []int{3}
}
func (m *MsgOutboundTransferResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgOutboundTransferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgOutboundTransferResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgOutboundTransferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgOutboundTransferResponse.Merge(m, src)
}
func (m *MsgOutboundTransferResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgOutboundTransferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgOutboundTransferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgOutboundTransferResponse proto.InternalMessageInfo

// MsgUpdateParams allows to update module params. It contains UpdateParams
// instead of just Params to forbid status updating using this method.
// All new assets introduced with this method have ASSET_STATUS_BLOCKED_BOTH
// status by default.
type MsgUpdateParams struct {
	// Sender is a sender's address
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	// NewParams should be fully populated
	NewParams Params `protobuf:"bytes,2,opt,name=new_params,json=newParams,proto3" json:"new_params" yaml:"new_params"`
}

func (m *MsgUpdateParams) Reset()         { *m = MsgUpdateParams{} }
func (m *MsgUpdateParams) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParams) ProtoMessage()    {}
func (*MsgUpdateParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e478e3238c885a8, []int{4}
}
func (m *MsgUpdateParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParams.Merge(m, src)
}
func (m *MsgUpdateParams) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParams) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParams.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParams proto.InternalMessageInfo

func (m *MsgUpdateParams) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgUpdateParams) GetNewParams() Params {
	if m != nil {
		return m.NewParams
	}
	return Params{}
}

type MsgUpdateParamsResponse struct {
}

func (m *MsgUpdateParamsResponse) Reset()         { *m = MsgUpdateParamsResponse{} }
func (m *MsgUpdateParamsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateParamsResponse) ProtoMessage()    {}
func (*MsgUpdateParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e478e3238c885a8, []int{5}
}
func (m *MsgUpdateParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateParamsResponse.Merge(m, src)
}
func (m *MsgUpdateParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateParamsResponse proto.InternalMessageInfo

// MsgChangeAssetStatus changes the status of the provided asset.
type MsgChangeAssetStatus struct {
	// Sender is a sender's address
	Sender string `protobuf:"bytes,1,opt,name=sender,proto3" json:"sender,omitempty" yaml:"sender"`
	// AssetID is the ID of the asset to update.
	// The asset should be known; otherwise, the method will failed.
	AssetId AssetID `protobuf:"bytes,2,opt,name=asset_id,json=assetId,proto3" json:"asset_id" yaml:"asset_id"`
	// NewStatus is a new asset's status.
	NewStatus AssetStatus `protobuf:"varint,3,opt,name=new_status,json=newStatus,proto3,enum=osmosis.bridge.v1beta1.AssetStatus" json:"new_status,omitempty" yaml:"new_status"`
}

func (m *MsgChangeAssetStatus) Reset()         { *m = MsgChangeAssetStatus{} }
func (m *MsgChangeAssetStatus) String() string { return proto.CompactTextString(m) }
func (*MsgChangeAssetStatus) ProtoMessage()    {}
func (*MsgChangeAssetStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e478e3238c885a8, []int{6}
}
func (m *MsgChangeAssetStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeAssetStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeAssetStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeAssetStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeAssetStatus.Merge(m, src)
}
func (m *MsgChangeAssetStatus) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeAssetStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeAssetStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeAssetStatus proto.InternalMessageInfo

func (m *MsgChangeAssetStatus) GetSender() string {
	if m != nil {
		return m.Sender
	}
	return ""
}

func (m *MsgChangeAssetStatus) GetAssetId() AssetID {
	if m != nil {
		return m.AssetId
	}
	return AssetID{}
}

func (m *MsgChangeAssetStatus) GetNewStatus() AssetStatus {
	if m != nil {
		return m.NewStatus
	}
	return AssetStatus_ASSET_STATUS_UNSPECIFIED
}

type MsgChangeAssetStatusResponse struct {
}

func (m *MsgChangeAssetStatusResponse) Reset()         { *m = MsgChangeAssetStatusResponse{} }
func (m *MsgChangeAssetStatusResponse) String() string { return proto.CompactTextString(m) }
func (*MsgChangeAssetStatusResponse) ProtoMessage()    {}
func (*MsgChangeAssetStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8e478e3238c885a8, []int{7}
}
func (m *MsgChangeAssetStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgChangeAssetStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgChangeAssetStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgChangeAssetStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgChangeAssetStatusResponse.Merge(m, src)
}
func (m *MsgChangeAssetStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgChangeAssetStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgChangeAssetStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgChangeAssetStatusResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgInboundTransfer)(nil), "osmosis.bridge.v1beta1.MsgInboundTransfer")
	proto.RegisterType((*MsgInboundTransferResponse)(nil), "osmosis.bridge.v1beta1.MsgInboundTransferResponse")
	proto.RegisterType((*MsgOutboundTransfer)(nil), "osmosis.bridge.v1beta1.MsgOutboundTransfer")
	proto.RegisterType((*MsgOutboundTransferResponse)(nil), "osmosis.bridge.v1beta1.MsgOutboundTransferResponse")
	proto.RegisterType((*MsgUpdateParams)(nil), "osmosis.bridge.v1beta1.MsgUpdateParams")
	proto.RegisterType((*MsgUpdateParamsResponse)(nil), "osmosis.bridge.v1beta1.MsgUpdateParamsResponse")
	proto.RegisterType((*MsgChangeAssetStatus)(nil), "osmosis.bridge.v1beta1.MsgChangeAssetStatus")
	proto.RegisterType((*MsgChangeAssetStatusResponse)(nil), "osmosis.bridge.v1beta1.MsgChangeAssetStatusResponse")
}

func init() { proto.RegisterFile("osmosis/bridge/v1beta1/tx.proto", fileDescriptor_8e478e3238c885a8) }

var fileDescriptor_8e478e3238c885a8 = []byte{
	// 660 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x95, 0x4f, 0x6f, 0xd3, 0x3e,
	0x18, 0xc7, 0x9b, 0xee, 0xa7, 0xfd, 0x36, 0x0f, 0xd8, 0x1a, 0x36, 0xd6, 0x85, 0x91, 0x8c, 0x0c,
	0xb4, 0x31, 0x68, 0xa2, 0x65, 0x9c, 0x7a, 0x5b, 0x41, 0x48, 0x95, 0xa8, 0x40, 0x1d, 0x48, 0xc0,
	0x65, 0x72, 0x6a, 0x93, 0x46, 0x2c, 0x76, 0x89, 0xdd, 0xfd, 0x79, 0x0b, 0x9c, 0x38, 0xf3, 0x2a,
	0xb8, 0x20, 0xc4, 0x3b, 0xd8, 0x71, 0xdc, 0x10, 0x87, 0x0a, 0x6d, 0x07, 0xee, 0x7b, 0x05, 0x28,
	0xb6, 0xd3, 0x6e, 0xe9, 0x5a, 0xad, 0x12, 0x47, 0x2e, 0x55, 0x9a, 0x7c, 0x9e, 0xef, 0xf3, 0xf8,
	0xe3, 0xb8, 0x05, 0x16, 0x65, 0x11, 0x65, 0x21, 0x73, 0xfd, 0x38, 0x44, 0x01, 0x76, 0x77, 0xd7,
	0x7d, 0xcc, 0xe1, 0xba, 0xcb, 0xf7, 0x9d, 0x56, 0x4c, 0x39, 0xd5, 0x6f, 0x28, 0xc0, 0x91, 0x80,
	0xa3, 0x00, 0x63, 0x36, 0xa0, 0x01, 0x15, 0x88, 0x9b, 0x5c, 0x49, 0xda, 0x28, 0xc0, 0x28, 0x24,
	0xd4, 0x15, 0x9f, 0xea, 0x96, 0xd9, 0x10, 0x09, 0xae, 0x0f, 0x59, 0x2f, 0xbe, 0x41, 0x43, 0xa2,
	0x9e, 0x2f, 0x0f, 0x98, 0x40, 0xf5, 0x13, 0x90, 0xfd, 0x25, 0x0f, 0xf4, 0x1a, 0x0b, 0xaa, 0xc4,
	0xa7, 0x6d, 0x82, 0x5e, 0xc4, 0x90, 0xb0, 0xb7, 0x38, 0xd6, 0xef, 0x81, 0x71, 0x86, 0x09, 0xc2,
	0x71, 0x51, 0x5b, 0xd2, 0x56, 0x27, 0x2b, 0x85, 0xd3, 0x8e, 0x75, 0xf5, 0x00, 0x46, 0x3b, 0x65,
	0x5b, 0xde, 0xb7, 0xeb, 0x0a, 0xd0, 0xd7, 0xc1, 0x24, 0xc2, 0x8c, 0x6f, 0x43, 0x84, 0xe2, 0x62,
	0x5e, 0xd0, 0xb3, 0xa7, 0x1d, 0x6b, 0x46, 0xd2, 0xdd, 0x47, 0x76, 0x7d, 0x22, 0xb9, 0xde, 0x44,
	0x28, 0xd6, 0xb7, 0xc0, 0x04, 0x64, 0x0c, 0xf3, 0xed, 0x10, 0x15, 0xc7, 0x96, 0xb4, 0xd5, 0x29,
	0xcf, 0x72, 0x2e, 0xb6, 0xe1, 0x6c, 0x26, 0x5c, 0xf5, 0x71, 0x65, 0xfe, 0xb0, 0x63, 0xe5, 0x4e,
	0x3b, 0xd6, 0xb4, 0x8c, 0x4d, 0xcb, 0xed, 0xfa, 0xff, 0xe2, 0xb2, 0x8a, 0xf4, 0x27, 0x60, 0x1c,
	0x46, 0xb4, 0x4d, 0x78, 0xf1, 0x3f, 0x31, 0x84, 0x93, 0x54, 0xfc, 0xec, 0x58, 0x73, 0x52, 0x13,
	0x43, 0xef, 0x9c, 0x90, 0xba, 0x11, 0xe4, 0x4d, 0xa7, 0x4a, 0x78, 0x6f, 0x3d, 0xb2, 0xc8, 0xae,
	0xab, 0xea, 0xf2, 0x9d, 0x0f, 0xbf, 0x3f, 0xaf, 0x65, 0x77, 0x2f, 0x94, 0x7e, 0x4a, 0x5c, 0x09,
	0xb2, 0x17, 0x81, 0xd1, 0xaf, 0xad, 0x8e, 0x59, 0x8b, 0x12, 0x86, 0xed, 0xaf, 0x79, 0x70, 0xbd,
	0xc6, 0x82, 0x67, 0x6d, 0xfe, 0x4f, 0xab, 0xd2, 0x7a, 0x37, 0xd1, 0xba, 0x94, 0xd1, 0x4a, 0x95,
	0xa0, 0x9e, 0xd7, 0x5b, 0xe0, 0xe6, 0x05, 0xe2, 0xba, 0x62, 0xbf, 0x69, 0x60, 0xba, 0xc6, 0x82,
	0x97, 0x2d, 0x04, 0x39, 0x7e, 0x0e, 0x63, 0x18, 0xb1, 0x51, 0xa4, 0xbe, 0x02, 0x80, 0xe0, 0xbd,
	0xed, 0x96, 0x28, 0x14, 0x56, 0xa7, 0x3c, 0x73, 0x90, 0x23, 0x19, 0x5f, 0x59, 0x50, 0x8a, 0x0a,
	0x32, 0xb2, 0x57, 0x6f, 0xd7, 0x27, 0x09, 0xde, 0x93, 0x54, 0xf9, 0x76, 0xb2, 0xbc, 0xc5, 0xcc,
	0xf2, 0xda, 0x62, 0xcc, 0x92, 0xc2, 0x17, 0xc0, 0x7c, 0x66, 0xf4, 0xee, 0xb2, 0x3e, 0xe5, 0xc1,
	0x6c, 0x8d, 0x05, 0x8f, 0x9a, 0x90, 0x04, 0x58, 0xec, 0xcd, 0x16, 0x87, 0xbc, 0x3d, 0xd2, 0xda,
	0xce, 0xee, 0x7e, 0xfe, 0x6f, 0xed, 0xfe, 0x6b, 0x29, 0x8c, 0x89, 0x69, 0xc4, 0x4b, 0x75, 0xcd,
	0x5b, 0x1e, 0x1a, 0x2b, 0x07, 0xaf, 0xcc, 0x9d, 0x37, 0x26, 0x03, 0xa4, 0x31, 0x49, 0x94, 0x57,
	0x12, 0x63, 0x76, 0xc6, 0x58, 0x43, 0x18, 0x28, 0x89, 0xf6, 0x25, 0x55, 0x64, 0x82, 0xc5, 0x8b,
	0xdc, 0xa4, 0xf2, 0xbc, 0xef, 0x63, 0x60, 0xac, 0xc6, 0x02, 0xfd, 0x3d, 0x98, 0xce, 0xfe, 0x8c,
	0xad, 0x0d, 0x1a, 0xb5, 0xff, 0xec, 0x1a, 0xde, 0xe5, 0xd9, 0xb4, 0xb5, 0xce, 0xc1, 0x4c, 0xdf,
	0x19, 0xbf, 0x3f, 0x24, 0x27, 0x0b, 0x1b, 0x1b, 0x23, 0xc0, 0xdd, 0xae, 0x4d, 0x70, 0xe5, 0xdc,
	0x01, 0x58, 0x19, 0x12, 0x72, 0x16, 0x34, 0xdc, 0x4b, 0x82, 0xdd, 0x4e, 0x7b, 0xa0, 0xd0, 0xff,
	0x4e, 0x3e, 0x18, 0x92, 0xd2, 0x47, 0x1b, 0x0f, 0x47, 0xa1, 0xd3, 0xc6, 0x95, 0xa7, 0x87, 0xc7,
	0xa6, 0x76, 0x74, 0x6c, 0x6a, 0xbf, 0x8e, 0x4d, 0xed, 0xe3, 0x89, 0x99, 0x3b, 0x3a, 0x31, 0x73,
	0x3f, 0x4e, 0xcc, 0xdc, 0x1b, 0x2f, 0x08, 0x79, 0xb3, 0xed, 0x3b, 0x0d, 0x1a, 0xb9, 0x2a, 0xb9,
	0xb4, 0x03, 0x7d, 0x96, 0x7e, 0x71, 0x77, 0xbd, 0x0d, 0x77, 0x3f, 0x7d, 0x9f, 0xf8, 0x41, 0x0b,
	0x33, 0x7f, 0x5c, 0xfc, 0xd7, 0x6d, 0xfc, 0x09, 0x00, 0x00, 0xff, 0xff, 0x63, 0x99, 0xf4, 0x4f,
	0x94, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// InboundTransfer is used for inbound transfers (<other_chain> -> OSMO).
	InboundTransfer(ctx context.Context, in *MsgInboundTransfer, opts ...grpc.CallOption) (*MsgInboundTransferResponse, error)
	// OutboundTransfer is used for outbound transfers (OSMO -> <other_chain>).
	OutboundTransfer(ctx context.Context, in *MsgOutboundTransfer, opts ...grpc.CallOption) (*MsgOutboundTransferResponse, error)
	// UpdateParams is used for updating module params.
	UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error)
	// ChangeAssetStatus will change the provided asset's status.
	ChangeAssetStatus(ctx context.Context, in *MsgChangeAssetStatus, opts ...grpc.CallOption) (*MsgChangeAssetStatusResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) InboundTransfer(ctx context.Context, in *MsgInboundTransfer, opts ...grpc.CallOption) (*MsgInboundTransferResponse, error) {
	out := new(MsgInboundTransferResponse)
	err := c.cc.Invoke(ctx, "/osmosis.bridge.v1beta1.Msg/InboundTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) OutboundTransfer(ctx context.Context, in *MsgOutboundTransfer, opts ...grpc.CallOption) (*MsgOutboundTransferResponse, error) {
	out := new(MsgOutboundTransferResponse)
	err := c.cc.Invoke(ctx, "/osmosis.bridge.v1beta1.Msg/OutboundTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateParams(ctx context.Context, in *MsgUpdateParams, opts ...grpc.CallOption) (*MsgUpdateParamsResponse, error) {
	out := new(MsgUpdateParamsResponse)
	err := c.cc.Invoke(ctx, "/osmosis.bridge.v1beta1.Msg/UpdateParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ChangeAssetStatus(ctx context.Context, in *MsgChangeAssetStatus, opts ...grpc.CallOption) (*MsgChangeAssetStatusResponse, error) {
	out := new(MsgChangeAssetStatusResponse)
	err := c.cc.Invoke(ctx, "/osmosis.bridge.v1beta1.Msg/ChangeAssetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// InboundTransfer is used for inbound transfers (<other_chain> -> OSMO).
	InboundTransfer(context.Context, *MsgInboundTransfer) (*MsgInboundTransferResponse, error)
	// OutboundTransfer is used for outbound transfers (OSMO -> <other_chain>).
	OutboundTransfer(context.Context, *MsgOutboundTransfer) (*MsgOutboundTransferResponse, error)
	// UpdateParams is used for updating module params.
	UpdateParams(context.Context, *MsgUpdateParams) (*MsgUpdateParamsResponse, error)
	// ChangeAssetStatus will change the provided asset's status.
	ChangeAssetStatus(context.Context, *MsgChangeAssetStatus) (*MsgChangeAssetStatusResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) InboundTransfer(ctx context.Context, req *MsgInboundTransfer) (*MsgInboundTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InboundTransfer not implemented")
}
func (*UnimplementedMsgServer) OutboundTransfer(ctx context.Context, req *MsgOutboundTransfer) (*MsgOutboundTransferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OutboundTransfer not implemented")
}
func (*UnimplementedMsgServer) UpdateParams(ctx context.Context, req *MsgUpdateParams) (*MsgUpdateParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateParams not implemented")
}
func (*UnimplementedMsgServer) ChangeAssetStatus(ctx context.Context, req *MsgChangeAssetStatus) (*MsgChangeAssetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeAssetStatus not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_InboundTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgInboundTransfer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).InboundTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.bridge.v1beta1.Msg/InboundTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).InboundTransfer(ctx, req.(*MsgInboundTransfer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_OutboundTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgOutboundTransfer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).OutboundTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.bridge.v1beta1.Msg/OutboundTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).OutboundTransfer(ctx, req.(*MsgOutboundTransfer))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.bridge.v1beta1.Msg/UpdateParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateParams(ctx, req.(*MsgUpdateParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ChangeAssetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgChangeAssetStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ChangeAssetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.bridge.v1beta1.Msg/ChangeAssetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ChangeAssetStatus(ctx, req.(*MsgChangeAssetStatus))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "osmosis.bridge.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InboundTransfer",
			Handler:    _Msg_InboundTransfer_Handler,
		},
		{
			MethodName: "OutboundTransfer",
			Handler:    _Msg_OutboundTransfer_Handler,
		},
		{
			MethodName: "UpdateParams",
			Handler:    _Msg_UpdateParams_Handler,
		},
		{
			MethodName: "ChangeAssetStatus",
			Handler:    _Msg_ChangeAssetStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "osmosis/bridge/v1beta1/tx.proto",
}

func (m *MsgInboundTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInboundTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInboundTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.AssetId.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.DestAddr) > 0 {
		i -= len(m.DestAddr)
		copy(dAtA[i:], m.DestAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DestAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgInboundTransferResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgInboundTransferResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgInboundTransferResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgOutboundTransfer) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOutboundTransfer) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOutboundTransfer) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.AssetId.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.DestAddr) > 0 {
		i -= len(m.DestAddr)
		copy(dAtA[i:], m.DestAddr)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DestAddr)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgOutboundTransferResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgOutboundTransferResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgOutboundTransferResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.NewParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgChangeAssetStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeAssetStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeAssetStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewStatus != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.NewStatus))
		i--
		dAtA[i] = 0x18
	}
	{
		size, err := m.AssetId.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgChangeAssetStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgChangeAssetStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgChangeAssetStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgInboundTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DestAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.AssetId.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgInboundTransferResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgOutboundTransfer) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DestAddr)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.AssetId.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.Amount.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgOutboundTransferResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.NewParams.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgUpdateParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgChangeAssetStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.AssetId.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.NewStatus != 0 {
		n += 1 + sovTx(uint64(m.NewStatus))
	}
	return n
}

func (m *MsgChangeAssetStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgInboundTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInboundTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInboundTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AssetId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgInboundTransferResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgInboundTransferResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgInboundTransferResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOutboundTransfer) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOutboundTransfer: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOutboundTransfer: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DestAddr", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DestAddr = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AssetId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgOutboundTransferResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgOutboundTransferResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgOutboundTransferResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NewParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeAssetStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeAssetStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeAssetStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AssetId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewStatus", wireType)
			}
			m.NewStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewStatus |= AssetStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgChangeAssetStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgChangeAssetStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgChangeAssetStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
