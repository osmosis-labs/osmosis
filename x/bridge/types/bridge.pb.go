// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/bridge/v1beta1/bridge.proto

package types

import (
	cosmossdk_io_math "cosmossdk.io/math"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type AssetStatus int32

const (
	AssetStatus_ASSET_STATUS_UNSPECIFIED      AssetStatus = 0
	AssetStatus_ASSET_STATUS_OK               AssetStatus = 1
	AssetStatus_ASSET_STATUS_BLOCKED_INBOUND  AssetStatus = 2
	AssetStatus_ASSET_STATUS_BLOCKED_OUTBOUND AssetStatus = 3
	AssetStatus_ASSET_STATUS_BLOCKED_BOTH     AssetStatus = 4
)

var AssetStatus_name = map[int32]string{
	0: "ASSET_STATUS_UNSPECIFIED",
	1: "ASSET_STATUS_OK",
	2: "ASSET_STATUS_BLOCKED_INBOUND",
	3: "ASSET_STATUS_BLOCKED_OUTBOUND",
	4: "ASSET_STATUS_BLOCKED_BOTH",
}

var AssetStatus_value = map[string]int32{
	"ASSET_STATUS_UNSPECIFIED":      0,
	"ASSET_STATUS_OK":               1,
	"ASSET_STATUS_BLOCKED_INBOUND":  2,
	"ASSET_STATUS_BLOCKED_OUTBOUND": 3,
	"ASSET_STATUS_BLOCKED_BOTH":     4,
}

func (x AssetStatus) String() string {
	return proto.EnumName(AssetStatus_name, int32(x))
}

func (AssetStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f999ddf08452f1f3, []int{0}
}

// Params defines params for x/bridge module.
type Params struct {
	// Signers used to sign inbound and release outbound transactions
	Signers []string `protobuf:"bytes,1,rep,name=signers,proto3" json:"signers,omitempty" yaml:"signers"`
	// Assets is a list used to create tokenfactory denoms
	// for corresponding trading pairs
	Assets []Asset `protobuf:"bytes,2,rep,name=assets,proto3" json:"assets" yaml:"assets"`
	// VotesNeeded marks how many signers out of the list of signers need
	// to sign until a tx can be considered finalized
	VotesNeeded uint64 `protobuf:"varint,3,opt,name=votes_needed,json=votesNeeded,proto3" json:"votes_needed,omitempty" yaml:"votes_needed"`
	// Fee defines a param for fee that go towards the validator set
	// signing the incoming/outgoing txs. The fee is measured as a ratio,
	// so its value lies between 0 and 1.
	Fee cosmossdk_io_math.LegacyDec `protobuf:"bytes,4,opt,name=fee,proto3,customtype=cosmossdk.io/math.LegacyDec" json:"fee" yaml:"fee"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_f999ddf08452f1f3, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetSigners() []string {
	if m != nil {
		return m.Signers
	}
	return nil
}

func (m *Params) GetAssets() []Asset {
	if m != nil {
		return m.Assets
	}
	return nil
}

func (m *Params) GetVotesNeeded() uint64 {
	if m != nil {
		return m.VotesNeeded
	}
	return 0
}

// AssetID defines a pair of the source chain name and its Osmosis
// representation denoted by denom. AssetID is a primary key for Asset.
type AssetID struct {
	// SourceChain is a source chain name
	SourceChain string `protobuf:"bytes,1,opt,name=source_chain,json=sourceChain,proto3" json:"source_chain,omitempty" yaml:"source_chain"`
	// Denom is the Osmosis representation of the SourceChain
	Denom string `protobuf:"bytes,2,opt,name=denom,proto3" json:"denom,omitempty" yaml:"denom"`
}

func (m *AssetID) Reset()         { *m = AssetID{} }
func (m *AssetID) String() string { return proto.CompactTextString(m) }
func (*AssetID) ProtoMessage()    {}
func (*AssetID) Descriptor() ([]byte, []int) {
	return fileDescriptor_f999ddf08452f1f3, []int{1}
}
func (m *AssetID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssetID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssetID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssetID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssetID.Merge(m, src)
}
func (m *AssetID) XXX_Size() int {
	return m.Size()
}
func (m *AssetID) XXX_DiscardUnknown() {
	xxx_messageInfo_AssetID.DiscardUnknown(m)
}

var xxx_messageInfo_AssetID proto.InternalMessageInfo

func (m *AssetID) GetSourceChain() string {
	if m != nil {
		return m.SourceChain
	}
	return ""
}

func (m *AssetID) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// Asset is a representation of the asset.
type Asset struct {
	// ID is the asset's primary key
	Id AssetID `protobuf:"bytes,1,opt,name=id,proto3" json:"id" yaml:"id"`
	// Status is a current status of the asset
	Status AssetStatus `protobuf:"varint,2,opt,name=status,proto3,enum=osmosis.bridge.v1beta1.AssetStatus" json:"status,omitempty" yaml:"status"`
	// Exponent represents the power of 10 used for coin representation
	Exponent uint64 `protobuf:"varint,3,opt,name=exponent,proto3" json:"exponent,omitempty" yaml:"exponent"`
}

func (m *Asset) Reset()         { *m = Asset{} }
func (m *Asset) String() string { return proto.CompactTextString(m) }
func (*Asset) ProtoMessage()    {}
func (*Asset) Descriptor() ([]byte, []int) {
	return fileDescriptor_f999ddf08452f1f3, []int{2}
}
func (m *Asset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Asset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Asset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Asset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Asset.Merge(m, src)
}
func (m *Asset) XXX_Size() int {
	return m.Size()
}
func (m *Asset) XXX_DiscardUnknown() {
	xxx_messageInfo_Asset.DiscardUnknown(m)
}

var xxx_messageInfo_Asset proto.InternalMessageInfo

func (m *Asset) GetId() AssetID {
	if m != nil {
		return m.Id
	}
	return AssetID{}
}

func (m *Asset) GetStatus() AssetStatus {
	if m != nil {
		return m.Status
	}
	return AssetStatus_ASSET_STATUS_UNSPECIFIED
}

func (m *Asset) GetExponent() uint64 {
	if m != nil {
		return m.Exponent
	}
	return 0
}

func init() {
	proto.RegisterEnum("osmosis.bridge.v1beta1.AssetStatus", AssetStatus_name, AssetStatus_value)
	proto.RegisterType((*Params)(nil), "osmosis.bridge.v1beta1.Params")
	proto.RegisterType((*AssetID)(nil), "osmosis.bridge.v1beta1.AssetID")
	proto.RegisterType((*Asset)(nil), "osmosis.bridge.v1beta1.Asset")
}

func init() {
	proto.RegisterFile("osmosis/bridge/v1beta1/bridge.proto", fileDescriptor_f999ddf08452f1f3)
}

var fileDescriptor_f999ddf08452f1f3 = []byte{
	// 559 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0x4f, 0x6e, 0xda, 0x40,
	0x18, 0xc5, 0xb1, 0x49, 0x48, 0x33, 0xa4, 0x09, 0x99, 0xf4, 0x8f, 0xdb, 0x06, 0x9b, 0x4e, 0xa4,
	0x0a, 0x55, 0xad, 0x2d, 0xc8, 0x2e, 0x3b, 0x8c, 0xa9, 0x8a, 0x82, 0x20, 0xb2, 0x61, 0xd3, 0x0d,
	0x32, 0xf6, 0xc4, 0x58, 0x8d, 0x3d, 0x88, 0x31, 0x28, 0x1c, 0xa0, 0xfb, 0x1e, 0xa2, 0x87, 0xc9,
	0xa2, 0x8b, 0x2c, 0xab, 0x2e, 0xac, 0x0a, 0x6e, 0xe0, 0x13, 0x54, 0x9e, 0x31, 0x2d, 0x91, 0x50,
	0x76, 0x7e, 0xf3, 0x7e, 0xef, 0x7d, 0x9f, 0xc6, 0x1a, 0x70, 0x46, 0x68, 0x40, 0xa8, 0x4f, 0xb5,
	0xd1, 0xd4, 0x77, 0x3d, 0xac, 0xcd, 0x6b, 0x23, 0x1c, 0xd9, 0xb5, 0x4c, 0xaa, 0x93, 0x29, 0x89,
	0x08, 0x7c, 0x91, 0x41, 0x6a, 0x76, 0x9a, 0x41, 0xaf, 0x9f, 0x79, 0xc4, 0x23, 0x0c, 0xd1, 0xd2,
	0x2f, 0x4e, 0xa3, 0x6f, 0x22, 0x28, 0x5c, 0xd9, 0x53, 0x3b, 0xa0, 0xf0, 0x03, 0xd8, 0xa3, 0xbe,
	0x17, 0xe2, 0x29, 0x95, 0x84, 0x4a, 0xbe, 0xba, 0xaf, 0xc3, 0x24, 0x56, 0x0e, 0x17, 0x76, 0x70,
	0x73, 0x81, 0x32, 0x03, 0x99, 0x6b, 0x04, 0x76, 0x40, 0xc1, 0xa6, 0x14, 0x47, 0x54, 0x12, 0x2b,
	0xf9, 0x6a, 0xb1, 0x5e, 0x56, 0xb7, 0xcf, 0x55, 0x1b, 0x29, 0xa5, 0x3f, 0xbf, 0x8b, 0x95, 0x5c,
	0x12, 0x2b, 0x4f, 0x79, 0x1f, 0x8f, 0x22, 0x33, 0xeb, 0x80, 0x17, 0xe0, 0x60, 0x4e, 0x22, 0x4c,
	0x87, 0x21, 0xc6, 0x2e, 0x76, 0xa5, 0x7c, 0x45, 0xa8, 0xee, 0xe8, 0x2f, 0x93, 0x58, 0x39, 0xe1,
	0x81, 0x4d, 0x17, 0x99, 0x45, 0x26, 0xbb, 0x4c, 0xc1, 0x26, 0xc8, 0x5f, 0x63, 0x2c, 0xed, 0x54,
	0x84, 0xea, 0xbe, 0x5e, 0x4b, 0xe7, 0xfc, 0x8e, 0x95, 0x37, 0x0e, 0x5b, 0x87, 0xba, 0x5f, 0x55,
	0x9f, 0x68, 0x81, 0x1d, 0x8d, 0xd5, 0x0e, 0xf6, 0x6c, 0x67, 0x61, 0x60, 0x27, 0x89, 0x15, 0xc0,
	0x5b, 0xaf, 0x31, 0x46, 0x66, 0x9a, 0x46, 0x01, 0xd8, 0x63, 0x8b, 0xb6, 0x8d, 0x74, 0x17, 0x4a,
	0x66, 0x53, 0x07, 0x0f, 0x9d, 0xb1, 0xed, 0x87, 0x92, 0xc0, 0x8a, 0x37, 0x76, 0xd9, 0x74, 0x91,
	0x59, 0xe4, 0xb2, 0x99, 0x2a, 0xf8, 0x0e, 0xec, 0xba, 0x38, 0x24, 0x81, 0x24, 0xb2, 0x50, 0x29,
	0x89, 0x95, 0x03, 0x1e, 0x62, 0xc7, 0xc8, 0xe4, 0x36, 0xfa, 0x29, 0x80, 0x5d, 0x36, 0x0f, 0xea,
	0x40, 0xf4, 0x5d, 0x36, 0xa3, 0x58, 0x57, 0x1e, 0xbd, 0xc3, 0xb6, 0xa1, 0x1f, 0x67, 0xb7, 0xb8,
	0xcf, 0x3b, 0x7d, 0x17, 0x99, 0xa2, 0xef, 0xc2, 0x2e, 0x28, 0xd0, 0xc8, 0x8e, 0x66, 0x94, 0x8d,
	0x3d, 0xac, 0x9f, 0x3d, 0xda, 0x63, 0x31, 0x54, 0x3f, 0xfe, 0xff, 0x37, 0x78, 0x18, 0x99, 0x59,
	0x0b, 0xd4, 0xc0, 0x13, 0x7c, 0x3b, 0x21, 0x21, 0x0e, 0xa3, 0xec, 0x4f, 0x9c, 0x24, 0xb1, 0x72,
	0xc4, 0xe1, 0xb5, 0x83, 0xcc, 0x7f, 0xd0, 0xfb, 0x1f, 0x02, 0x28, 0x6e, 0x74, 0xc3, 0x53, 0x20,
	0x35, 0x2c, 0xab, 0xd5, 0x1f, 0x5a, 0xfd, 0x46, 0x7f, 0x60, 0x0d, 0x07, 0x5d, 0xeb, 0xaa, 0xd5,
	0x6c, 0x7f, 0x6a, 0xb7, 0x8c, 0x52, 0x0e, 0x9e, 0x80, 0xa3, 0x07, 0x6e, 0xef, 0xb2, 0x24, 0xc0,
	0x0a, 0x38, 0x7d, 0x70, 0xa8, 0x77, 0x7a, 0xcd, 0xcb, 0x96, 0x31, 0x6c, 0x77, 0xf5, 0xde, 0xa0,
	0x6b, 0x94, 0x44, 0xf8, 0x16, 0x94, 0xb7, 0x12, 0xbd, 0x41, 0x9f, 0x23, 0x79, 0x58, 0x06, 0xaf,
	0xb6, 0x22, 0x7a, 0xaf, 0xff, 0xb9, 0xb4, 0xa3, 0x77, 0xee, 0x96, 0xb2, 0x70, 0xbf, 0x94, 0x85,
	0x3f, 0x4b, 0x59, 0xf8, 0xbe, 0x92, 0x73, 0xf7, 0x2b, 0x39, 0xf7, 0x6b, 0x25, 0xe7, 0xbe, 0xd4,
	0x3d, 0x3f, 0x1a, 0xcf, 0x46, 0xaa, 0x43, 0x02, 0x2d, 0xbb, 0xbb, 0x8f, 0x37, 0xf6, 0x88, 0xae,
	0x85, 0x36, 0xaf, 0x9f, 0x6b, 0xb7, 0xeb, 0x77, 0x17, 0x2d, 0x26, 0x98, 0x8e, 0x0a, 0xec, 0x05,
	0x9d, 0xff, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x14, 0x36, 0xb7, 0x96, 0x03, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Fee.Size()
		i -= size
		if _, err := m.Fee.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintBridge(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.VotesNeeded != 0 {
		i = encodeVarintBridge(dAtA, i, uint64(m.VotesNeeded))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Assets) > 0 {
		for iNdEx := len(m.Assets) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Assets[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBridge(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Signers) > 0 {
		for iNdEx := len(m.Signers) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Signers[iNdEx])
			copy(dAtA[i:], m.Signers[iNdEx])
			i = encodeVarintBridge(dAtA, i, uint64(len(m.Signers[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AssetID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssetID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssetID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintBridge(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SourceChain) > 0 {
		i -= len(m.SourceChain)
		copy(dAtA[i:], m.SourceChain)
		i = encodeVarintBridge(dAtA, i, uint64(len(m.SourceChain)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Asset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Asset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Asset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Exponent != 0 {
		i = encodeVarintBridge(dAtA, i, uint64(m.Exponent))
		i--
		dAtA[i] = 0x18
	}
	if m.Status != 0 {
		i = encodeVarintBridge(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.Id.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintBridge(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintBridge(dAtA []byte, offset int, v uint64) int {
	offset -= sovBridge(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Signers) > 0 {
		for _, s := range m.Signers {
			l = len(s)
			n += 1 + l + sovBridge(uint64(l))
		}
	}
	if len(m.Assets) > 0 {
		for _, e := range m.Assets {
			l = e.Size()
			n += 1 + l + sovBridge(uint64(l))
		}
	}
	if m.VotesNeeded != 0 {
		n += 1 + sovBridge(uint64(m.VotesNeeded))
	}
	l = m.Fee.Size()
	n += 1 + l + sovBridge(uint64(l))
	return n
}

func (m *AssetID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SourceChain)
	if l > 0 {
		n += 1 + l + sovBridge(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovBridge(uint64(l))
	}
	return n
}

func (m *Asset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Id.Size()
	n += 1 + l + sovBridge(uint64(l))
	if m.Status != 0 {
		n += 1 + sovBridge(uint64(m.Status))
	}
	if m.Exponent != 0 {
		n += 1 + sovBridge(uint64(m.Exponent))
	}
	return n
}

func sovBridge(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBridge(x uint64) (n int) {
	return sovBridge(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signers", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signers = append(m.Signers, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assets = append(m.Assets, Asset{})
			if err := m.Assets[len(m.Assets)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VotesNeeded", wireType)
			}
			m.VotesNeeded = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VotesNeeded |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Fee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssetID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AssetID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AssetID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceChain", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceChain = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Asset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Asset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Asset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBridge
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBridge
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Id.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= AssetStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exponent", wireType)
			}
			m.Exponent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Exponent |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBridge(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBridge
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBridge(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBridge
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBridge
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBridge
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBridge
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBridge
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBridge        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBridge          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBridge = fmt.Errorf("proto: unexpected end of group")
)
