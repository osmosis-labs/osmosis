// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/protorev/v1beta1/protorev.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Route is a directed cyclic graph that tracks a feasible cyclic arbitrage
// trading route
type SearcherRoutes struct {
	// The denomination that will be used to execute cyclic arbitrade trades
	ArbDenom string `protobuf:"bytes,1,opt,name=arb_denom,json=arbDenom,proto3" json:"arb_denom,omitempty"`
	// Stores all of the possible hot paths for a given pool id
	Routes []*Route `protobuf:"bytes,2,rep,name=routes,proto3" json:"routes,omitempty"`
}

func (m *SearcherRoutes) Reset()         { *m = SearcherRoutes{} }
func (m *SearcherRoutes) String() string { return proto.CompactTextString(m) }
func (*SearcherRoutes) ProtoMessage()    {}
func (*SearcherRoutes) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e9f2391fd9fec01, []int{0}
}
func (m *SearcherRoutes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearcherRoutes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearcherRoutes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearcherRoutes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearcherRoutes.Merge(m, src)
}
func (m *SearcherRoutes) XXX_Size() int {
	return m.Size()
}
func (m *SearcherRoutes) XXX_DiscardUnknown() {
	xxx_messageInfo_SearcherRoutes.DiscardUnknown(m)
}

var xxx_messageInfo_SearcherRoutes proto.InternalMessageInfo

func (m *SearcherRoutes) GetArbDenom() string {
	if m != nil {
		return m.ArbDenom
	}
	return ""
}

func (m *SearcherRoutes) GetRoutes() []*Route {
	if m != nil {
		return m.Routes
	}
	return nil
}

type Route struct {
	// The pool IDs that are travered in the directed cyclic graph (traversed left
	// -> right)
	Pools []uint64 `protobuf:"varint,1,rep,packed,name=pools,proto3" json:"pools,omitempty"`
}

func (m *Route) Reset()         { *m = Route{} }
func (m *Route) String() string { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()    {}
func (*Route) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e9f2391fd9fec01, []int{1}
}
func (m *Route) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Route) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Route.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Route) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route.Merge(m, src)
}
func (m *Route) XXX_Size() int {
	return m.Size()
}
func (m *Route) XXX_DiscardUnknown() {
	xxx_messageInfo_Route.DiscardUnknown(m)
}

var xxx_messageInfo_Route proto.InternalMessageInfo

func (m *Route) GetPools() []uint64 {
	if m != nil {
		return m.Pools
	}
	return nil
}

// ProtoRevStatistics stores information about how many trades, profits, and
// rebalances were executed by the module
type ProtoRevStatistics struct {
	// The number of artbitrages that have been executed by the module account
	NumberOfTrades uint64 `protobuf:"varint,1,opt,name=number_of_trades,json=numberOfTrades,proto3" json:"number_of_trades,omitempty"`
	// The profits of trading by coin
	Profits map[string]uint64 `protobuf:"bytes,2,rep,name=profits,proto3" json:"profits,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	// The number of pools that have been rebalanced by pool id
	Pools map[string]uint64 `protobuf:"bytes,3,rep,name=pools,proto3" json:"pools,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (m *ProtoRevStatistics) Reset()         { *m = ProtoRevStatistics{} }
func (m *ProtoRevStatistics) String() string { return proto.CompactTextString(m) }
func (*ProtoRevStatistics) ProtoMessage()    {}
func (*ProtoRevStatistics) Descriptor() ([]byte, []int) {
	return fileDescriptor_1e9f2391fd9fec01, []int{2}
}
func (m *ProtoRevStatistics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProtoRevStatistics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProtoRevStatistics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProtoRevStatistics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProtoRevStatistics.Merge(m, src)
}
func (m *ProtoRevStatistics) XXX_Size() int {
	return m.Size()
}
func (m *ProtoRevStatistics) XXX_DiscardUnknown() {
	xxx_messageInfo_ProtoRevStatistics.DiscardUnknown(m)
}

var xxx_messageInfo_ProtoRevStatistics proto.InternalMessageInfo

func (m *ProtoRevStatistics) GetNumberOfTrades() uint64 {
	if m != nil {
		return m.NumberOfTrades
	}
	return 0
}

func (m *ProtoRevStatistics) GetProfits() map[string]uint64 {
	if m != nil {
		return m.Profits
	}
	return nil
}

func (m *ProtoRevStatistics) GetPools() map[string]uint64 {
	if m != nil {
		return m.Pools
	}
	return nil
}

func init() {
	proto.RegisterType((*SearcherRoutes)(nil), "osmosis.protorev.v1beta1.SearcherRoutes")
	proto.RegisterType((*Route)(nil), "osmosis.protorev.v1beta1.Route")
	proto.RegisterType((*ProtoRevStatistics)(nil), "osmosis.protorev.v1beta1.ProtoRevStatistics")
	proto.RegisterMapType((map[string]uint64)(nil), "osmosis.protorev.v1beta1.ProtoRevStatistics.PoolsEntry")
	proto.RegisterMapType((map[string]uint64)(nil), "osmosis.protorev.v1beta1.ProtoRevStatistics.ProfitsEntry")
}

func init() {
	proto.RegisterFile("osmosis/protorev/v1beta1/protorev.proto", fileDescriptor_1e9f2391fd9fec01)
}

var fileDescriptor_1e9f2391fd9fec01 = []byte{
	// 391 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0x3d, 0xaf, 0xda, 0x30,
	0x14, 0x25, 0x09, 0xd0, 0xe2, 0x56, 0x08, 0x59, 0x0c, 0x69, 0xaa, 0xa6, 0x88, 0xa5, 0x59, 0x9a,
	0x08, 0x5a, 0x09, 0xca, 0x58, 0xb5, 0x63, 0x3f, 0x14, 0x3a, 0x75, 0x89, 0xec, 0xe0, 0x40, 0x54,
	0x12, 0x47, 0xb6, 0x13, 0x95, 0x7f, 0xf1, 0x7e, 0xd6, 0x1b, 0x19, 0x19, 0x9f, 0xe0, 0x8f, 0x3c,
	0xd9, 0x4e, 0xe0, 0x49, 0x4f, 0x0c, 0x6c, 0xf7, 0x9c, 0x7b, 0xee, 0xb9, 0xc7, 0x57, 0x06, 0x1f,
	0x28, 0xcf, 0x28, 0x4f, 0x79, 0x50, 0x30, 0x2a, 0x28, 0x23, 0x55, 0x50, 0x4d, 0x30, 0x11, 0x68,
	0x72, 0x26, 0x7c, 0x55, 0x40, 0xbb, 0x16, 0xfa, 0x67, 0xbe, 0x16, 0x3a, 0x6f, 0x62, 0xd5, 0x8a,
	0x54, 0x23, 0xd0, 0x40, 0xab, 0x9c, 0xe1, 0x9a, 0xae, 0xa9, 0xe6, 0x65, 0x55, 0xb3, 0xae, 0xd6,
	0x04, 0x18, 0x71, 0x72, 0x5e, 0x17, 0xd3, 0x34, 0xd7, 0xfd, 0x71, 0x02, 0xfa, 0x4b, 0x82, 0x58,
	0xbc, 0x21, 0x2c, 0xa4, 0xa5, 0x20, 0x1c, 0xbe, 0x05, 0x3d, 0xc4, 0x70, 0xb4, 0x22, 0x39, 0xcd,
	0x6c, 0x63, 0x64, 0x78, 0xbd, 0xf0, 0x25, 0x62, 0xf8, 0x9b, 0xc4, 0x70, 0x06, 0xba, 0x4c, 0xc9,
	0x6c, 0x73, 0x64, 0x79, 0xaf, 0xa6, 0xef, 0xfd, 0x6b, 0x51, 0x7d, 0x65, 0x17, 0xd6, 0xf2, 0xf1,
	0x3b, 0xd0, 0x51, 0x04, 0x1c, 0x82, 0x4e, 0x41, 0xe9, 0x96, 0xdb, 0xc6, 0xc8, 0xf2, 0xda, 0xa1,
	0x06, 0xe3, 0x83, 0x09, 0xe0, 0x6f, 0xe9, 0x10, 0x92, 0x6a, 0x29, 0x90, 0x48, 0xb9, 0x48, 0x63,
	0x0e, 0x3d, 0x30, 0xc8, 0xcb, 0x0c, 0x13, 0x16, 0xd1, 0x24, 0x12, 0x0c, 0xad, 0x08, 0x57, 0x91,
	0xda, 0x61, 0x5f, 0xf3, 0xbf, 0x92, 0x3f, 0x8a, 0x85, 0x4b, 0xf0, 0xa2, 0x60, 0x34, 0x49, 0x45,
	0x93, 0xec, 0xcb, 0xf5, 0x64, 0xcf, 0x17, 0x49, 0x4a, 0xce, 0x7e, 0xcf, 0x05, 0xdb, 0x85, 0x8d,
	0x13, 0xfc, 0xd1, 0x64, 0xb5, 0x94, 0xe5, 0xec, 0x36, 0x4b, 0x39, 0xa9, 0x0d, 0xb5, 0x8b, 0xb3,
	0x00, 0xaf, 0x9f, 0xee, 0x81, 0x03, 0x60, 0xfd, 0x23, 0xbb, 0xfa, 0xc6, 0xb2, 0x94, 0xc7, 0xa9,
	0xd0, 0xb6, 0x24, 0xb6, 0xa9, 0x1e, 0xa9, 0xc1, 0xc2, 0x9c, 0x1b, 0xce, 0x1c, 0x80, 0x8b, 0xe1,
	0x2d, 0x93, 0x5f, 0x7f, 0xde, 0x1f, 0x5d, 0x63, 0x7f, 0x74, 0x8d, 0x87, 0xa3, 0x6b, 0xdc, 0x9d,
	0xdc, 0xd6, 0xfe, 0xe4, 0xb6, 0x0e, 0x27, 0xb7, 0xf5, 0xf7, 0xf3, 0x3a, 0x15, 0x9b, 0x12, 0xfb,
	0x31, 0xcd, 0x82, 0xfa, 0x65, 0x1f, 0xb7, 0x08, 0xf3, 0x06, 0x04, 0xd5, 0x64, 0x1a, 0xfc, 0xbf,
	0xfc, 0x56, 0xb1, 0x2b, 0x08, 0xc7, 0x5d, 0x85, 0x3f, 0x3d, 0x06, 0x00, 0x00, 0xff, 0xff, 0xdf,
	0xd4, 0xe1, 0xd8, 0xce, 0x02, 0x00, 0x00,
}

func (m *SearcherRoutes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearcherRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearcherRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintProtorev(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ArbDenom) > 0 {
		i -= len(m.ArbDenom)
		copy(dAtA[i:], m.ArbDenom)
		i = encodeVarintProtorev(dAtA, i, uint64(len(m.ArbDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Route) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Route) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Route) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pools) > 0 {
		dAtA2 := make([]byte, len(m.Pools)*10)
		var j1 int
		for _, num := range m.Pools {
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintProtorev(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ProtoRevStatistics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProtoRevStatistics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProtoRevStatistics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for k := range m.Pools {
			v := m.Pools[k]
			baseI := i
			i = encodeVarintProtorev(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintProtorev(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintProtorev(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Profits) > 0 {
		for k := range m.Profits {
			v := m.Profits[k]
			baseI := i
			i = encodeVarintProtorev(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintProtorev(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintProtorev(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.NumberOfTrades != 0 {
		i = encodeVarintProtorev(dAtA, i, uint64(m.NumberOfTrades))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintProtorev(dAtA []byte, offset int, v uint64) int {
	offset -= sovProtorev(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SearcherRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ArbDenom)
	if l > 0 {
		n += 1 + l + sovProtorev(uint64(l))
	}
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovProtorev(uint64(l))
		}
	}
	return n
}

func (m *Route) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pools) > 0 {
		l = 0
		for _, e := range m.Pools {
			l += sovProtorev(uint64(e))
		}
		n += 1 + sovProtorev(uint64(l)) + l
	}
	return n
}

func (m *ProtoRevStatistics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumberOfTrades != 0 {
		n += 1 + sovProtorev(uint64(m.NumberOfTrades))
	}
	if len(m.Profits) > 0 {
		for k, v := range m.Profits {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovProtorev(uint64(len(k))) + 1 + sovProtorev(uint64(v))
			n += mapEntrySize + 1 + sovProtorev(uint64(mapEntrySize))
		}
	}
	if len(m.Pools) > 0 {
		for k, v := range m.Pools {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovProtorev(uint64(len(k))) + 1 + sovProtorev(uint64(v))
			n += mapEntrySize + 1 + sovProtorev(uint64(mapEntrySize))
		}
	}
	return n
}

func sovProtorev(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProtorev(x uint64) (n int) {
	return sovProtorev(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SearcherRoutes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtorev
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearcherRoutes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearcherRoutes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArbDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtorev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtorev
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtorev
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArbDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtorev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtorev
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtorev
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &Route{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtorev(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtorev
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Route) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtorev
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Route: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Route: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtorev
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Pools = append(m.Pools, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtorev
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthProtorev
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthProtorev
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Pools) == 0 {
					m.Pools = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtorev
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Pools = append(m.Pools, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtorev(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtorev
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ProtoRevStatistics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtorev
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProtoRevStatistics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProtoRevStatistics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfTrades", wireType)
			}
			m.NumberOfTrades = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtorev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfTrades |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtorev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtorev
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtorev
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Profits == nil {
				m.Profits = make(map[string]uint64)
			}
			var mapkey string
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtorev
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtorev
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthProtorev
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthProtorev
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtorev
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipProtorev(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthProtorev
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Profits[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtorev
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtorev
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtorev
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pools == nil {
				m.Pools = make(map[string]uint64)
			}
			var mapkey string
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowProtorev
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtorev
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthProtorev
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthProtorev
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowProtorev
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipProtorev(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthProtorev
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Pools[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtorev(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtorev
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtorev(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtorev
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtorev
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtorev
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProtorev
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProtorev
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProtorev
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProtorev        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtorev          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProtorev = fmt.Errorf("proto: unexpected end of group")
)
