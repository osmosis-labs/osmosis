// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/protorev/v1beta1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgSetHotRoutes defines the Msg/SetHotRoutes request type.
type MsgSetHotRoutes struct {
	// admin is the account that is authorized to set the hot routes.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty" yaml:"admin"`
	// hot_routes is the list of hot routes to set.
	HotRoutes []TokenPairArbRoutes `protobuf:"bytes,2,rep,name=hot_routes,json=hotRoutes,proto3" json:"hot_routes" yaml:"hot_routes"`
}

func (m *MsgSetHotRoutes) Reset()         { *m = MsgSetHotRoutes{} }
func (m *MsgSetHotRoutes) String() string { return proto.CompactTextString(m) }
func (*MsgSetHotRoutes) ProtoMessage()    {}
func (*MsgSetHotRoutes) Descriptor() ([]byte, []int) {
	return fileDescriptor_2783dce032fc6954, []int{0}
}
func (m *MsgSetHotRoutes) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetHotRoutes) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetHotRoutes.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetHotRoutes) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetHotRoutes.Merge(m, src)
}
func (m *MsgSetHotRoutes) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetHotRoutes) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetHotRoutes.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetHotRoutes proto.InternalMessageInfo

func (m *MsgSetHotRoutes) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgSetHotRoutes) GetHotRoutes() []TokenPairArbRoutes {
	if m != nil {
		return m.HotRoutes
	}
	return nil
}

// MsgSetHotRoutesResponse defines the Msg/SetHotRoutes response type.
type MsgSetHotRoutesResponse struct {
}

func (m *MsgSetHotRoutesResponse) Reset()         { *m = MsgSetHotRoutesResponse{} }
func (m *MsgSetHotRoutesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetHotRoutesResponse) ProtoMessage()    {}
func (*MsgSetHotRoutesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2783dce032fc6954, []int{1}
}
func (m *MsgSetHotRoutesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetHotRoutesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetHotRoutesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetHotRoutesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetHotRoutesResponse.Merge(m, src)
}
func (m *MsgSetHotRoutesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetHotRoutesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetHotRoutesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetHotRoutesResponse proto.InternalMessageInfo

// MsgSetDeveloperAccount defines the Msg/SetDeveloperAccount request type.
type MsgSetDeveloperAccount struct {
	// admin is the account that is authorized to set the developer account.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty" yaml:"admin"`
	// developer_account is the account that will receive a portion of the profits
	// from the protorev module.
	DeveloperAccount string `protobuf:"bytes,2,opt,name=developer_account,json=developerAccount,proto3" json:"developer_account,omitempty" yaml:"developer_account"`
}

func (m *MsgSetDeveloperAccount) Reset()         { *m = MsgSetDeveloperAccount{} }
func (m *MsgSetDeveloperAccount) String() string { return proto.CompactTextString(m) }
func (*MsgSetDeveloperAccount) ProtoMessage()    {}
func (*MsgSetDeveloperAccount) Descriptor() ([]byte, []int) {
	return fileDescriptor_2783dce032fc6954, []int{2}
}
func (m *MsgSetDeveloperAccount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetDeveloperAccount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetDeveloperAccount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetDeveloperAccount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetDeveloperAccount.Merge(m, src)
}
func (m *MsgSetDeveloperAccount) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetDeveloperAccount) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetDeveloperAccount.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetDeveloperAccount proto.InternalMessageInfo

func (m *MsgSetDeveloperAccount) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgSetDeveloperAccount) GetDeveloperAccount() string {
	if m != nil {
		return m.DeveloperAccount
	}
	return ""
}

// MsgSetDeveloperAccountResponse defines the Msg/SetDeveloperAccount response
// type.
type MsgSetDeveloperAccountResponse struct {
}

func (m *MsgSetDeveloperAccountResponse) Reset()         { *m = MsgSetDeveloperAccountResponse{} }
func (m *MsgSetDeveloperAccountResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetDeveloperAccountResponse) ProtoMessage()    {}
func (*MsgSetDeveloperAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2783dce032fc6954, []int{3}
}
func (m *MsgSetDeveloperAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetDeveloperAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetDeveloperAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetDeveloperAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetDeveloperAccountResponse.Merge(m, src)
}
func (m *MsgSetDeveloperAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetDeveloperAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetDeveloperAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetDeveloperAccountResponse proto.InternalMessageInfo

// MsgSetInfoByPoolType defines the Msg/SetInfoByPoolType request type.
type MsgSetInfoByPoolType struct {
	// admin is the account that is authorized to set the pool weights.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty" yaml:"admin"`
	// info_by_pool_type contains information about the pool types.
	InfoByPoolType InfoByPoolType `protobuf:"bytes,2,opt,name=info_by_pool_type,json=infoByPoolType,proto3" json:"info_by_pool_type" yaml:"info_by_pool_type"`
}

func (m *MsgSetInfoByPoolType) Reset()         { *m = MsgSetInfoByPoolType{} }
func (m *MsgSetInfoByPoolType) String() string { return proto.CompactTextString(m) }
func (*MsgSetInfoByPoolType) ProtoMessage()    {}
func (*MsgSetInfoByPoolType) Descriptor() ([]byte, []int) {
	return fileDescriptor_2783dce032fc6954, []int{4}
}
func (m *MsgSetInfoByPoolType) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetInfoByPoolType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetInfoByPoolType.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetInfoByPoolType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetInfoByPoolType.Merge(m, src)
}
func (m *MsgSetInfoByPoolType) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetInfoByPoolType) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetInfoByPoolType.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetInfoByPoolType proto.InternalMessageInfo

func (m *MsgSetInfoByPoolType) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgSetInfoByPoolType) GetInfoByPoolType() InfoByPoolType {
	if m != nil {
		return m.InfoByPoolType
	}
	return InfoByPoolType{}
}

// MsgSetInfoByPoolTypeResponse defines the Msg/SetInfoByPoolType response type.
type MsgSetInfoByPoolTypeResponse struct {
}

func (m *MsgSetInfoByPoolTypeResponse) Reset()         { *m = MsgSetInfoByPoolTypeResponse{} }
func (m *MsgSetInfoByPoolTypeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetInfoByPoolTypeResponse) ProtoMessage()    {}
func (*MsgSetInfoByPoolTypeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2783dce032fc6954, []int{5}
}
func (m *MsgSetInfoByPoolTypeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetInfoByPoolTypeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetInfoByPoolTypeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetInfoByPoolTypeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetInfoByPoolTypeResponse.Merge(m, src)
}
func (m *MsgSetInfoByPoolTypeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetInfoByPoolTypeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetInfoByPoolTypeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetInfoByPoolTypeResponse proto.InternalMessageInfo

// MsgSetMaxPoolPointsPerTx defines the Msg/SetMaxPoolPointsPerTx request type.
type MsgSetMaxPoolPointsPerTx struct {
	// admin is the account that is authorized to set the max pool points per tx.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty" yaml:"admin"`
	// max_pool_points_per_tx is the maximum number of pool points that can be
	// consumed per transaction.
	MaxPoolPointsPerTx uint64 `protobuf:"varint,2,opt,name=max_pool_points_per_tx,json=maxPoolPointsPerTx,proto3" json:"max_pool_points_per_tx,omitempty" yaml:"max_pool_points_per_tx"`
}

func (m *MsgSetMaxPoolPointsPerTx) Reset()         { *m = MsgSetMaxPoolPointsPerTx{} }
func (m *MsgSetMaxPoolPointsPerTx) String() string { return proto.CompactTextString(m) }
func (*MsgSetMaxPoolPointsPerTx) ProtoMessage()    {}
func (*MsgSetMaxPoolPointsPerTx) Descriptor() ([]byte, []int) {
	return fileDescriptor_2783dce032fc6954, []int{6}
}
func (m *MsgSetMaxPoolPointsPerTx) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetMaxPoolPointsPerTx) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetMaxPoolPointsPerTx.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetMaxPoolPointsPerTx) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetMaxPoolPointsPerTx.Merge(m, src)
}
func (m *MsgSetMaxPoolPointsPerTx) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetMaxPoolPointsPerTx) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetMaxPoolPointsPerTx.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetMaxPoolPointsPerTx proto.InternalMessageInfo

func (m *MsgSetMaxPoolPointsPerTx) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgSetMaxPoolPointsPerTx) GetMaxPoolPointsPerTx() uint64 {
	if m != nil {
		return m.MaxPoolPointsPerTx
	}
	return 0
}

// MsgSetMaxPoolPointsPerTxResponse defines the Msg/SetMaxPoolPointsPerTx
// response type.
type MsgSetMaxPoolPointsPerTxResponse struct {
}

func (m *MsgSetMaxPoolPointsPerTxResponse) Reset()         { *m = MsgSetMaxPoolPointsPerTxResponse{} }
func (m *MsgSetMaxPoolPointsPerTxResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetMaxPoolPointsPerTxResponse) ProtoMessage()    {}
func (*MsgSetMaxPoolPointsPerTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2783dce032fc6954, []int{7}
}
func (m *MsgSetMaxPoolPointsPerTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetMaxPoolPointsPerTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetMaxPoolPointsPerTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetMaxPoolPointsPerTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetMaxPoolPointsPerTxResponse.Merge(m, src)
}
func (m *MsgSetMaxPoolPointsPerTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetMaxPoolPointsPerTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetMaxPoolPointsPerTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetMaxPoolPointsPerTxResponse proto.InternalMessageInfo

// MsgSetMaxPoolPointsPerBlock defines the Msg/SetMaxPoolPointsPerBlock request
// type.
type MsgSetMaxPoolPointsPerBlock struct {
	// admin is the account that is authorized to set the max pool points per
	// block.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty" yaml:"admin"`
	// max_pool_points_per_block is the maximum number of pool points that can be
	// consumed per block.
	MaxPoolPointsPerBlock uint64 `protobuf:"varint,2,opt,name=max_pool_points_per_block,json=maxPoolPointsPerBlock,proto3" json:"max_pool_points_per_block,omitempty" yaml:"max_pool_points_per_block"`
}

func (m *MsgSetMaxPoolPointsPerBlock) Reset()         { *m = MsgSetMaxPoolPointsPerBlock{} }
func (m *MsgSetMaxPoolPointsPerBlock) String() string { return proto.CompactTextString(m) }
func (*MsgSetMaxPoolPointsPerBlock) ProtoMessage()    {}
func (*MsgSetMaxPoolPointsPerBlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_2783dce032fc6954, []int{8}
}
func (m *MsgSetMaxPoolPointsPerBlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetMaxPoolPointsPerBlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetMaxPoolPointsPerBlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetMaxPoolPointsPerBlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetMaxPoolPointsPerBlock.Merge(m, src)
}
func (m *MsgSetMaxPoolPointsPerBlock) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetMaxPoolPointsPerBlock) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetMaxPoolPointsPerBlock.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetMaxPoolPointsPerBlock proto.InternalMessageInfo

func (m *MsgSetMaxPoolPointsPerBlock) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgSetMaxPoolPointsPerBlock) GetMaxPoolPointsPerBlock() uint64 {
	if m != nil {
		return m.MaxPoolPointsPerBlock
	}
	return 0
}

// MsgSetMaxPoolPointsPerBlockResponse defines the
// Msg/SetMaxPoolPointsPerBlock response type.
type MsgSetMaxPoolPointsPerBlockResponse struct {
}

func (m *MsgSetMaxPoolPointsPerBlockResponse) Reset()         { *m = MsgSetMaxPoolPointsPerBlockResponse{} }
func (m *MsgSetMaxPoolPointsPerBlockResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetMaxPoolPointsPerBlockResponse) ProtoMessage()    {}
func (*MsgSetMaxPoolPointsPerBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2783dce032fc6954, []int{9}
}
func (m *MsgSetMaxPoolPointsPerBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetMaxPoolPointsPerBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetMaxPoolPointsPerBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetMaxPoolPointsPerBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetMaxPoolPointsPerBlockResponse.Merge(m, src)
}
func (m *MsgSetMaxPoolPointsPerBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetMaxPoolPointsPerBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetMaxPoolPointsPerBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetMaxPoolPointsPerBlockResponse proto.InternalMessageInfo

// MsgSetBaseDenoms defines the Msg/SetBaseDenoms request type.
type MsgSetBaseDenoms struct {
	// admin is the account that is authorized to set the base denoms.
	Admin string `protobuf:"bytes,1,opt,name=admin,proto3" json:"admin,omitempty" yaml:"admin"`
	// base_denoms is the list of base denoms to set.
	BaseDenoms []BaseDenom `protobuf:"bytes,2,rep,name=base_denoms,json=baseDenoms,proto3" json:"base_denoms" yaml:"base_denoms"`
}

func (m *MsgSetBaseDenoms) Reset()         { *m = MsgSetBaseDenoms{} }
func (m *MsgSetBaseDenoms) String() string { return proto.CompactTextString(m) }
func (*MsgSetBaseDenoms) ProtoMessage()    {}
func (*MsgSetBaseDenoms) Descriptor() ([]byte, []int) {
	return fileDescriptor_2783dce032fc6954, []int{10}
}
func (m *MsgSetBaseDenoms) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetBaseDenoms) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetBaseDenoms.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetBaseDenoms) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetBaseDenoms.Merge(m, src)
}
func (m *MsgSetBaseDenoms) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetBaseDenoms) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetBaseDenoms.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetBaseDenoms proto.InternalMessageInfo

func (m *MsgSetBaseDenoms) GetAdmin() string {
	if m != nil {
		return m.Admin
	}
	return ""
}

func (m *MsgSetBaseDenoms) GetBaseDenoms() []BaseDenom {
	if m != nil {
		return m.BaseDenoms
	}
	return nil
}

// MsgSetBaseDenomsResponse defines the Msg/SetBaseDenoms response type.
type MsgSetBaseDenomsResponse struct {
}

func (m *MsgSetBaseDenomsResponse) Reset()         { *m = MsgSetBaseDenomsResponse{} }
func (m *MsgSetBaseDenomsResponse) String() string { return proto.CompactTextString(m) }
func (*MsgSetBaseDenomsResponse) ProtoMessage()    {}
func (*MsgSetBaseDenomsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2783dce032fc6954, []int{11}
}
func (m *MsgSetBaseDenomsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgSetBaseDenomsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgSetBaseDenomsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgSetBaseDenomsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgSetBaseDenomsResponse.Merge(m, src)
}
func (m *MsgSetBaseDenomsResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgSetBaseDenomsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgSetBaseDenomsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgSetBaseDenomsResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgSetHotRoutes)(nil), "osmosis.protorev.v1beta1.MsgSetHotRoutes")
	proto.RegisterType((*MsgSetHotRoutesResponse)(nil), "osmosis.protorev.v1beta1.MsgSetHotRoutesResponse")
	proto.RegisterType((*MsgSetDeveloperAccount)(nil), "osmosis.protorev.v1beta1.MsgSetDeveloperAccount")
	proto.RegisterType((*MsgSetDeveloperAccountResponse)(nil), "osmosis.protorev.v1beta1.MsgSetDeveloperAccountResponse")
	proto.RegisterType((*MsgSetInfoByPoolType)(nil), "osmosis.protorev.v1beta1.MsgSetInfoByPoolType")
	proto.RegisterType((*MsgSetInfoByPoolTypeResponse)(nil), "osmosis.protorev.v1beta1.MsgSetInfoByPoolTypeResponse")
	proto.RegisterType((*MsgSetMaxPoolPointsPerTx)(nil), "osmosis.protorev.v1beta1.MsgSetMaxPoolPointsPerTx")
	proto.RegisterType((*MsgSetMaxPoolPointsPerTxResponse)(nil), "osmosis.protorev.v1beta1.MsgSetMaxPoolPointsPerTxResponse")
	proto.RegisterType((*MsgSetMaxPoolPointsPerBlock)(nil), "osmosis.protorev.v1beta1.MsgSetMaxPoolPointsPerBlock")
	proto.RegisterType((*MsgSetMaxPoolPointsPerBlockResponse)(nil), "osmosis.protorev.v1beta1.MsgSetMaxPoolPointsPerBlockResponse")
	proto.RegisterType((*MsgSetBaseDenoms)(nil), "osmosis.protorev.v1beta1.MsgSetBaseDenoms")
	proto.RegisterType((*MsgSetBaseDenomsResponse)(nil), "osmosis.protorev.v1beta1.MsgSetBaseDenomsResponse")
}

func init() { proto.RegisterFile("osmosis/protorev/v1beta1/tx.proto", fileDescriptor_2783dce032fc6954) }

var fileDescriptor_2783dce032fc6954 = []byte{
	// 889 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xcf, 0x6f, 0xdc, 0x44,
	0x18, 0xcd, 0xa4, 0x80, 0xe8, 0xa4, 0x40, 0xd7, 0xa4, 0xad, 0xd7, 0x6c, 0xbd, 0xce, 0x84, 0xaa,
	0x9b, 0xaa, 0xb5, 0x9b, 0xa5, 0xfc, 0x90, 0x25, 0x90, 0x62, 0xf5, 0x40, 0x0f, 0x41, 0x91, 0x1b,
	0x84, 0xc4, 0x01, 0x63, 0xef, 0x4e, 0x1c, 0xab, 0x6b, 0x8f, 0xe5, 0x99, 0x44, 0xbb, 0x57, 0x8e,
	0x9c, 0x90, 0x90, 0x38, 0xf0, 0x2f, 0xc0, 0x01, 0x21, 0xae, 0xdc, 0xc3, 0xad, 0xa2, 0x07, 0x7a,
	0x61, 0x85, 0x12, 0x24, 0xae, 0x68, 0xff, 0x02, 0xe4, 0x19, 0xaf, 0x37, 0x5e, 0xdb, 0x24, 0xe9,
	0x5e, 0x56, 0xeb, 0x6f, 0xde, 0xf7, 0xbe, 0xf7, 0x9e, 0xed, 0xcf, 0x70, 0x8d, 0xd0, 0x90, 0xd0,
	0x80, 0x1a, 0x71, 0x42, 0x18, 0x49, 0xf0, 0xa1, 0x71, 0xb8, 0xe9, 0x61, 0xe6, 0x6e, 0x1a, 0x6c,
	0xa8, 0xf3, 0x9a, 0x24, 0x67, 0x10, 0x7d, 0x0a, 0xd1, 0x33, 0x88, 0xb2, 0xea, 0x13, 0x9f, 0xf0,
	0xaa, 0x91, 0xfe, 0x13, 0x00, 0xa5, 0xe1, 0x86, 0x41, 0x44, 0x0c, 0xfe, 0x9b, 0x95, 0x5a, 0x3e,
	0x21, 0xfe, 0x00, 0x1b, 0x6e, 0x1c, 0x18, 0x6e, 0x14, 0x11, 0xe6, 0xb2, 0x80, 0x44, 0x19, 0xa3,
	0x72, 0xbb, 0x56, 0x43, 0x3e, 0x51, 0x00, 0x9b, 0x3d, 0x8e, 0x74, 0xc4, 0x48, 0x71, 0x21, 0x8e,
	0xd0, 0x1f, 0x00, 0xbe, 0xb1, 0x4d, 0xfd, 0xc7, 0x98, 0x7d, 0x4c, 0x98, 0x4d, 0x0e, 0x18, 0xa6,
	0xd2, 0x47, 0xf0, 0x65, 0xb7, 0x1f, 0x06, 0x91, 0x0c, 0x34, 0xd0, 0xb9, 0x6c, 0x75, 0x26, 0xe3,
	0xf6, 0x95, 0x91, 0x1b, 0x0e, 0x4c, 0xc4, 0xcb, 0xe8, 0xf7, 0x5f, 0xee, 0xad, 0x66, 0x24, 0x5b,
	0xfd, 0x7e, 0x82, 0x29, 0x7d, 0xcc, 0x92, 0x20, 0xf2, 0x6d, 0xd1, 0x26, 0xed, 0x41, 0xb8, 0x4f,
	0x98, 0x93, 0x70, 0x36, 0x79, 0x59, 0xbb, 0xd4, 0x59, 0xe9, 0xde, 0xd5, 0xeb, 0xd2, 0xd0, 0x77,
	0xc9, 0x13, 0x1c, 0xed, 0xb8, 0x41, 0xb2, 0x95, 0x78, 0x42, 0x81, 0xd5, 0x3c, 0x1a, 0xb7, 0x97,
	0x26, 0xe3, 0x76, 0x43, 0x8c, 0x9d, 0xb1, 0x21, 0xfb, 0xf2, 0xfe, 0x54, 0xa7, 0xd9, 0xfa, 0xfa,
	0x9f, 0x9f, 0xee, 0xdc, 0x98, 0x86, 0x30, 0xe7, 0x02, 0x35, 0xe1, 0x8d, 0xb9, 0x92, 0x8d, 0x69,
	0x4c, 0x22, 0x8a, 0xd1, 0x11, 0x80, 0xd7, 0xc5, 0xd9, 0x43, 0x7c, 0x88, 0x07, 0x24, 0xc6, 0xc9,
	0x56, 0xaf, 0x47, 0x0e, 0x22, 0xb6, 0xb0, 0xf7, 0x47, 0xb0, 0xd1, 0x9f, 0x72, 0x3a, 0xae, 0x20,
	0x95, 0x97, 0x39, 0x57, 0x6b, 0x32, 0x6e, 0xcb, 0x82, 0xab, 0x04, 0x41, 0xf6, 0xd5, 0xfe, 0x9c,
	0x14, 0x73, 0x3d, 0xb5, 0xa7, 0x16, 0xed, 0xcd, 0xeb, 0x45, 0x1a, 0x54, 0xab, 0x4f, 0x72, 0xb3,
	0xff, 0x02, 0xb8, 0x2a, 0x20, 0x8f, 0xa2, 0x3d, 0x62, 0x8d, 0x76, 0x08, 0x19, 0xec, 0x8e, 0x62,
	0xbc, 0xb0, 0xd5, 0x03, 0xd8, 0x08, 0xa2, 0x3d, 0xe2, 0x78, 0x23, 0x27, 0x26, 0x64, 0xe0, 0xb0,
	0x51, 0x8c, 0xb9, 0xd5, 0x95, 0x6e, 0xa7, 0xfe, 0x6e, 0x17, 0x45, 0x58, 0x5a, 0x76, 0xa7, 0xb3,
	0x60, 0x4a, 0x84, 0xc8, 0x7e, 0x3d, 0x28, 0x74, 0x98, 0x6b, 0x69, 0x2c, 0xad, 0x62, 0x2c, 0x45,
	0x52, 0xa4, 0xc2, 0x56, 0x55, 0x3d, 0x8f, 0xe4, 0x39, 0x80, 0xb2, 0x00, 0x6c, 0xbb, 0xc3, 0xf4,
	0x74, 0x87, 0x04, 0x11, 0xa3, 0x3b, 0x38, 0xd9, 0x1d, 0x2e, 0x1c, 0xcb, 0xa7, 0xf0, 0x7a, 0xe8,
	0x0e, 0x85, 0x83, 0x98, 0xf3, 0x3a, 0xe9, 0x8d, 0x66, 0x43, 0x9e, 0xcd, 0x4b, 0xd6, 0xda, 0x64,
	0xdc, 0xbe, 0x29, 0x08, 0xab, 0x71, 0xc8, 0x96, 0xc2, 0x92, 0x2c, 0xf3, 0x56, 0x6a, 0x5b, 0x2b,
	0xda, 0x2e, 0xab, 0x47, 0x08, 0x6a, 0x75, 0x67, 0xb9, 0xfd, 0x3f, 0x01, 0x7c, 0xab, 0x1a, 0x64,
	0x0d, 0x48, 0xef, 0xc9, 0xc2, 0x09, 0x7c, 0x01, 0x9b, 0x55, 0xce, 0xbc, 0x94, 0x3c, 0x0b, 0xe1,
	0xed, 0xc9, 0xb8, 0xad, 0xd5, 0x87, 0xc0, 0xa1, 0xc8, 0xbe, 0x16, 0x56, 0xe9, 0x33, 0xd5, 0x34,
	0x8a, 0x66, 0x31, 0x8a, 0x14, 0xf6, 0x19, 0x0e, 0xfc, 0x7d, 0x46, 0xd1, 0x2d, 0xb8, 0xfe, 0x3f,
	0xf6, 0xf2, 0x18, 0x9e, 0x01, 0x78, 0x55, 0xe0, 0x2c, 0x97, 0xe2, 0x87, 0x38, 0x22, 0xe1, 0xe2,
	0xbb, 0xef, 0x4b, 0xb8, 0xe2, 0xb9, 0x14, 0x3b, 0x7d, 0x4e, 0x97, 0x2d, 0xbf, 0xf5, 0xfa, 0xd7,
	0x21, 0x1f, 0x6d, 0x29, 0xd9, 0x9b, 0x20, 0x89, 0x71, 0xa7, 0x58, 0x90, 0x0d, 0xbd, 0x5c, 0xa1,
	0x79, 0x33, 0x75, 0x2f, 0x17, 0xdd, 0xcf, 0x0c, 0x20, 0x65, 0xfa, 0x68, 0xcf, 0x6a, 0x53, 0xc7,
	0xdd, 0x1f, 0x5e, 0x85, 0x97, 0xb6, 0xa9, 0x2f, 0x7d, 0x07, 0xe0, 0x95, 0xc2, 0xc6, 0xdf, 0xa8,
	0x17, 0x38, 0xb7, 0x43, 0x95, 0xcd, 0x73, 0x43, 0xf3, 0xa0, 0x3b, 0x5f, 0x3d, 0xfb, 0xfb, 0xdb,
	0x65, 0x84, 0x34, 0xa3, 0xf4, 0xc1, 0xa2, 0x98, 0x39, 0xb3, 0xed, 0x2e, 0xfd, 0x0c, 0xe0, 0x9b,
	0x55, 0x5b, 0xf9, 0xfe, 0x59, 0x43, 0xe7, 0x3b, 0x94, 0x0f, 0x2e, 0xda, 0x91, 0xab, 0x35, 0xb8,
	0xda, 0x0d, 0x74, 0xbb, 0x5a, 0x6d, 0x69, 0x75, 0x4b, 0xbf, 0x02, 0x78, 0xad, 0x7a, 0x95, 0x74,
	0xcf, 0x12, 0x51, 0xee, 0x51, 0xcc, 0x8b, 0xf7, 0xe4, 0xd2, 0x1f, 0x70, 0xe9, 0x3a, 0xba, 0x5b,
	0x2d, 0xbd, 0x7a, 0xdd, 0x48, 0xbf, 0x01, 0x28, 0xd7, 0xee, 0x82, 0x77, 0x2f, 0x2a, 0x87, 0xb7,
	0x29, 0x1f, 0xbe, 0x50, 0x5b, 0x6e, 0xe4, 0x7d, 0x6e, 0x64, 0x13, 0x19, 0xe7, 0x37, 0xc2, 0x57,
	0x86, 0xf4, 0x23, 0x80, 0x8d, 0xf2, 0x97, 0x4e, 0x3f, 0x4b, 0x4d, 0x11, 0xaf, 0xbc, 0x77, 0x31,
	0xfc, 0x79, 0x1f, 0x9d, 0xd2, 0xc7, 0x4d, 0xfa, 0x1e, 0xc0, 0xd7, 0x8a, 0xfb, 0xe7, 0xce, 0x59,
	0xa3, 0x67, 0x58, 0xa5, 0x7b, 0x7e, 0x6c, 0x2e, 0x71, 0x83, 0x4b, 0x5c, 0x47, 0x6b, 0xd5, 0x12,
	0x4f, 0x6d, 0x1d, 0xeb, 0x93, 0xa3, 0x63, 0x15, 0x3c, 0x3d, 0x56, 0xc1, 0x5f, 0xc7, 0x2a, 0xf8,
	0xe6, 0x44, 0x5d, 0x7a, 0x7a, 0xa2, 0x2e, 0x3d, 0x3f, 0x51, 0x97, 0x3e, 0x7f, 0xe0, 0x07, 0x6c,
	0xff, 0xc0, 0xd3, 0x7b, 0x24, 0x9c, 0xd2, 0xdc, 0x1b, 0xb8, 0x1e, 0xcd, 0x39, 0x0f, 0xbb, 0xf7,
	0x8d, 0xe1, 0x8c, 0x39, 0xf5, 0x4a, 0xbd, 0x57, 0xf8, 0xf5, 0x3b, 0xff, 0x05, 0x00, 0x00, 0xff,
	0xff, 0x87, 0x74, 0x24, 0x8b, 0x3b, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// SetHotRoutes sets the hot routes that will be explored when creating
	// cyclic arbitrage routes. Can only be called by the admin account.
	SetHotRoutes(ctx context.Context, in *MsgSetHotRoutes, opts ...grpc.CallOption) (*MsgSetHotRoutesResponse, error)
	// SetDeveloperAccount sets the account that can withdraw a portion of the
	// profits from the protorev module. This will be Skip's address.
	SetDeveloperAccount(ctx context.Context, in *MsgSetDeveloperAccount, opts ...grpc.CallOption) (*MsgSetDeveloperAccountResponse, error)
	// SetMaxPoolPointsPerTx sets the maximum number of pool points that can be
	// consumed per transaction. Can only be called by the admin account.
	SetMaxPoolPointsPerTx(ctx context.Context, in *MsgSetMaxPoolPointsPerTx, opts ...grpc.CallOption) (*MsgSetMaxPoolPointsPerTxResponse, error)
	// SetMaxPoolPointsPerBlock sets the maximum number of pool points that can be
	// consumed per block. Can only be called by the admin account.
	SetMaxPoolPointsPerBlock(ctx context.Context, in *MsgSetMaxPoolPointsPerBlock, opts ...grpc.CallOption) (*MsgSetMaxPoolPointsPerBlockResponse, error)
	// SetInfoByPoolType sets the pool type information needed to make smart
	// assumptions about swapping on different pool types
	SetInfoByPoolType(ctx context.Context, in *MsgSetInfoByPoolType, opts ...grpc.CallOption) (*MsgSetInfoByPoolTypeResponse, error)
	// SetBaseDenoms sets the base denoms that will be used to create cyclic
	// arbitrage routes. Can only be called by the admin account.
	SetBaseDenoms(ctx context.Context, in *MsgSetBaseDenoms, opts ...grpc.CallOption) (*MsgSetBaseDenomsResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) SetHotRoutes(ctx context.Context, in *MsgSetHotRoutes, opts ...grpc.CallOption) (*MsgSetHotRoutesResponse, error) {
	out := new(MsgSetHotRoutesResponse)
	err := c.cc.Invoke(ctx, "/osmosis.protorev.v1beta1.Msg/SetHotRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetDeveloperAccount(ctx context.Context, in *MsgSetDeveloperAccount, opts ...grpc.CallOption) (*MsgSetDeveloperAccountResponse, error) {
	out := new(MsgSetDeveloperAccountResponse)
	err := c.cc.Invoke(ctx, "/osmosis.protorev.v1beta1.Msg/SetDeveloperAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetMaxPoolPointsPerTx(ctx context.Context, in *MsgSetMaxPoolPointsPerTx, opts ...grpc.CallOption) (*MsgSetMaxPoolPointsPerTxResponse, error) {
	out := new(MsgSetMaxPoolPointsPerTxResponse)
	err := c.cc.Invoke(ctx, "/osmosis.protorev.v1beta1.Msg/SetMaxPoolPointsPerTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetMaxPoolPointsPerBlock(ctx context.Context, in *MsgSetMaxPoolPointsPerBlock, opts ...grpc.CallOption) (*MsgSetMaxPoolPointsPerBlockResponse, error) {
	out := new(MsgSetMaxPoolPointsPerBlockResponse)
	err := c.cc.Invoke(ctx, "/osmosis.protorev.v1beta1.Msg/SetMaxPoolPointsPerBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetInfoByPoolType(ctx context.Context, in *MsgSetInfoByPoolType, opts ...grpc.CallOption) (*MsgSetInfoByPoolTypeResponse, error) {
	out := new(MsgSetInfoByPoolTypeResponse)
	err := c.cc.Invoke(ctx, "/osmosis.protorev.v1beta1.Msg/SetInfoByPoolType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) SetBaseDenoms(ctx context.Context, in *MsgSetBaseDenoms, opts ...grpc.CallOption) (*MsgSetBaseDenomsResponse, error) {
	out := new(MsgSetBaseDenomsResponse)
	err := c.cc.Invoke(ctx, "/osmosis.protorev.v1beta1.Msg/SetBaseDenoms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// SetHotRoutes sets the hot routes that will be explored when creating
	// cyclic arbitrage routes. Can only be called by the admin account.
	SetHotRoutes(context.Context, *MsgSetHotRoutes) (*MsgSetHotRoutesResponse, error)
	// SetDeveloperAccount sets the account that can withdraw a portion of the
	// profits from the protorev module. This will be Skip's address.
	SetDeveloperAccount(context.Context, *MsgSetDeveloperAccount) (*MsgSetDeveloperAccountResponse, error)
	// SetMaxPoolPointsPerTx sets the maximum number of pool points that can be
	// consumed per transaction. Can only be called by the admin account.
	SetMaxPoolPointsPerTx(context.Context, *MsgSetMaxPoolPointsPerTx) (*MsgSetMaxPoolPointsPerTxResponse, error)
	// SetMaxPoolPointsPerBlock sets the maximum number of pool points that can be
	// consumed per block. Can only be called by the admin account.
	SetMaxPoolPointsPerBlock(context.Context, *MsgSetMaxPoolPointsPerBlock) (*MsgSetMaxPoolPointsPerBlockResponse, error)
	// SetInfoByPoolType sets the pool type information needed to make smart
	// assumptions about swapping on different pool types
	SetInfoByPoolType(context.Context, *MsgSetInfoByPoolType) (*MsgSetInfoByPoolTypeResponse, error)
	// SetBaseDenoms sets the base denoms that will be used to create cyclic
	// arbitrage routes. Can only be called by the admin account.
	SetBaseDenoms(context.Context, *MsgSetBaseDenoms) (*MsgSetBaseDenomsResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) SetHotRoutes(ctx context.Context, req *MsgSetHotRoutes) (*MsgSetHotRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetHotRoutes not implemented")
}
func (*UnimplementedMsgServer) SetDeveloperAccount(ctx context.Context, req *MsgSetDeveloperAccount) (*MsgSetDeveloperAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDeveloperAccount not implemented")
}
func (*UnimplementedMsgServer) SetMaxPoolPointsPerTx(ctx context.Context, req *MsgSetMaxPoolPointsPerTx) (*MsgSetMaxPoolPointsPerTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMaxPoolPointsPerTx not implemented")
}
func (*UnimplementedMsgServer) SetMaxPoolPointsPerBlock(ctx context.Context, req *MsgSetMaxPoolPointsPerBlock) (*MsgSetMaxPoolPointsPerBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetMaxPoolPointsPerBlock not implemented")
}
func (*UnimplementedMsgServer) SetInfoByPoolType(ctx context.Context, req *MsgSetInfoByPoolType) (*MsgSetInfoByPoolTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInfoByPoolType not implemented")
}
func (*UnimplementedMsgServer) SetBaseDenoms(ctx context.Context, req *MsgSetBaseDenoms) (*MsgSetBaseDenomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBaseDenoms not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_SetHotRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetHotRoutes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetHotRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.protorev.v1beta1.Msg/SetHotRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetHotRoutes(ctx, req.(*MsgSetHotRoutes))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetDeveloperAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetDeveloperAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetDeveloperAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.protorev.v1beta1.Msg/SetDeveloperAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetDeveloperAccount(ctx, req.(*MsgSetDeveloperAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetMaxPoolPointsPerTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetMaxPoolPointsPerTx)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetMaxPoolPointsPerTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.protorev.v1beta1.Msg/SetMaxPoolPointsPerTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetMaxPoolPointsPerTx(ctx, req.(*MsgSetMaxPoolPointsPerTx))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetMaxPoolPointsPerBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetMaxPoolPointsPerBlock)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetMaxPoolPointsPerBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.protorev.v1beta1.Msg/SetMaxPoolPointsPerBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetMaxPoolPointsPerBlock(ctx, req.(*MsgSetMaxPoolPointsPerBlock))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetInfoByPoolType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetInfoByPoolType)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetInfoByPoolType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.protorev.v1beta1.Msg/SetInfoByPoolType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetInfoByPoolType(ctx, req.(*MsgSetInfoByPoolType))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_SetBaseDenoms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgSetBaseDenoms)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).SetBaseDenoms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.protorev.v1beta1.Msg/SetBaseDenoms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).SetBaseDenoms(ctx, req.(*MsgSetBaseDenoms))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "osmosis.protorev.v1beta1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetHotRoutes",
			Handler:    _Msg_SetHotRoutes_Handler,
		},
		{
			MethodName: "SetDeveloperAccount",
			Handler:    _Msg_SetDeveloperAccount_Handler,
		},
		{
			MethodName: "SetMaxPoolPointsPerTx",
			Handler:    _Msg_SetMaxPoolPointsPerTx_Handler,
		},
		{
			MethodName: "SetMaxPoolPointsPerBlock",
			Handler:    _Msg_SetMaxPoolPointsPerBlock_Handler,
		},
		{
			MethodName: "SetInfoByPoolType",
			Handler:    _Msg_SetInfoByPoolType_Handler,
		},
		{
			MethodName: "SetBaseDenoms",
			Handler:    _Msg_SetBaseDenoms_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "osmosis/protorev/v1beta1/tx.proto",
}

func (m *MsgSetHotRoutes) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetHotRoutes) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetHotRoutes) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.HotRoutes) > 0 {
		for iNdEx := len(m.HotRoutes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.HotRoutes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetHotRoutesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetHotRoutesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetHotRoutesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetDeveloperAccount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetDeveloperAccount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetDeveloperAccount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeveloperAccount) > 0 {
		i -= len(m.DeveloperAccount)
		copy(dAtA[i:], m.DeveloperAccount)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DeveloperAccount)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetDeveloperAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetDeveloperAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetDeveloperAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetInfoByPoolType) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetInfoByPoolType) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetInfoByPoolType) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.InfoByPoolType.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetInfoByPoolTypeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetInfoByPoolTypeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetInfoByPoolTypeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetMaxPoolPointsPerTx) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetMaxPoolPointsPerTx) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetMaxPoolPointsPerTx) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxPoolPointsPerTx != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MaxPoolPointsPerTx))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetMaxPoolPointsPerTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetMaxPoolPointsPerTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetMaxPoolPointsPerTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetMaxPoolPointsPerBlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetMaxPoolPointsPerBlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetMaxPoolPointsPerBlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxPoolPointsPerBlock != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.MaxPoolPointsPerBlock))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetMaxPoolPointsPerBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetMaxPoolPointsPerBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetMaxPoolPointsPerBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgSetBaseDenoms) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetBaseDenoms) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetBaseDenoms) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BaseDenoms) > 0 {
		for iNdEx := len(m.BaseDenoms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BaseDenoms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Admin) > 0 {
		i -= len(m.Admin)
		copy(dAtA[i:], m.Admin)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Admin)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgSetBaseDenomsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgSetBaseDenomsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgSetBaseDenomsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgSetHotRoutes) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.HotRoutes) > 0 {
		for _, e := range m.HotRoutes {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSetHotRoutesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetDeveloperAccount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.DeveloperAccount)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgSetDeveloperAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetInfoByPoolType) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = m.InfoByPoolType.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgSetInfoByPoolTypeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetMaxPoolPointsPerTx) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MaxPoolPointsPerTx != 0 {
		n += 1 + sovTx(uint64(m.MaxPoolPointsPerTx))
	}
	return n
}

func (m *MsgSetMaxPoolPointsPerTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetMaxPoolPointsPerBlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.MaxPoolPointsPerBlock != 0 {
		n += 1 + sovTx(uint64(m.MaxPoolPointsPerBlock))
	}
	return n
}

func (m *MsgSetMaxPoolPointsPerBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgSetBaseDenoms) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Admin)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.BaseDenoms) > 0 {
		for _, e := range m.BaseDenoms {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	return n
}

func (m *MsgSetBaseDenomsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgSetHotRoutes) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetHotRoutes: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetHotRoutes: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HotRoutes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HotRoutes = append(m.HotRoutes, TokenPairArbRoutes{})
			if err := m.HotRoutes[len(m.HotRoutes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetHotRoutesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetHotRoutesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetHotRoutesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetDeveloperAccount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetDeveloperAccount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetDeveloperAccount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeveloperAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeveloperAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetDeveloperAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetDeveloperAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetDeveloperAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetInfoByPoolType) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetInfoByPoolType: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetInfoByPoolType: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfoByPoolType", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.InfoByPoolType.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetInfoByPoolTypeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetInfoByPoolTypeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetInfoByPoolTypeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetMaxPoolPointsPerTx) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetMaxPoolPointsPerTx: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetMaxPoolPointsPerTx: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPoolPointsPerTx", wireType)
			}
			m.MaxPoolPointsPerTx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPoolPointsPerTx |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetMaxPoolPointsPerTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetMaxPoolPointsPerTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetMaxPoolPointsPerTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetMaxPoolPointsPerBlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetMaxPoolPointsPerBlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetMaxPoolPointsPerBlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPoolPointsPerBlock", wireType)
			}
			m.MaxPoolPointsPerBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPoolPointsPerBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetMaxPoolPointsPerBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetMaxPoolPointsPerBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetMaxPoolPointsPerBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetBaseDenoms) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetBaseDenoms: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetBaseDenoms: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Admin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenoms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenoms = append(m.BaseDenoms, BaseDenom{})
			if err := m.BaseDenoms[len(m.BaseDenoms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgSetBaseDenomsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgSetBaseDenomsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgSetBaseDenomsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
