// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/protorev/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryGetProtoRevNumberOfTradesRequest is request type for the
// Query/GetProtoRevNumberOfTrades RPC method.
type QueryGetProtoRevNumberOfTradesRequest struct {
}

func (m *QueryGetProtoRevNumberOfTradesRequest) Reset()         { *m = QueryGetProtoRevNumberOfTradesRequest{} }
func (m *QueryGetProtoRevNumberOfTradesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProtoRevNumberOfTradesRequest) ProtoMessage()    {}
func (*QueryGetProtoRevNumberOfTradesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{2}
}
func (m *QueryGetProtoRevNumberOfTradesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevNumberOfTradesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevNumberOfTradesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevNumberOfTradesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevNumberOfTradesRequest.Merge(m, src)
}
func (m *QueryGetProtoRevNumberOfTradesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevNumberOfTradesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevNumberOfTradesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevNumberOfTradesRequest proto.InternalMessageInfo

// QueryGetProtoRevNumberOfTradesResponse is response type for the
// Query/GetProtoRevNumberOfTrades RPC method.
type QueryGetProtoRevNumberOfTradesResponse struct {
	// number_of_trades is the number of trades the module has executed
	NumberOfTrades github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=number_of_trades,json=numberOfTrades,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"number_of_trades"`
}

func (m *QueryGetProtoRevNumberOfTradesResponse) Reset() {
	*m = QueryGetProtoRevNumberOfTradesResponse{}
}
func (m *QueryGetProtoRevNumberOfTradesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProtoRevNumberOfTradesResponse) ProtoMessage()    {}
func (*QueryGetProtoRevNumberOfTradesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{3}
}
func (m *QueryGetProtoRevNumberOfTradesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevNumberOfTradesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevNumberOfTradesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevNumberOfTradesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevNumberOfTradesResponse.Merge(m, src)
}
func (m *QueryGetProtoRevNumberOfTradesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevNumberOfTradesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevNumberOfTradesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevNumberOfTradesResponse proto.InternalMessageInfo

// QueryGetProtoRevProfitsByDenomRequest is request type for the
// Query/GetProtoRevProfitsByDenom RPC method.
type QueryGetProtoRevProfitsByDenomRequest struct {
	// denom is the denom to query profits by
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty"`
}

func (m *QueryGetProtoRevProfitsByDenomRequest) Reset()         { *m = QueryGetProtoRevProfitsByDenomRequest{} }
func (m *QueryGetProtoRevProfitsByDenomRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProtoRevProfitsByDenomRequest) ProtoMessage()    {}
func (*QueryGetProtoRevProfitsByDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{4}
}
func (m *QueryGetProtoRevProfitsByDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevProfitsByDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevProfitsByDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevProfitsByDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevProfitsByDenomRequest.Merge(m, src)
}
func (m *QueryGetProtoRevProfitsByDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevProfitsByDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevProfitsByDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevProfitsByDenomRequest proto.InternalMessageInfo

func (m *QueryGetProtoRevProfitsByDenomRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// QueryGetProtoRevProfitsByDenomResponse is response type for the
// Query/GetProtoRevProfitsByDenom RPC method.
type QueryGetProtoRevProfitsByDenomResponse struct {
	// profit is the profits of the module by the selected denom
	Profit *types.Coin `protobuf:"bytes,1,opt,name=profit,proto3" json:"profit,omitempty"`
}

func (m *QueryGetProtoRevProfitsByDenomResponse) Reset() {
	*m = QueryGetProtoRevProfitsByDenomResponse{}
}
func (m *QueryGetProtoRevProfitsByDenomResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProtoRevProfitsByDenomResponse) ProtoMessage()    {}
func (*QueryGetProtoRevProfitsByDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{5}
}
func (m *QueryGetProtoRevProfitsByDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevProfitsByDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevProfitsByDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevProfitsByDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevProfitsByDenomResponse.Merge(m, src)
}
func (m *QueryGetProtoRevProfitsByDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevProfitsByDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevProfitsByDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevProfitsByDenomResponse proto.InternalMessageInfo

func (m *QueryGetProtoRevProfitsByDenomResponse) GetProfit() *types.Coin {
	if m != nil {
		return m.Profit
	}
	return nil
}

// QueryGetProtoRevAllProfitsRequest is request type for the
// Query/GetProtoRevAllProfits RPC method.
type QueryGetProtoRevAllProfitsRequest struct {
}

func (m *QueryGetProtoRevAllProfitsRequest) Reset()         { *m = QueryGetProtoRevAllProfitsRequest{} }
func (m *QueryGetProtoRevAllProfitsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProtoRevAllProfitsRequest) ProtoMessage()    {}
func (*QueryGetProtoRevAllProfitsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{6}
}
func (m *QueryGetProtoRevAllProfitsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevAllProfitsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevAllProfitsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevAllProfitsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevAllProfitsRequest.Merge(m, src)
}
func (m *QueryGetProtoRevAllProfitsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevAllProfitsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevAllProfitsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevAllProfitsRequest proto.InternalMessageInfo

// QueryGetProtoRevAllProfitsResponse is response type for the
// Query/GetProtoRevAllProfits RPC method.
type QueryGetProtoRevAllProfitsResponse struct {
	// profits is a list of all of the profits from the module
	Profits []*types.Coin `protobuf:"bytes,1,rep,name=profits,proto3" json:"profits,omitempty"`
}

func (m *QueryGetProtoRevAllProfitsResponse) Reset()         { *m = QueryGetProtoRevAllProfitsResponse{} }
func (m *QueryGetProtoRevAllProfitsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProtoRevAllProfitsResponse) ProtoMessage()    {}
func (*QueryGetProtoRevAllProfitsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{7}
}
func (m *QueryGetProtoRevAllProfitsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevAllProfitsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevAllProfitsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevAllProfitsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevAllProfitsResponse.Merge(m, src)
}
func (m *QueryGetProtoRevAllProfitsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevAllProfitsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevAllProfitsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevAllProfitsResponse proto.InternalMessageInfo

func (m *QueryGetProtoRevAllProfitsResponse) GetProfits() []*types.Coin {
	if m != nil {
		return m.Profits
	}
	return nil
}

// QueryGetProtoRevStatisticsByPoolRequest is request type for the
// Query/GetProtoRevStatisticsByPool RPC method.
type QueryGetProtoRevStatisticsByPoolRequest struct {
	// pool_id is the pool id to query statistics by
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
}

func (m *QueryGetProtoRevStatisticsByPoolRequest) Reset() {
	*m = QueryGetProtoRevStatisticsByPoolRequest{}
}
func (m *QueryGetProtoRevStatisticsByPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProtoRevStatisticsByPoolRequest) ProtoMessage()    {}
func (*QueryGetProtoRevStatisticsByPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{8}
}
func (m *QueryGetProtoRevStatisticsByPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevStatisticsByPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevStatisticsByPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevStatisticsByPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevStatisticsByPoolRequest.Merge(m, src)
}
func (m *QueryGetProtoRevStatisticsByPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevStatisticsByPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevStatisticsByPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevStatisticsByPoolRequest proto.InternalMessageInfo

func (m *QueryGetProtoRevStatisticsByPoolRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

// QueryGetProtoRevStatisticsByPoolResponse is response type for the
// Query/GetProtoRevStatisticsByPool RPC method.
type QueryGetProtoRevStatisticsByPoolResponse struct {
	// statistics contains the number of trades the module has executed after a
	// swap on a given pool and the profits from the trades
	Statistics *PoolStatistics `protobuf:"bytes,1,opt,name=statistics,proto3" json:"statistics,omitempty"`
}

func (m *QueryGetProtoRevStatisticsByPoolResponse) Reset() {
	*m = QueryGetProtoRevStatisticsByPoolResponse{}
}
func (m *QueryGetProtoRevStatisticsByPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProtoRevStatisticsByPoolResponse) ProtoMessage()    {}
func (*QueryGetProtoRevStatisticsByPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{9}
}
func (m *QueryGetProtoRevStatisticsByPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevStatisticsByPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevStatisticsByPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevStatisticsByPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevStatisticsByPoolResponse.Merge(m, src)
}
func (m *QueryGetProtoRevStatisticsByPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevStatisticsByPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevStatisticsByPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevStatisticsByPoolResponse proto.InternalMessageInfo

func (m *QueryGetProtoRevStatisticsByPoolResponse) GetStatistics() *PoolStatistics {
	if m != nil {
		return m.Statistics
	}
	return nil
}

// QueryGetProtoRevAllStatisticsRequest is request type for the
// Query/GetProtoRevAllStatistics RPC method.
type QueryGetProtoRevAllStatisticsRequest struct {
}

func (m *QueryGetProtoRevAllStatisticsRequest) Reset()         { *m = QueryGetProtoRevAllStatisticsRequest{} }
func (m *QueryGetProtoRevAllStatisticsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProtoRevAllStatisticsRequest) ProtoMessage()    {}
func (*QueryGetProtoRevAllStatisticsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{10}
}
func (m *QueryGetProtoRevAllStatisticsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevAllStatisticsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevAllStatisticsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevAllStatisticsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevAllStatisticsRequest.Merge(m, src)
}
func (m *QueryGetProtoRevAllStatisticsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevAllStatisticsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevAllStatisticsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevAllStatisticsRequest proto.InternalMessageInfo

// QueryGetProtoRevAllStatisticsResponse is response type for the
// Query/GetProtoRevAllStatistics RPC method.
type QueryGetProtoRevAllStatisticsResponse struct {
	// statistics contains the number of trades the module has executed after a
	// swap on a given pool and the profits from the trades for all pools
	Statistics []PoolStatistics `protobuf:"bytes,1,rep,name=statistics,proto3" json:"statistics"`
}

func (m *QueryGetProtoRevAllStatisticsResponse) Reset()         { *m = QueryGetProtoRevAllStatisticsResponse{} }
func (m *QueryGetProtoRevAllStatisticsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProtoRevAllStatisticsResponse) ProtoMessage()    {}
func (*QueryGetProtoRevAllStatisticsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{11}
}
func (m *QueryGetProtoRevAllStatisticsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevAllStatisticsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevAllStatisticsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevAllStatisticsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevAllStatisticsResponse.Merge(m, src)
}
func (m *QueryGetProtoRevAllStatisticsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevAllStatisticsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevAllStatisticsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevAllStatisticsResponse proto.InternalMessageInfo

func (m *QueryGetProtoRevAllStatisticsResponse) GetStatistics() []PoolStatistics {
	if m != nil {
		return m.Statistics
	}
	return nil
}

// QueryGetProtoRevTokenPairArbRoutesRequest is request type for the
// Query/GetProtoRevTokenPairArbRoutes RPC method.
type QueryGetProtoRevTokenPairArbRoutesRequest struct {
}

func (m *QueryGetProtoRevTokenPairArbRoutesRequest) Reset() {
	*m = QueryGetProtoRevTokenPairArbRoutesRequest{}
}
func (m *QueryGetProtoRevTokenPairArbRoutesRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetProtoRevTokenPairArbRoutesRequest) ProtoMessage() {}
func (*QueryGetProtoRevTokenPairArbRoutesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{12}
}
func (m *QueryGetProtoRevTokenPairArbRoutesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevTokenPairArbRoutesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevTokenPairArbRoutesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevTokenPairArbRoutesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevTokenPairArbRoutesRequest.Merge(m, src)
}
func (m *QueryGetProtoRevTokenPairArbRoutesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevTokenPairArbRoutesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevTokenPairArbRoutesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevTokenPairArbRoutesRequest proto.InternalMessageInfo

// QueryGetProtoRevTokenPairArbRoutesResponse is response type for the
// Query/GetProtoRevTokenPairArbRoutes RPC method.
type QueryGetProtoRevTokenPairArbRoutesResponse struct {
	// routes is a list of all of the hot routes that the module is currently
	// arbitraging
	Routes []*TokenPairArbRoutes `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes,omitempty"`
}

func (m *QueryGetProtoRevTokenPairArbRoutesResponse) Reset() {
	*m = QueryGetProtoRevTokenPairArbRoutesResponse{}
}
func (m *QueryGetProtoRevTokenPairArbRoutesResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetProtoRevTokenPairArbRoutesResponse) ProtoMessage() {}
func (*QueryGetProtoRevTokenPairArbRoutesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{13}
}
func (m *QueryGetProtoRevTokenPairArbRoutesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevTokenPairArbRoutesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevTokenPairArbRoutesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevTokenPairArbRoutesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevTokenPairArbRoutesResponse.Merge(m, src)
}
func (m *QueryGetProtoRevTokenPairArbRoutesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevTokenPairArbRoutesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevTokenPairArbRoutesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevTokenPairArbRoutesResponse proto.InternalMessageInfo

func (m *QueryGetProtoRevTokenPairArbRoutesResponse) GetRoutes() []*TokenPairArbRoutes {
	if m != nil {
		return m.Routes
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "osmosis.protorev.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "osmosis.protorev.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryGetProtoRevNumberOfTradesRequest)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevNumberOfTradesRequest")
	proto.RegisterType((*QueryGetProtoRevNumberOfTradesResponse)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevNumberOfTradesResponse")
	proto.RegisterType((*QueryGetProtoRevProfitsByDenomRequest)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevProfitsByDenomRequest")
	proto.RegisterType((*QueryGetProtoRevProfitsByDenomResponse)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevProfitsByDenomResponse")
	proto.RegisterType((*QueryGetProtoRevAllProfitsRequest)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevAllProfitsRequest")
	proto.RegisterType((*QueryGetProtoRevAllProfitsResponse)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevAllProfitsResponse")
	proto.RegisterType((*QueryGetProtoRevStatisticsByPoolRequest)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevStatisticsByPoolRequest")
	proto.RegisterType((*QueryGetProtoRevStatisticsByPoolResponse)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevStatisticsByPoolResponse")
	proto.RegisterType((*QueryGetProtoRevAllStatisticsRequest)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevAllStatisticsRequest")
	proto.RegisterType((*QueryGetProtoRevAllStatisticsResponse)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevAllStatisticsResponse")
	proto.RegisterType((*QueryGetProtoRevTokenPairArbRoutesRequest)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevTokenPairArbRoutesRequest")
	proto.RegisterType((*QueryGetProtoRevTokenPairArbRoutesResponse)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevTokenPairArbRoutesResponse")
}

func init() {
	proto.RegisterFile("osmosis/protorev/v1beta1/query.proto", fileDescriptor_f5e7ac9973cce389)
}

var fileDescriptor_f5e7ac9973cce389 = []byte{
	// 829 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x5d, 0x4f, 0xd3, 0x50,
	0x18, 0x5e, 0x05, 0x46, 0x3c, 0x26, 0xc6, 0x1c, 0x31, 0x42, 0xc5, 0x02, 0x65, 0x8c, 0xf1, 0xb1,
	0xd6, 0x31, 0xef, 0x54, 0x90, 0x41, 0xa2, 0xdc, 0xe0, 0xac, 0x98, 0xf8, 0x71, 0xd1, 0xb4, 0x5b,
	0x99, 0x0d, 0x5d, 0x4f, 0x69, 0xbb, 0xe9, 0x6e, 0xb9, 0xf5, 0xc6, 0xc4, 0xdf, 0xe3, 0x3d, 0xde,
	0x18, 0x12, 0x13, 0x63, 0xbc, 0x40, 0x03, 0xfe, 0x0e, 0x63, 0x7a, 0xfa, 0x76, 0x1f, 0x5d, 0xbb,
	0x0f, 0xb8, 0xda, 0xce, 0x39, 0xcf, 0xfb, 0xbc, 0xcf, 0xf3, 0x9e, 0xf6, 0x49, 0x51, 0x8a, 0x38,
	0x55, 0xe2, 0xe8, 0x8e, 0x68, 0xd9, 0xc4, 0x25, 0xb6, 0x56, 0x17, 0xeb, 0x39, 0x55, 0x73, 0x95,
	0x9c, 0x78, 0x58, 0xd3, 0xec, 0x86, 0x40, 0xb7, 0xf1, 0x24, 0xa0, 0x84, 0x00, 0x25, 0x00, 0x8a,
	0x9d, 0xa8, 0x90, 0x0a, 0xa1, 0xbb, 0xa2, 0xf7, 0xcf, 0x07, 0xb0, 0xd3, 0x15, 0x42, 0x2a, 0x86,
	0x26, 0x2a, 0x96, 0x2e, 0x2a, 0xa6, 0x49, 0x5c, 0xc5, 0xd5, 0x89, 0x09, 0xe5, 0xec, 0x72, 0x89,
	0xd2, 0x89, 0xaa, 0xe2, 0x68, 0x7e, 0x9b, 0x66, 0x53, 0x4b, 0xa9, 0xe8, 0x26, 0x05, 0x03, 0x76,
	0x21, 0x56, 0x9f, 0xa5, 0xd8, 0x4a, 0x35, 0xa0, 0x5c, 0x8c, 0x87, 0x05, 0x8a, 0x7d, 0x20, 0xd7,
	0xde, 0x3b, 0xc0, 0x94, 0x88, 0x0e, 0xfd, 0xf8, 0x09, 0x84, 0x9f, 0x7b, 0x8a, 0x8a, 0x94, 0x5d,
	0xd2, 0x0e, 0x6b, 0x9a, 0xe3, 0xf2, 0x2f, 0xd1, 0xcd, 0x8e, 0x5d, 0xc7, 0x22, 0xa6, 0xa3, 0xe1,
	0x75, 0x94, 0xf4, 0x55, 0x4c, 0x32, 0xb3, 0x4c, 0xe6, 0xda, 0xda, 0xac, 0x10, 0x37, 0x27, 0xc1,
	0xaf, 0x2c, 0x8c, 0x1e, 0x9f, 0xce, 0x24, 0x24, 0xa8, 0xe2, 0x17, 0xd1, 0x02, 0xa5, 0x7d, 0xa2,
	0xb9, 0x45, 0xaf, 0x40, 0xd2, 0xea, 0xbb, 0xb5, 0xaa, 0xaa, 0xd9, 0xcf, 0xf6, 0xf7, 0x6c, 0xa5,
	0xac, 0x35, 0xfb, 0x1f, 0x31, 0x28, 0xdd, 0x0f, 0x09, 0x9a, 0x5e, 0xa1, 0x1b, 0x26, 0x3d, 0x91,
	0xc9, 0xbe, 0xec, 0xd2, 0x33, 0xaa, 0xee, 0x6a, 0x41, 0xf0, 0x7a, 0xff, 0x3a, 0x9d, 0x49, 0x57,
	0x74, 0xf7, 0x5d, 0x4d, 0x15, 0x4a, 0xa4, 0x2a, 0xc2, 0x34, 0xfc, 0x9f, 0xac, 0x53, 0x3e, 0x10,
	0xdd, 0x86, 0xa5, 0x39, 0xc2, 0x8e, 0xe9, 0x4a, 0xd7, 0xcd, 0x8e, 0x0e, 0xfc, 0xa3, 0x6e, 0xb5,
	0x45, 0x9b, 0xec, 0xeb, 0xae, 0x53, 0x68, 0x6c, 0x6b, 0x26, 0xa9, 0x82, 0x5a, 0x3c, 0x81, 0xc6,
	0xca, 0xde, 0xda, 0xef, 0x2b, 0xf9, 0x0b, 0xfe, 0x6d, 0xb7, 0x85, 0x70, 0x39, 0x58, 0xc8, 0xa1,
	0xa4, 0x45, 0x4f, 0x60, 0xac, 0x53, 0x82, 0xaf, 0x4f, 0xf0, 0x2e, 0xad, 0x39, 0xd1, 0x2d, 0xa2,
	0x9b, 0x12, 0x00, 0xf9, 0x79, 0x34, 0x17, 0x26, 0xdf, 0x34, 0x0c, 0xe0, 0x0f, 0xa6, 0xf8, 0x1a,
	0xf1, 0xbd, 0x40, 0xd0, 0x3d, 0x8f, 0xc6, 0x7d, 0x52, 0x6f, 0x6e, 0x23, 0xbd, 0xdb, 0x07, 0x48,
	0xbe, 0x80, 0x16, 0xc3, 0xd4, 0x2f, 0xbc, 0x87, 0xde, 0x71, 0xf5, 0x92, 0x53, 0x68, 0x14, 0x09,
	0x31, 0x82, 0xe9, 0xdc, 0x46, 0xe3, 0x16, 0x21, 0x86, 0xac, 0x97, 0xa9, 0xbd, 0x51, 0x29, 0xe9,
	0x2d, 0x77, 0xca, 0xbc, 0x8b, 0x32, 0xfd, 0x39, 0x40, 0xe4, 0x53, 0x84, 0x9c, 0xe6, 0x19, 0x8c,
	0x29, 0xd3, 0xe3, 0xe9, 0x23, 0xc4, 0x68, 0x71, 0x49, 0x6d, 0xb5, 0x7c, 0x1a, 0xa5, 0x22, 0x86,
	0xd2, 0x06, 0x86, 0xe1, 0xbd, 0xef, 0xbe, 0xfd, 0x10, 0x0e, 0xa4, 0xed, 0x86, 0xa4, 0x8d, 0x0c,
	0x23, 0x0d, 0x5e, 0x90, 0x76, 0x81, 0x2b, 0x68, 0x29, 0xdc, 0x78, 0x8f, 0x1c, 0x68, 0x66, 0x51,
	0xd1, 0xed, 0x4d, 0x5b, 0x95, 0x48, 0xcd, 0x6d, 0xbd, 0x28, 0x36, 0x5a, 0x1e, 0x04, 0x0c, 0x52,
	0xb7, 0x51, 0xd2, 0xa6, 0x3b, 0x20, 0x73, 0x35, 0x5e, 0x66, 0x04, 0x0b, 0xd4, 0xae, 0xfd, 0x43,
	0x68, 0x8c, 0x36, 0xc5, 0x1f, 0x19, 0x94, 0xf4, 0x5f, 0x74, 0xdc, 0x83, 0xaa, 0x3b, 0x5f, 0xd8,
	0xec, 0x80, 0x68, 0x5f, 0x37, 0x9f, 0x3a, 0xfa, 0xfe, 0xf7, 0xf3, 0x15, 0x0e, 0x4f, 0x8b, 0x41,
	0xec, 0xd5, 0x73, 0xf9, 0x56, 0xf4, 0xf9, 0xe9, 0x82, 0xbf, 0x31, 0x68, 0x2a, 0x36, 0x2f, 0xf0,
	0x46, 0x9f, 0x96, 0xfd, 0x32, 0x89, 0x7d, 0x7c, 0x71, 0x02, 0xb0, 0x21, 0x50, 0x1b, 0x19, 0x9c,
	0x8e, 0xb6, 0x11, 0x8e, 0xb1, 0xb0, 0xa1, 0xce, 0xf4, 0x18, 0xc6, 0x50, 0x64, 0x6c, 0x0d, 0x63,
	0x28, 0x3a, 0xb8, 0xfa, 0x19, 0x82, 0xb0, 0x90, 0xd5, 0x86, 0x4c, 0x23, 0x11, 0x7f, 0x61, 0xd0,
	0xad, 0xc8, 0x30, 0xc2, 0x0f, 0x06, 0xd7, 0xd2, 0x95, 0x73, 0xec, 0xc3, 0x8b, 0x15, 0x83, 0x89,
	0x25, 0x6a, 0x62, 0x1e, 0xcf, 0x45, 0x9b, 0x50, 0x0c, 0x43, 0x06, 0x23, 0xf8, 0x07, 0x83, 0xee,
	0xf4, 0x48, 0x2b, 0xbc, 0x39, 0xb8, 0x90, 0x98, 0xb4, 0x64, 0x0b, 0x97, 0xa1, 0x00, 0x47, 0xf7,
	0xa8, 0xa3, 0x65, 0x9c, 0x89, 0x76, 0xd4, 0xca, 0x1a, 0xef, 0x66, 0xbc, 0x30, 0xc6, 0x5f, 0x19,
	0x34, 0x19, 0x17, 0x74, 0x78, 0x7d, 0xa8, 0xf1, 0x76, 0x25, 0x29, 0xbb, 0x71, 0xe1, 0x7a, 0xf0,
	0xb3, 0x4a, 0xfd, 0xa4, 0x71, 0x2a, 0xfe, 0x86, 0x5a, 0x9e, 0xf0, 0x6f, 0x06, 0xdd, 0xed, 0x19,
	0x87, 0x78, 0x6b, 0x70, 0x41, 0xb1, 0xc9, 0xcb, 0x6e, 0x5f, 0x8e, 0x04, 0xac, 0xe5, 0xa9, 0xb5,
	0x2c, 0x5e, 0x89, 0xb6, 0xe6, 0x7a, 0x95, 0xb2, 0xa5, 0xe8, 0xb6, 0xac, 0xd8, 0xaa, 0xec, 0x07,
	0x70, 0x61, 0xf7, 0xf8, 0x8c, 0x63, 0x4e, 0xce, 0x38, 0xe6, 0xcf, 0x19, 0xc7, 0x7c, 0x3a, 0xe7,
	0x12, 0x27, 0xe7, 0x5c, 0xe2, 0xe7, 0x39, 0x97, 0x78, 0x73, 0xbf, 0xed, 0x53, 0x07, 0x08, 0xb3,
	0x86, 0xa2, 0x3a, 0x1d, 0xec, 0x1f, 0xda, 0xf8, 0xbd, 0x8f, 0x1f, 0x35, 0x49, 0xd7, 0xf9, 0xff,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xd9, 0xe8, 0xcf, 0xe3, 0x1c, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// GetProtoRevNumberOfTrades queries the number of arbitrage trades the module
	// has executed
	GetProtoRevNumberOfTrades(ctx context.Context, in *QueryGetProtoRevNumberOfTradesRequest, opts ...grpc.CallOption) (*QueryGetProtoRevNumberOfTradesResponse, error)
	// GetProtoRevProfitsByDenom queries the profits of the module by denom
	GetProtoRevProfitsByDenom(ctx context.Context, in *QueryGetProtoRevProfitsByDenomRequest, opts ...grpc.CallOption) (*QueryGetProtoRevProfitsByDenomResponse, error)
	// GetProtoRevAllProfits queries all of the profits from the module
	GetProtoRevAllProfits(ctx context.Context, in *QueryGetProtoRevAllProfitsRequest, opts ...grpc.CallOption) (*QueryGetProtoRevAllProfitsResponse, error)
	// GetProtoRevStatisticsByPool queries the number of arbitrages and profits
	// that have been executed for a given pool
	GetProtoRevStatisticsByPool(ctx context.Context, in *QueryGetProtoRevStatisticsByPoolRequest, opts ...grpc.CallOption) (*QueryGetProtoRevStatisticsByPoolResponse, error)
	// GetProtoRevAllStatistics queries all of pools that the module has arbitrage
	// against and the number of trades and profits that have been executed for
	// each pool
	GetProtoRevAllStatistics(ctx context.Context, in *QueryGetProtoRevAllStatisticsRequest, opts ...grpc.CallOption) (*QueryGetProtoRevAllStatisticsResponse, error)
	// GetProtoRevTokenPairArbRoutes queries all of the hot routes that the module
	// is currently arbitraging
	GetProtoRevTokenPairArbRoutes(ctx context.Context, in *QueryGetProtoRevTokenPairArbRoutesRequest, opts ...grpc.CallOption) (*QueryGetProtoRevTokenPairArbRoutesResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/osmosis.protorev.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetProtoRevNumberOfTrades(ctx context.Context, in *QueryGetProtoRevNumberOfTradesRequest, opts ...grpc.CallOption) (*QueryGetProtoRevNumberOfTradesResponse, error) {
	out := new(QueryGetProtoRevNumberOfTradesResponse)
	err := c.cc.Invoke(ctx, "/osmosis.protorev.v1beta1.Query/GetProtoRevNumberOfTrades", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetProtoRevProfitsByDenom(ctx context.Context, in *QueryGetProtoRevProfitsByDenomRequest, opts ...grpc.CallOption) (*QueryGetProtoRevProfitsByDenomResponse, error) {
	out := new(QueryGetProtoRevProfitsByDenomResponse)
	err := c.cc.Invoke(ctx, "/osmosis.protorev.v1beta1.Query/GetProtoRevProfitsByDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetProtoRevAllProfits(ctx context.Context, in *QueryGetProtoRevAllProfitsRequest, opts ...grpc.CallOption) (*QueryGetProtoRevAllProfitsResponse, error) {
	out := new(QueryGetProtoRevAllProfitsResponse)
	err := c.cc.Invoke(ctx, "/osmosis.protorev.v1beta1.Query/GetProtoRevAllProfits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetProtoRevStatisticsByPool(ctx context.Context, in *QueryGetProtoRevStatisticsByPoolRequest, opts ...grpc.CallOption) (*QueryGetProtoRevStatisticsByPoolResponse, error) {
	out := new(QueryGetProtoRevStatisticsByPoolResponse)
	err := c.cc.Invoke(ctx, "/osmosis.protorev.v1beta1.Query/GetProtoRevStatisticsByPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetProtoRevAllStatistics(ctx context.Context, in *QueryGetProtoRevAllStatisticsRequest, opts ...grpc.CallOption) (*QueryGetProtoRevAllStatisticsResponse, error) {
	out := new(QueryGetProtoRevAllStatisticsResponse)
	err := c.cc.Invoke(ctx, "/osmosis.protorev.v1beta1.Query/GetProtoRevAllStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetProtoRevTokenPairArbRoutes(ctx context.Context, in *QueryGetProtoRevTokenPairArbRoutesRequest, opts ...grpc.CallOption) (*QueryGetProtoRevTokenPairArbRoutesResponse, error) {
	out := new(QueryGetProtoRevTokenPairArbRoutesResponse)
	err := c.cc.Invoke(ctx, "/osmosis.protorev.v1beta1.Query/GetProtoRevTokenPairArbRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// GetProtoRevNumberOfTrades queries the number of arbitrage trades the module
	// has executed
	GetProtoRevNumberOfTrades(context.Context, *QueryGetProtoRevNumberOfTradesRequest) (*QueryGetProtoRevNumberOfTradesResponse, error)
	// GetProtoRevProfitsByDenom queries the profits of the module by denom
	GetProtoRevProfitsByDenom(context.Context, *QueryGetProtoRevProfitsByDenomRequest) (*QueryGetProtoRevProfitsByDenomResponse, error)
	// GetProtoRevAllProfits queries all of the profits from the module
	GetProtoRevAllProfits(context.Context, *QueryGetProtoRevAllProfitsRequest) (*QueryGetProtoRevAllProfitsResponse, error)
	// GetProtoRevStatisticsByPool queries the number of arbitrages and profits
	// that have been executed for a given pool
	GetProtoRevStatisticsByPool(context.Context, *QueryGetProtoRevStatisticsByPoolRequest) (*QueryGetProtoRevStatisticsByPoolResponse, error)
	// GetProtoRevAllStatistics queries all of pools that the module has arbitrage
	// against and the number of trades and profits that have been executed for
	// each pool
	GetProtoRevAllStatistics(context.Context, *QueryGetProtoRevAllStatisticsRequest) (*QueryGetProtoRevAllStatisticsResponse, error)
	// GetProtoRevTokenPairArbRoutes queries all of the hot routes that the module
	// is currently arbitraging
	GetProtoRevTokenPairArbRoutes(context.Context, *QueryGetProtoRevTokenPairArbRoutesRequest) (*QueryGetProtoRevTokenPairArbRoutesResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) GetProtoRevNumberOfTrades(ctx context.Context, req *QueryGetProtoRevNumberOfTradesRequest) (*QueryGetProtoRevNumberOfTradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProtoRevNumberOfTrades not implemented")
}
func (*UnimplementedQueryServer) GetProtoRevProfitsByDenom(ctx context.Context, req *QueryGetProtoRevProfitsByDenomRequest) (*QueryGetProtoRevProfitsByDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProtoRevProfitsByDenom not implemented")
}
func (*UnimplementedQueryServer) GetProtoRevAllProfits(ctx context.Context, req *QueryGetProtoRevAllProfitsRequest) (*QueryGetProtoRevAllProfitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProtoRevAllProfits not implemented")
}
func (*UnimplementedQueryServer) GetProtoRevStatisticsByPool(ctx context.Context, req *QueryGetProtoRevStatisticsByPoolRequest) (*QueryGetProtoRevStatisticsByPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProtoRevStatisticsByPool not implemented")
}
func (*UnimplementedQueryServer) GetProtoRevAllStatistics(ctx context.Context, req *QueryGetProtoRevAllStatisticsRequest) (*QueryGetProtoRevAllStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProtoRevAllStatistics not implemented")
}
func (*UnimplementedQueryServer) GetProtoRevTokenPairArbRoutes(ctx context.Context, req *QueryGetProtoRevTokenPairArbRoutesRequest) (*QueryGetProtoRevTokenPairArbRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProtoRevTokenPairArbRoutes not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.protorev.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetProtoRevNumberOfTrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProtoRevNumberOfTradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetProtoRevNumberOfTrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.protorev.v1beta1.Query/GetProtoRevNumberOfTrades",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetProtoRevNumberOfTrades(ctx, req.(*QueryGetProtoRevNumberOfTradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetProtoRevProfitsByDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProtoRevProfitsByDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetProtoRevProfitsByDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.protorev.v1beta1.Query/GetProtoRevProfitsByDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetProtoRevProfitsByDenom(ctx, req.(*QueryGetProtoRevProfitsByDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetProtoRevAllProfits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProtoRevAllProfitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetProtoRevAllProfits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.protorev.v1beta1.Query/GetProtoRevAllProfits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetProtoRevAllProfits(ctx, req.(*QueryGetProtoRevAllProfitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetProtoRevStatisticsByPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProtoRevStatisticsByPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetProtoRevStatisticsByPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.protorev.v1beta1.Query/GetProtoRevStatisticsByPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetProtoRevStatisticsByPool(ctx, req.(*QueryGetProtoRevStatisticsByPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetProtoRevAllStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProtoRevAllStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetProtoRevAllStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.protorev.v1beta1.Query/GetProtoRevAllStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetProtoRevAllStatistics(ctx, req.(*QueryGetProtoRevAllStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetProtoRevTokenPairArbRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProtoRevTokenPairArbRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetProtoRevTokenPairArbRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.protorev.v1beta1.Query/GetProtoRevTokenPairArbRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetProtoRevTokenPairArbRoutes(ctx, req.(*QueryGetProtoRevTokenPairArbRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "osmosis.protorev.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetProtoRevNumberOfTrades",
			Handler:    _Query_GetProtoRevNumberOfTrades_Handler,
		},
		{
			MethodName: "GetProtoRevProfitsByDenom",
			Handler:    _Query_GetProtoRevProfitsByDenom_Handler,
		},
		{
			MethodName: "GetProtoRevAllProfits",
			Handler:    _Query_GetProtoRevAllProfits_Handler,
		},
		{
			MethodName: "GetProtoRevStatisticsByPool",
			Handler:    _Query_GetProtoRevStatisticsByPool_Handler,
		},
		{
			MethodName: "GetProtoRevAllStatistics",
			Handler:    _Query_GetProtoRevAllStatistics_Handler,
		},
		{
			MethodName: "GetProtoRevTokenPairArbRoutes",
			Handler:    _Query_GetProtoRevTokenPairArbRoutes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "osmosis/protorev/v1beta1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevNumberOfTradesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevNumberOfTradesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevNumberOfTradesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevNumberOfTradesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevNumberOfTradesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevNumberOfTradesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.NumberOfTrades.Size()
		i -= size
		if _, err := m.NumberOfTrades.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevProfitsByDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevProfitsByDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevProfitsByDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevProfitsByDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevProfitsByDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevProfitsByDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Profit != nil {
		{
			size, err := m.Profit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevAllProfitsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevAllProfitsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevAllProfitsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevAllProfitsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevAllProfitsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevAllProfitsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Profits) > 0 {
		for iNdEx := len(m.Profits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Profits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevStatisticsByPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevStatisticsByPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevStatisticsByPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevStatisticsByPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevStatisticsByPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevStatisticsByPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Statistics != nil {
		{
			size, err := m.Statistics.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevAllStatisticsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevAllStatisticsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevAllStatisticsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevAllStatisticsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevAllStatisticsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevAllStatisticsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Statistics) > 0 {
		for iNdEx := len(m.Statistics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Statistics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevTokenPairArbRoutesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevTokenPairArbRoutesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevTokenPairArbRoutesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevTokenPairArbRoutesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevTokenPairArbRoutesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevTokenPairArbRoutesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetProtoRevNumberOfTradesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetProtoRevNumberOfTradesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NumberOfTrades.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetProtoRevProfitsByDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProtoRevProfitsByDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Profit != nil {
		l = m.Profit.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProtoRevAllProfitsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetProtoRevAllProfitsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Profits) > 0 {
		for _, e := range m.Profits {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetProtoRevStatisticsByPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	return n
}

func (m *QueryGetProtoRevStatisticsByPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Statistics != nil {
		l = m.Statistics.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProtoRevAllStatisticsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetProtoRevAllStatisticsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Statistics) > 0 {
		for _, e := range m.Statistics {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetProtoRevTokenPairArbRoutesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetProtoRevTokenPairArbRoutesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevNumberOfTradesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevNumberOfTradesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevNumberOfTradesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevNumberOfTradesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevNumberOfTradesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevNumberOfTradesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfTrades", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NumberOfTrades.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevProfitsByDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevProfitsByDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevProfitsByDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevProfitsByDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevProfitsByDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevProfitsByDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Profit == nil {
				m.Profit = &types.Coin{}
			}
			if err := m.Profit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevAllProfitsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevAllProfitsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevAllProfitsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevAllProfitsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevAllProfitsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevAllProfitsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Profits = append(m.Profits, &types.Coin{})
			if err := m.Profits[len(m.Profits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevStatisticsByPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevStatisticsByPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevStatisticsByPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevStatisticsByPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevStatisticsByPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevStatisticsByPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statistics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Statistics == nil {
				m.Statistics = &PoolStatistics{}
			}
			if err := m.Statistics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevAllStatisticsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevAllStatisticsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevAllStatisticsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevAllStatisticsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevAllStatisticsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevAllStatisticsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statistics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statistics = append(m.Statistics, PoolStatistics{})
			if err := m.Statistics[len(m.Statistics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevTokenPairArbRoutesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevTokenPairArbRoutesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevTokenPairArbRoutesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevTokenPairArbRoutesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevTokenPairArbRoutesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevTokenPairArbRoutesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, &TokenPairArbRoutes{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
