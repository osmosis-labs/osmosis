// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/protorev/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params" yaml:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryGetProtoRevNumberOfTradesRequest is request type for the
// Query/GetProtoRevNumberOfTrades RPC method.
type QueryGetProtoRevNumberOfTradesRequest struct {
}

func (m *QueryGetProtoRevNumberOfTradesRequest) Reset()         { *m = QueryGetProtoRevNumberOfTradesRequest{} }
func (m *QueryGetProtoRevNumberOfTradesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProtoRevNumberOfTradesRequest) ProtoMessage()    {}
func (*QueryGetProtoRevNumberOfTradesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{2}
}
func (m *QueryGetProtoRevNumberOfTradesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevNumberOfTradesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevNumberOfTradesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevNumberOfTradesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevNumberOfTradesRequest.Merge(m, src)
}
func (m *QueryGetProtoRevNumberOfTradesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevNumberOfTradesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevNumberOfTradesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevNumberOfTradesRequest proto.InternalMessageInfo

// QueryGetProtoRevNumberOfTradesResponse is response type for the
// Query/GetProtoRevNumberOfTrades RPC method.
type QueryGetProtoRevNumberOfTradesResponse struct {
	// number_of_trades is the number of trades the module has executed
	NumberOfTrades github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,1,opt,name=number_of_trades,json=numberOfTrades,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"number_of_trades" yaml:"number_of_trades"`
}

func (m *QueryGetProtoRevNumberOfTradesResponse) Reset() {
	*m = QueryGetProtoRevNumberOfTradesResponse{}
}
func (m *QueryGetProtoRevNumberOfTradesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProtoRevNumberOfTradesResponse) ProtoMessage()    {}
func (*QueryGetProtoRevNumberOfTradesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{3}
}
func (m *QueryGetProtoRevNumberOfTradesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevNumberOfTradesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevNumberOfTradesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevNumberOfTradesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevNumberOfTradesResponse.Merge(m, src)
}
func (m *QueryGetProtoRevNumberOfTradesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevNumberOfTradesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevNumberOfTradesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevNumberOfTradesResponse proto.InternalMessageInfo

// QueryGetProtoRevProfitsByDenomRequest is request type for the
// Query/GetProtoRevProfitsByDenom RPC method.
type QueryGetProtoRevProfitsByDenomRequest struct {
	// denom is the denom to query profits by
	Denom string `protobuf:"bytes,1,opt,name=denom,proto3" json:"denom,omitempty" yaml:"denom"`
}

func (m *QueryGetProtoRevProfitsByDenomRequest) Reset()         { *m = QueryGetProtoRevProfitsByDenomRequest{} }
func (m *QueryGetProtoRevProfitsByDenomRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProtoRevProfitsByDenomRequest) ProtoMessage()    {}
func (*QueryGetProtoRevProfitsByDenomRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{4}
}
func (m *QueryGetProtoRevProfitsByDenomRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevProfitsByDenomRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevProfitsByDenomRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevProfitsByDenomRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevProfitsByDenomRequest.Merge(m, src)
}
func (m *QueryGetProtoRevProfitsByDenomRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevProfitsByDenomRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevProfitsByDenomRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevProfitsByDenomRequest proto.InternalMessageInfo

func (m *QueryGetProtoRevProfitsByDenomRequest) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

// QueryGetProtoRevProfitsByDenomResponse is response type for the
// Query/GetProtoRevProfitsByDenom RPC method.
type QueryGetProtoRevProfitsByDenomResponse struct {
	// profit is the profits of the module by the selected denom
	Profit *types.Coin `protobuf:"bytes,1,opt,name=profit,proto3" json:"profit,omitempty" yaml:"profit"`
}

func (m *QueryGetProtoRevProfitsByDenomResponse) Reset() {
	*m = QueryGetProtoRevProfitsByDenomResponse{}
}
func (m *QueryGetProtoRevProfitsByDenomResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProtoRevProfitsByDenomResponse) ProtoMessage()    {}
func (*QueryGetProtoRevProfitsByDenomResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{5}
}
func (m *QueryGetProtoRevProfitsByDenomResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevProfitsByDenomResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevProfitsByDenomResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevProfitsByDenomResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevProfitsByDenomResponse.Merge(m, src)
}
func (m *QueryGetProtoRevProfitsByDenomResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevProfitsByDenomResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevProfitsByDenomResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevProfitsByDenomResponse proto.InternalMessageInfo

func (m *QueryGetProtoRevProfitsByDenomResponse) GetProfit() *types.Coin {
	if m != nil {
		return m.Profit
	}
	return nil
}

// QueryGetProtoRevAllProfitsRequest is request type for the
// Query/GetProtoRevAllProfits RPC method.
type QueryGetProtoRevAllProfitsRequest struct {
}

func (m *QueryGetProtoRevAllProfitsRequest) Reset()         { *m = QueryGetProtoRevAllProfitsRequest{} }
func (m *QueryGetProtoRevAllProfitsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProtoRevAllProfitsRequest) ProtoMessage()    {}
func (*QueryGetProtoRevAllProfitsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{6}
}
func (m *QueryGetProtoRevAllProfitsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevAllProfitsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevAllProfitsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevAllProfitsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevAllProfitsRequest.Merge(m, src)
}
func (m *QueryGetProtoRevAllProfitsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevAllProfitsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevAllProfitsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevAllProfitsRequest proto.InternalMessageInfo

// QueryGetProtoRevAllProfitsResponse is response type for the
// Query/GetProtoRevAllProfits RPC method.
type QueryGetProtoRevAllProfitsResponse struct {
	// profits is a list of all of the profits from the module
	Profits []types.Coin `protobuf:"bytes,1,rep,name=profits,proto3" json:"profits" yaml:"profits"`
}

func (m *QueryGetProtoRevAllProfitsResponse) Reset()         { *m = QueryGetProtoRevAllProfitsResponse{} }
func (m *QueryGetProtoRevAllProfitsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProtoRevAllProfitsResponse) ProtoMessage()    {}
func (*QueryGetProtoRevAllProfitsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{7}
}
func (m *QueryGetProtoRevAllProfitsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevAllProfitsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevAllProfitsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevAllProfitsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevAllProfitsResponse.Merge(m, src)
}
func (m *QueryGetProtoRevAllProfitsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevAllProfitsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevAllProfitsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevAllProfitsResponse proto.InternalMessageInfo

func (m *QueryGetProtoRevAllProfitsResponse) GetProfits() []types.Coin {
	if m != nil {
		return m.Profits
	}
	return nil
}

// QueryGetProtoRevStatisticsByPoolRequest is request type for the
// Query/GetProtoRevStatisticsByRoute RPC method.
type QueryGetProtoRevStatisticsByRouteRequest struct {
	// route is the set of pool ids to query statistics by i.e. 1,2,3
	Route []uint64 `protobuf:"varint,1,rep,packed,name=route,proto3" json:"route,omitempty" yaml:"route"`
}

func (m *QueryGetProtoRevStatisticsByRouteRequest) Reset() {
	*m = QueryGetProtoRevStatisticsByRouteRequest{}
}
func (m *QueryGetProtoRevStatisticsByRouteRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProtoRevStatisticsByRouteRequest) ProtoMessage()    {}
func (*QueryGetProtoRevStatisticsByRouteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{8}
}
func (m *QueryGetProtoRevStatisticsByRouteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevStatisticsByRouteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevStatisticsByRouteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevStatisticsByRouteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevStatisticsByRouteRequest.Merge(m, src)
}
func (m *QueryGetProtoRevStatisticsByRouteRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevStatisticsByRouteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevStatisticsByRouteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevStatisticsByRouteRequest proto.InternalMessageInfo

func (m *QueryGetProtoRevStatisticsByRouteRequest) GetRoute() []uint64 {
	if m != nil {
		return m.Route
	}
	return nil
}

// QueryGetProtoRevStatisticsByRouteResponse is response type for the
// Query/GetProtoRevStatisticsByRoute RPC method.
type QueryGetProtoRevStatisticsByRouteResponse struct {
	// statistics contains the number of trades the module has executed after a
	// swap on a given pool and the profits from the trades
	Statistics RouteStatistics `protobuf:"bytes,1,opt,name=statistics,proto3" json:"statistics" yaml:"statistics"`
}

func (m *QueryGetProtoRevStatisticsByRouteResponse) Reset() {
	*m = QueryGetProtoRevStatisticsByRouteResponse{}
}
func (m *QueryGetProtoRevStatisticsByRouteResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetProtoRevStatisticsByRouteResponse) ProtoMessage() {}
func (*QueryGetProtoRevStatisticsByRouteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{9}
}
func (m *QueryGetProtoRevStatisticsByRouteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevStatisticsByRouteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevStatisticsByRouteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevStatisticsByRouteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevStatisticsByRouteResponse.Merge(m, src)
}
func (m *QueryGetProtoRevStatisticsByRouteResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevStatisticsByRouteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevStatisticsByRouteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevStatisticsByRouteResponse proto.InternalMessageInfo

func (m *QueryGetProtoRevStatisticsByRouteResponse) GetStatistics() RouteStatistics {
	if m != nil {
		return m.Statistics
	}
	return RouteStatistics{}
}

// QueryGetProtoRevAllRouteStatisticsRequest is request type for the
// Query/GetProtoRevAllRouteStatistics RPC method.
type QueryGetProtoRevAllRouteStatisticsRequest struct {
}

func (m *QueryGetProtoRevAllRouteStatisticsRequest) Reset() {
	*m = QueryGetProtoRevAllRouteStatisticsRequest{}
}
func (m *QueryGetProtoRevAllRouteStatisticsRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetProtoRevAllRouteStatisticsRequest) ProtoMessage() {}
func (*QueryGetProtoRevAllRouteStatisticsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{10}
}
func (m *QueryGetProtoRevAllRouteStatisticsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevAllRouteStatisticsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevAllRouteStatisticsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevAllRouteStatisticsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevAllRouteStatisticsRequest.Merge(m, src)
}
func (m *QueryGetProtoRevAllRouteStatisticsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevAllRouteStatisticsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevAllRouteStatisticsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevAllRouteStatisticsRequest proto.InternalMessageInfo

// QueryGetProtoRevAllRouteStatisticsResponse is response type for the
// Query/GetProtoRevAllRouteStatistics RPC method.
type QueryGetProtoRevAllRouteStatisticsResponse struct {
	// statistics contains the number of trades/profits the module has executed on
	// all routes it has successfully executed a trade on
	Statistics []RouteStatistics `protobuf:"bytes,1,rep,name=statistics,proto3" json:"statistics" yaml:"statistics"`
}

func (m *QueryGetProtoRevAllRouteStatisticsResponse) Reset() {
	*m = QueryGetProtoRevAllRouteStatisticsResponse{}
}
func (m *QueryGetProtoRevAllRouteStatisticsResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetProtoRevAllRouteStatisticsResponse) ProtoMessage() {}
func (*QueryGetProtoRevAllRouteStatisticsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{11}
}
func (m *QueryGetProtoRevAllRouteStatisticsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevAllRouteStatisticsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevAllRouteStatisticsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevAllRouteStatisticsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevAllRouteStatisticsResponse.Merge(m, src)
}
func (m *QueryGetProtoRevAllRouteStatisticsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevAllRouteStatisticsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevAllRouteStatisticsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevAllRouteStatisticsResponse proto.InternalMessageInfo

func (m *QueryGetProtoRevAllRouteStatisticsResponse) GetStatistics() []RouteStatistics {
	if m != nil {
		return m.Statistics
	}
	return nil
}

// QueryGetProtoRevTokenPairArbRoutesRequest is request type for the
// Query/GetProtoRevTokenPairArbRoutes RPC method.
type QueryGetProtoRevTokenPairArbRoutesRequest struct {
}

func (m *QueryGetProtoRevTokenPairArbRoutesRequest) Reset() {
	*m = QueryGetProtoRevTokenPairArbRoutesRequest{}
}
func (m *QueryGetProtoRevTokenPairArbRoutesRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetProtoRevTokenPairArbRoutesRequest) ProtoMessage() {}
func (*QueryGetProtoRevTokenPairArbRoutesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{12}
}
func (m *QueryGetProtoRevTokenPairArbRoutesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevTokenPairArbRoutesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevTokenPairArbRoutesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevTokenPairArbRoutesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevTokenPairArbRoutesRequest.Merge(m, src)
}
func (m *QueryGetProtoRevTokenPairArbRoutesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevTokenPairArbRoutesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevTokenPairArbRoutesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevTokenPairArbRoutesRequest proto.InternalMessageInfo

// QueryGetProtoRevTokenPairArbRoutesResponse is response type for the
// Query/GetProtoRevTokenPairArbRoutes RPC method.
type QueryGetProtoRevTokenPairArbRoutesResponse struct {
	// routes is a list of all of the hot routes that the module is currently
	// arbitraging
	Routes []TokenPairArbRoutes `protobuf:"bytes,1,rep,name=routes,proto3" json:"routes" yaml:"routes"`
}

func (m *QueryGetProtoRevTokenPairArbRoutesResponse) Reset() {
	*m = QueryGetProtoRevTokenPairArbRoutesResponse{}
}
func (m *QueryGetProtoRevTokenPairArbRoutesResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetProtoRevTokenPairArbRoutesResponse) ProtoMessage() {}
func (*QueryGetProtoRevTokenPairArbRoutesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{13}
}
func (m *QueryGetProtoRevTokenPairArbRoutesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevTokenPairArbRoutesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevTokenPairArbRoutesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevTokenPairArbRoutesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevTokenPairArbRoutesResponse.Merge(m, src)
}
func (m *QueryGetProtoRevTokenPairArbRoutesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevTokenPairArbRoutesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevTokenPairArbRoutesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevTokenPairArbRoutesResponse proto.InternalMessageInfo

func (m *QueryGetProtoRevTokenPairArbRoutesResponse) GetRoutes() []TokenPairArbRoutes {
	if m != nil {
		return m.Routes
	}
	return nil
}

// QueryGetProtoRevAdminAccountRequest is request type for the
// Query/GetProtoRevAdminAccount RPC method.
type QueryGetProtoRevAdminAccountRequest struct {
}

func (m *QueryGetProtoRevAdminAccountRequest) Reset()         { *m = QueryGetProtoRevAdminAccountRequest{} }
func (m *QueryGetProtoRevAdminAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProtoRevAdminAccountRequest) ProtoMessage()    {}
func (*QueryGetProtoRevAdminAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{14}
}
func (m *QueryGetProtoRevAdminAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevAdminAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevAdminAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevAdminAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevAdminAccountRequest.Merge(m, src)
}
func (m *QueryGetProtoRevAdminAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevAdminAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevAdminAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevAdminAccountRequest proto.InternalMessageInfo

// QueryGetProtoRevAdminAccountResponse is response type for the
// Query/GetProtoRevAdminAccount RPC method.
type QueryGetProtoRevAdminAccountResponse struct {
	// admin_account is the admin account of the module
	AdminAccount string `protobuf:"bytes,1,opt,name=admin_account,json=adminAccount,proto3" json:"admin_account,omitempty" yaml:"admin_account"`
}

func (m *QueryGetProtoRevAdminAccountResponse) Reset()         { *m = QueryGetProtoRevAdminAccountResponse{} }
func (m *QueryGetProtoRevAdminAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProtoRevAdminAccountResponse) ProtoMessage()    {}
func (*QueryGetProtoRevAdminAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{15}
}
func (m *QueryGetProtoRevAdminAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevAdminAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevAdminAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevAdminAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevAdminAccountResponse.Merge(m, src)
}
func (m *QueryGetProtoRevAdminAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevAdminAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevAdminAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevAdminAccountResponse proto.InternalMessageInfo

func (m *QueryGetProtoRevAdminAccountResponse) GetAdminAccount() string {
	if m != nil {
		return m.AdminAccount
	}
	return ""
}

// QueryGetProtoRevDeveloperAccountRequest is request type for the
// Query/GetProtoRevDeveloperAccount RPC method.
type QueryGetProtoRevDeveloperAccountRequest struct {
}

func (m *QueryGetProtoRevDeveloperAccountRequest) Reset() {
	*m = QueryGetProtoRevDeveloperAccountRequest{}
}
func (m *QueryGetProtoRevDeveloperAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProtoRevDeveloperAccountRequest) ProtoMessage()    {}
func (*QueryGetProtoRevDeveloperAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{16}
}
func (m *QueryGetProtoRevDeveloperAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevDeveloperAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevDeveloperAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevDeveloperAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevDeveloperAccountRequest.Merge(m, src)
}
func (m *QueryGetProtoRevDeveloperAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevDeveloperAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevDeveloperAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevDeveloperAccountRequest proto.InternalMessageInfo

// QueryGetProtoRevDeveloperAccountResponse is response type for the
// Query/GetProtoRevDeveloperAccount RPC method.
type QueryGetProtoRevDeveloperAccountResponse struct {
	// developer_account is the developer account of the module
	DeveloperAccount string `protobuf:"bytes,1,opt,name=developer_account,json=developerAccount,proto3" json:"developer_account,omitempty" yaml:"developer_account"`
}

func (m *QueryGetProtoRevDeveloperAccountResponse) Reset() {
	*m = QueryGetProtoRevDeveloperAccountResponse{}
}
func (m *QueryGetProtoRevDeveloperAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProtoRevDeveloperAccountResponse) ProtoMessage()    {}
func (*QueryGetProtoRevDeveloperAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{17}
}
func (m *QueryGetProtoRevDeveloperAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevDeveloperAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevDeveloperAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevDeveloperAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevDeveloperAccountResponse.Merge(m, src)
}
func (m *QueryGetProtoRevDeveloperAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevDeveloperAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevDeveloperAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevDeveloperAccountResponse proto.InternalMessageInfo

func (m *QueryGetProtoRevDeveloperAccountResponse) GetDeveloperAccount() string {
	if m != nil {
		return m.DeveloperAccount
	}
	return ""
}

// QueryGetProtoRevPoolWeightsRequest is request type for the
// Query/GetProtoRevPoolWeights RPC method.
type QueryGetProtoRevPoolWeightsRequest struct {
}

func (m *QueryGetProtoRevPoolWeightsRequest) Reset()         { *m = QueryGetProtoRevPoolWeightsRequest{} }
func (m *QueryGetProtoRevPoolWeightsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProtoRevPoolWeightsRequest) ProtoMessage()    {}
func (*QueryGetProtoRevPoolWeightsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{18}
}
func (m *QueryGetProtoRevPoolWeightsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevPoolWeightsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevPoolWeightsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevPoolWeightsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevPoolWeightsRequest.Merge(m, src)
}
func (m *QueryGetProtoRevPoolWeightsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevPoolWeightsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevPoolWeightsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevPoolWeightsRequest proto.InternalMessageInfo

// QueryGetProtoRevPoolWeightsResponse is response type for the
// Query/GetProtoRevPoolWeights RPC method.
type QueryGetProtoRevPoolWeightsResponse struct {
	// pool_weights is a list of all of the pool weights
	PoolWeights PoolWeights `protobuf:"bytes,1,opt,name=pool_weights,json=poolWeights,proto3" json:"pool_weights" yaml:"pool_weights"`
}

func (m *QueryGetProtoRevPoolWeightsResponse) Reset()         { *m = QueryGetProtoRevPoolWeightsResponse{} }
func (m *QueryGetProtoRevPoolWeightsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProtoRevPoolWeightsResponse) ProtoMessage()    {}
func (*QueryGetProtoRevPoolWeightsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{19}
}
func (m *QueryGetProtoRevPoolWeightsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevPoolWeightsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevPoolWeightsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevPoolWeightsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevPoolWeightsResponse.Merge(m, src)
}
func (m *QueryGetProtoRevPoolWeightsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevPoolWeightsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevPoolWeightsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevPoolWeightsResponse proto.InternalMessageInfo

func (m *QueryGetProtoRevPoolWeightsResponse) GetPoolWeights() PoolWeights {
	if m != nil {
		return m.PoolWeights
	}
	return PoolWeights{}
}

// QueryGetProtoRevMaxPoolPointsPerBlockRequest is request type for the
// Query/GetProtoRevMaxPoolPointsPerBlock RPC method.
type QueryGetProtoRevMaxPoolPointsPerBlockRequest struct {
}

func (m *QueryGetProtoRevMaxPoolPointsPerBlockRequest) Reset() {
	*m = QueryGetProtoRevMaxPoolPointsPerBlockRequest{}
}
func (m *QueryGetProtoRevMaxPoolPointsPerBlockRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetProtoRevMaxPoolPointsPerBlockRequest) ProtoMessage() {}
func (*QueryGetProtoRevMaxPoolPointsPerBlockRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{20}
}
func (m *QueryGetProtoRevMaxPoolPointsPerBlockRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevMaxPoolPointsPerBlockRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevMaxPoolPointsPerBlockRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevMaxPoolPointsPerBlockRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevMaxPoolPointsPerBlockRequest.Merge(m, src)
}
func (m *QueryGetProtoRevMaxPoolPointsPerBlockRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevMaxPoolPointsPerBlockRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevMaxPoolPointsPerBlockRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevMaxPoolPointsPerBlockRequest proto.InternalMessageInfo

// QueryGetProtoRevMaxPoolPointsPerBlockResponse is response type for the
// Query/GetProtoRevMaxPoolPointsPerBlock RPC method.
type QueryGetProtoRevMaxPoolPointsPerBlockResponse struct {
	// max_pool_points_per_block is the maximum number of pool points that can be
	// consumed per block
	MaxPoolPointsPerBlock uint64 `protobuf:"varint,1,opt,name=max_pool_points_per_block,json=maxPoolPointsPerBlock,proto3" json:"max_pool_points_per_block,omitempty" yaml:"max_pool_points_per_block"`
}

func (m *QueryGetProtoRevMaxPoolPointsPerBlockResponse) Reset() {
	*m = QueryGetProtoRevMaxPoolPointsPerBlockResponse{}
}
func (m *QueryGetProtoRevMaxPoolPointsPerBlockResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetProtoRevMaxPoolPointsPerBlockResponse) ProtoMessage() {}
func (*QueryGetProtoRevMaxPoolPointsPerBlockResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{21}
}
func (m *QueryGetProtoRevMaxPoolPointsPerBlockResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevMaxPoolPointsPerBlockResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevMaxPoolPointsPerBlockResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevMaxPoolPointsPerBlockResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevMaxPoolPointsPerBlockResponse.Merge(m, src)
}
func (m *QueryGetProtoRevMaxPoolPointsPerBlockResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevMaxPoolPointsPerBlockResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevMaxPoolPointsPerBlockResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevMaxPoolPointsPerBlockResponse proto.InternalMessageInfo

func (m *QueryGetProtoRevMaxPoolPointsPerBlockResponse) GetMaxPoolPointsPerBlock() uint64 {
	if m != nil {
		return m.MaxPoolPointsPerBlock
	}
	return 0
}

// QueryGetProtoRevMaxPoolPointsPerTxRequest is request type for the
// Query/GetProtoRevMaxPoolPointsPerTx RPC method.
type QueryGetProtoRevMaxPoolPointsPerTxRequest struct {
}

func (m *QueryGetProtoRevMaxPoolPointsPerTxRequest) Reset() {
	*m = QueryGetProtoRevMaxPoolPointsPerTxRequest{}
}
func (m *QueryGetProtoRevMaxPoolPointsPerTxRequest) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetProtoRevMaxPoolPointsPerTxRequest) ProtoMessage() {}
func (*QueryGetProtoRevMaxPoolPointsPerTxRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{22}
}
func (m *QueryGetProtoRevMaxPoolPointsPerTxRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevMaxPoolPointsPerTxRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevMaxPoolPointsPerTxRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevMaxPoolPointsPerTxRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevMaxPoolPointsPerTxRequest.Merge(m, src)
}
func (m *QueryGetProtoRevMaxPoolPointsPerTxRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevMaxPoolPointsPerTxRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevMaxPoolPointsPerTxRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevMaxPoolPointsPerTxRequest proto.InternalMessageInfo

// QueryGetProtoRevMaxPoolPointsPerTxResponse is response type for the
// Query/GetProtoRevMaxPoolPointsPerTx RPC method.
type QueryGetProtoRevMaxPoolPointsPerTxResponse struct {
	// max_pool_points_per_tx is the maximum number of pool points that can be
	// consumed per transaction
	MaxPoolPointsPerTx uint64 `protobuf:"varint,1,opt,name=max_pool_points_per_tx,json=maxPoolPointsPerTx,proto3" json:"max_pool_points_per_tx,omitempty" yaml:"max_pool_points_per_tx"`
}

func (m *QueryGetProtoRevMaxPoolPointsPerTxResponse) Reset() {
	*m = QueryGetProtoRevMaxPoolPointsPerTxResponse{}
}
func (m *QueryGetProtoRevMaxPoolPointsPerTxResponse) String() string {
	return proto.CompactTextString(m)
}
func (*QueryGetProtoRevMaxPoolPointsPerTxResponse) ProtoMessage() {}
func (*QueryGetProtoRevMaxPoolPointsPerTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{23}
}
func (m *QueryGetProtoRevMaxPoolPointsPerTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevMaxPoolPointsPerTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevMaxPoolPointsPerTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevMaxPoolPointsPerTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevMaxPoolPointsPerTxResponse.Merge(m, src)
}
func (m *QueryGetProtoRevMaxPoolPointsPerTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevMaxPoolPointsPerTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevMaxPoolPointsPerTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevMaxPoolPointsPerTxResponse proto.InternalMessageInfo

func (m *QueryGetProtoRevMaxPoolPointsPerTxResponse) GetMaxPoolPointsPerTx() uint64 {
	if m != nil {
		return m.MaxPoolPointsPerTx
	}
	return 0
}

// QueryGetProtoRevBaseDenomsRequest is request type for the
// Query/GetProtoRevBaseDenoms RPC method.
type QueryGetProtoRevBaseDenomsRequest struct {
}

func (m *QueryGetProtoRevBaseDenomsRequest) Reset()         { *m = QueryGetProtoRevBaseDenomsRequest{} }
func (m *QueryGetProtoRevBaseDenomsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProtoRevBaseDenomsRequest) ProtoMessage()    {}
func (*QueryGetProtoRevBaseDenomsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{24}
}
func (m *QueryGetProtoRevBaseDenomsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevBaseDenomsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevBaseDenomsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevBaseDenomsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevBaseDenomsRequest.Merge(m, src)
}
func (m *QueryGetProtoRevBaseDenomsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevBaseDenomsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevBaseDenomsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevBaseDenomsRequest proto.InternalMessageInfo

// QueryGetProtoRevBaseDenomsResponse is response type for the
// Query/GetProtoRevBaseDenoms RPC method.
type QueryGetProtoRevBaseDenomsResponse struct {
	// base_denoms is a list of all of the base denoms and step sizes
	BaseDenoms []BaseDenom `protobuf:"bytes,1,rep,name=base_denoms,json=baseDenoms,proto3" json:"base_denoms" yaml:"base_denoms"`
}

func (m *QueryGetProtoRevBaseDenomsResponse) Reset()         { *m = QueryGetProtoRevBaseDenomsResponse{} }
func (m *QueryGetProtoRevBaseDenomsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProtoRevBaseDenomsResponse) ProtoMessage()    {}
func (*QueryGetProtoRevBaseDenomsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{25}
}
func (m *QueryGetProtoRevBaseDenomsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevBaseDenomsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevBaseDenomsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevBaseDenomsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevBaseDenomsResponse.Merge(m, src)
}
func (m *QueryGetProtoRevBaseDenomsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevBaseDenomsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevBaseDenomsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevBaseDenomsResponse proto.InternalMessageInfo

func (m *QueryGetProtoRevBaseDenomsResponse) GetBaseDenoms() []BaseDenom {
	if m != nil {
		return m.BaseDenoms
	}
	return nil
}

// QueryGetProtoRevEnabledRequest is request type for the
// Query/GetProtoRevEnabled RPC method.
type QueryGetProtoRevEnabledRequest struct {
}

func (m *QueryGetProtoRevEnabledRequest) Reset()         { *m = QueryGetProtoRevEnabledRequest{} }
func (m *QueryGetProtoRevEnabledRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProtoRevEnabledRequest) ProtoMessage()    {}
func (*QueryGetProtoRevEnabledRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{26}
}
func (m *QueryGetProtoRevEnabledRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevEnabledRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevEnabledRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevEnabledRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevEnabledRequest.Merge(m, src)
}
func (m *QueryGetProtoRevEnabledRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevEnabledRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevEnabledRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevEnabledRequest proto.InternalMessageInfo

// QueryGetProtoRevEnabledResponse is response type for the
// Query/GetProtoRevEnabled RPC method.
type QueryGetProtoRevEnabledResponse struct {
	// enabled is whether the module is enabled
	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty" yaml:"enabled"`
}

func (m *QueryGetProtoRevEnabledResponse) Reset()         { *m = QueryGetProtoRevEnabledResponse{} }
func (m *QueryGetProtoRevEnabledResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProtoRevEnabledResponse) ProtoMessage()    {}
func (*QueryGetProtoRevEnabledResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{27}
}
func (m *QueryGetProtoRevEnabledResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevEnabledResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevEnabledResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevEnabledResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevEnabledResponse.Merge(m, src)
}
func (m *QueryGetProtoRevEnabledResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevEnabledResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevEnabledResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevEnabledResponse proto.InternalMessageInfo

func (m *QueryGetProtoRevEnabledResponse) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

// QueryGetProtoRevPoolRequest is request type for the
// Query/GetProtoRevPool RPC method.
type QueryGetProtoRevPoolRequest struct {
	// base_denom is the base denom set in protorev for the denom pair to pool
	// mapping
	BaseDenom string `protobuf:"bytes,1,opt,name=base_denom,json=baseDenom,proto3" json:"base_denom,omitempty" yaml:"base_denom"`
	// other_denom is the other denom for the denom pair to pool mapping
	OtherDenom string `protobuf:"bytes,2,opt,name=other_denom,json=otherDenom,proto3" json:"other_denom,omitempty" yaml:"other_denom"`
}

func (m *QueryGetProtoRevPoolRequest) Reset()         { *m = QueryGetProtoRevPoolRequest{} }
func (m *QueryGetProtoRevPoolRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProtoRevPoolRequest) ProtoMessage()    {}
func (*QueryGetProtoRevPoolRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{28}
}
func (m *QueryGetProtoRevPoolRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevPoolRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevPoolRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevPoolRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevPoolRequest.Merge(m, src)
}
func (m *QueryGetProtoRevPoolRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevPoolRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevPoolRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevPoolRequest proto.InternalMessageInfo

func (m *QueryGetProtoRevPoolRequest) GetBaseDenom() string {
	if m != nil {
		return m.BaseDenom
	}
	return ""
}

func (m *QueryGetProtoRevPoolRequest) GetOtherDenom() string {
	if m != nil {
		return m.OtherDenom
	}
	return ""
}

// QueryGetProtoRevPoolResponse is response type for the
// Query/GetProtoRevPool RPC method.
type QueryGetProtoRevPoolResponse struct {
	// pool_id is the pool_id stored for the denom pair
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
}

func (m *QueryGetProtoRevPoolResponse) Reset()         { *m = QueryGetProtoRevPoolResponse{} }
func (m *QueryGetProtoRevPoolResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProtoRevPoolResponse) ProtoMessage()    {}
func (*QueryGetProtoRevPoolResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f5e7ac9973cce389, []int{29}
}
func (m *QueryGetProtoRevPoolResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProtoRevPoolResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProtoRevPoolResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProtoRevPoolResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProtoRevPoolResponse.Merge(m, src)
}
func (m *QueryGetProtoRevPoolResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProtoRevPoolResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProtoRevPoolResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProtoRevPoolResponse proto.InternalMessageInfo

func (m *QueryGetProtoRevPoolResponse) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "osmosis.protorev.v1beta1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "osmosis.protorev.v1beta1.QueryParamsResponse")
	proto.RegisterType((*QueryGetProtoRevNumberOfTradesRequest)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevNumberOfTradesRequest")
	proto.RegisterType((*QueryGetProtoRevNumberOfTradesResponse)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevNumberOfTradesResponse")
	proto.RegisterType((*QueryGetProtoRevProfitsByDenomRequest)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevProfitsByDenomRequest")
	proto.RegisterType((*QueryGetProtoRevProfitsByDenomResponse)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevProfitsByDenomResponse")
	proto.RegisterType((*QueryGetProtoRevAllProfitsRequest)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevAllProfitsRequest")
	proto.RegisterType((*QueryGetProtoRevAllProfitsResponse)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevAllProfitsResponse")
	proto.RegisterType((*QueryGetProtoRevStatisticsByRouteRequest)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevStatisticsByRouteRequest")
	proto.RegisterType((*QueryGetProtoRevStatisticsByRouteResponse)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevStatisticsByRouteResponse")
	proto.RegisterType((*QueryGetProtoRevAllRouteStatisticsRequest)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevAllRouteStatisticsRequest")
	proto.RegisterType((*QueryGetProtoRevAllRouteStatisticsResponse)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevAllRouteStatisticsResponse")
	proto.RegisterType((*QueryGetProtoRevTokenPairArbRoutesRequest)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevTokenPairArbRoutesRequest")
	proto.RegisterType((*QueryGetProtoRevTokenPairArbRoutesResponse)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevTokenPairArbRoutesResponse")
	proto.RegisterType((*QueryGetProtoRevAdminAccountRequest)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevAdminAccountRequest")
	proto.RegisterType((*QueryGetProtoRevAdminAccountResponse)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevAdminAccountResponse")
	proto.RegisterType((*QueryGetProtoRevDeveloperAccountRequest)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevDeveloperAccountRequest")
	proto.RegisterType((*QueryGetProtoRevDeveloperAccountResponse)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevDeveloperAccountResponse")
	proto.RegisterType((*QueryGetProtoRevPoolWeightsRequest)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevPoolWeightsRequest")
	proto.RegisterType((*QueryGetProtoRevPoolWeightsResponse)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevPoolWeightsResponse")
	proto.RegisterType((*QueryGetProtoRevMaxPoolPointsPerBlockRequest)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerBlockRequest")
	proto.RegisterType((*QueryGetProtoRevMaxPoolPointsPerBlockResponse)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerBlockResponse")
	proto.RegisterType((*QueryGetProtoRevMaxPoolPointsPerTxRequest)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerTxRequest")
	proto.RegisterType((*QueryGetProtoRevMaxPoolPointsPerTxResponse)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevMaxPoolPointsPerTxResponse")
	proto.RegisterType((*QueryGetProtoRevBaseDenomsRequest)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevBaseDenomsRequest")
	proto.RegisterType((*QueryGetProtoRevBaseDenomsResponse)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevBaseDenomsResponse")
	proto.RegisterType((*QueryGetProtoRevEnabledRequest)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevEnabledRequest")
	proto.RegisterType((*QueryGetProtoRevEnabledResponse)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevEnabledResponse")
	proto.RegisterType((*QueryGetProtoRevPoolRequest)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevPoolRequest")
	proto.RegisterType((*QueryGetProtoRevPoolResponse)(nil), "osmosis.protorev.v1beta1.QueryGetProtoRevPoolResponse")
}

func init() {
	proto.RegisterFile("osmosis/protorev/v1beta1/query.proto", fileDescriptor_f5e7ac9973cce389)
}

var fileDescriptor_f5e7ac9973cce389 = []byte{
	// 1537 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x58, 0x5b, 0x6f, 0xdc, 0x44,
	0x1b, 0x8e, 0x7b, 0x48, 0xbe, 0x4e, 0xda, 0x7e, 0xed, 0xb4, 0x49, 0x13, 0x37, 0xdd, 0x4d, 0x27,
	0xa7, 0xe6, 0xb4, 0xab, 0xb4, 0xe9, 0xd7, 0x8f, 0x43, 0x81, 0xb8, 0x81, 0x2a, 0xaa, 0x68, 0x16,
	0x53, 0x84, 0x04, 0x12, 0x8b, 0x77, 0x77, 0xb2, 0xb5, 0xea, 0xf5, 0xb8, 0xb6, 0x37, 0x64, 0x6f,
	0x41, 0x42, 0x42, 0x20, 0x71, 0xba, 0xe6, 0x8e, 0x1f, 0xc0, 0x1f, 0xe0, 0x82, 0x0b, 0xa4, 0x5e,
	0xa1, 0x4a, 0x08, 0x09, 0xf5, 0x62, 0xa9, 0x5a, 0x24, 0x6e, 0xb8, 0xda, 0x5f, 0x80, 0x3c, 0xf3,
	0x7a, 0xed, 0xf5, 0x61, 0xb3, 0x4e, 0x24, 0xae, 0xb2, 0xf6, 0xbc, 0xef, 0xf3, 0x3e, 0xcf, 0xcc,
	0xbc, 0x33, 0x8f, 0x83, 0x66, 0x99, 0xd3, 0x60, 0x8e, 0xee, 0x14, 0x2d, 0x9b, 0xb9, 0xcc, 0xa6,
	0xbb, 0xc5, 0xdd, 0xb5, 0x0a, 0x75, 0xb5, 0xb5, 0xe2, 0xc3, 0x26, 0xb5, 0x5b, 0x05, 0xfe, 0x1a,
	0x4f, 0x40, 0x54, 0xc1, 0x8f, 0x2a, 0x40, 0x94, 0x7c, 0xbe, 0xce, 0xea, 0x8c, 0xbf, 0x2d, 0x7a,
	0xbf, 0x44, 0x80, 0x3c, 0x55, 0x67, 0xac, 0x6e, 0xd0, 0xa2, 0x66, 0xe9, 0x45, 0xcd, 0x34, 0x99,
	0xab, 0xb9, 0x3a, 0x33, 0x21, 0x5d, 0x5e, 0xaa, 0x72, 0xb8, 0x62, 0x45, 0x73, 0xa8, 0x28, 0xd3,
	0x2d, 0x6a, 0x69, 0x75, 0xdd, 0xe4, 0xc1, 0x10, 0x3b, 0x97, 0xca, 0xcf, 0xd2, 0x6c, 0xad, 0xe1,
	0x43, 0x2e, 0xa4, 0x87, 0xf9, 0x8c, 0x45, 0x60, 0x2e, 0x5c, 0xdb, 0x8f, 0xa9, 0x32, 0x1d, 0xea,
	0x91, 0xf3, 0x08, 0xbf, 0xe5, 0x31, 0x2a, 0x71, 0x74, 0x95, 0x3e, 0x6c, 0x52, 0xc7, 0x25, 0x3b,
	0xe8, 0x5c, 0xcf, 0x5b, 0xc7, 0x62, 0xa6, 0x43, 0xf1, 0x36, 0x1a, 0x16, 0x2c, 0x26, 0xa4, 0x69,
	0xe9, 0xca, 0xe8, 0xd5, 0xe9, 0x42, 0xda, 0x3c, 0x15, 0x44, 0xa6, 0x32, 0xf6, 0xa8, 0x9d, 0x1f,
	0xea, 0xb4, 0xf3, 0xa7, 0x5a, 0x5a, 0xc3, 0x78, 0x91, 0x88, 0x6c, 0xa2, 0x02, 0x0c, 0x59, 0x40,
	0x73, 0xbc, 0xce, 0x6d, 0xea, 0x96, 0x3c, 0x04, 0x95, 0xee, 0xde, 0x6d, 0x36, 0x2a, 0xd4, 0xde,
	0xde, 0xb9, 0x67, 0x6b, 0x35, 0xda, 0x25, 0xf4, 0x9d, 0x84, 0xe6, 0xf7, 0x8b, 0x04, 0x92, 0x0e,
	0x3a, 0x63, 0xf2, 0x91, 0x32, 0xdb, 0x29, 0xbb, 0x7c, 0x8c, 0xd3, 0x3d, 0xa1, 0x6c, 0x79, 0x64,
	0x9e, 0xb4, 0xf3, 0xf3, 0x75, 0xdd, 0xbd, 0xdf, 0xac, 0x14, 0xaa, 0xac, 0x51, 0x84, 0xe9, 0x11,
	0x7f, 0x56, 0x9d, 0xda, 0x83, 0xa2, 0xdb, 0xb2, 0xa8, 0x53, 0xd8, 0x32, 0xdd, 0x4e, 0x3b, 0x7f,
	0x41, 0xd0, 0x8e, 0xe2, 0x11, 0xf5, 0xb4, 0xd9, 0x53, 0x9c, 0x6c, 0xc7, 0x85, 0x94, 0x6c, 0xb6,
	0xa3, 0xbb, 0x8e, 0xd2, 0xda, 0xa4, 0x26, 0x6b, 0x80, 0x10, 0x3c, 0x8f, 0x8e, 0xd7, 0xbc, 0x67,
	0xa0, 0x74, 0xa6, 0xd3, 0xce, 0x9f, 0x14, 0x45, 0xf8, 0x6b, 0xa2, 0x8a, 0x61, 0x62, 0xc6, 0xf5,
	0x46, 0x01, 0x41, 0xef, 0x26, 0x1a, 0xb6, 0xf8, 0x08, 0x2c, 0xca, 0x64, 0x41, 0x88, 0x29, 0x78,
	0x4b, 0xde, 0x5d, 0x8f, 0x5b, 0x4c, 0x37, 0x95, 0xb3, 0xa1, 0x95, 0xe0, 0x29, 0xde, 0x4a, 0x88,
	0x1f, 0x33, 0xe8, 0x72, 0xb4, 0xde, 0x86, 0x61, 0x40, 0x49, 0x7f, 0x15, 0x1e, 0x22, 0xd2, 0x2f,
	0x08, 0x08, 0xdd, 0x41, 0x23, 0x02, 0xd4, 0x9b, 0xf7, 0xa3, 0xfd, 0x19, 0x8d, 0xc3, 0xfe, 0x38,
	0x1d, 0x66, 0xe5, 0x10, 0x75, 0xa4, 0xfb, 0x0b, 0x5d, 0x89, 0x96, 0x7c, 0xdb, 0xeb, 0x2e, 0xc7,
	0xd5, 0xab, 0x8e, 0xd2, 0x52, 0x59, 0xd3, 0xa5, 0xa1, 0xb9, 0xb5, 0xbd, 0x67, 0x5e, 0xf6, 0x58,
	0x78, 0x6e, 0xf9, 0x6b, 0xa2, 0x8a, 0x61, 0xf2, 0xb5, 0x84, 0x16, 0x07, 0x00, 0x05, 0x39, 0x35,
	0x84, 0x9c, 0xee, 0x20, 0xcc, 0xf1, 0x62, 0xfa, 0xc6, 0xe7, 0xc9, 0x21, 0xb4, 0x49, 0x50, 0x78,
	0x56, 0x30, 0x09, 0xa0, 0x88, 0x1a, 0xc2, 0x25, 0xcb, 0x71, 0x4a, 0x1b, 0x86, 0x11, 0x01, 0xf3,
	0xd7, 0xe1, 0x1b, 0x09, 0x2d, 0x0d, 0x12, 0x9d, 0xa2, 0xe0, 0xe8, 0xbf, 0xa5, 0xe0, 0x1e, 0x7b,
	0x40, 0xcd, 0x92, 0xa6, 0xdb, 0x1b, 0x76, 0x85, 0xa3, 0x76, 0x15, 0x7c, 0x96, 0xa0, 0x20, 0x29,
	0x1a, 0x14, 0xbc, 0x8f, 0x86, 0xf9, 0xd2, 0xf9, 0xec, 0x57, 0xd2, 0xd9, 0xc7, 0x51, 0xa2, 0x87,
	0x90, 0x40, 0x22, 0x2a, 0x40, 0x92, 0x39, 0x34, 0x13, 0x9b, 0xcc, 0x5a, 0x43, 0x37, 0x37, 0xaa,
	0x55, 0xd6, 0x34, 0x5d, 0x9f, 0x32, 0x45, 0xb3, 0xfd, 0xc3, 0x80, 0xeb, 0x4d, 0x74, 0x4a, 0xf3,
	0xde, 0x97, 0x35, 0x31, 0x00, 0x9d, 0x3e, 0xd1, 0x69, 0xe7, 0xcf, 0x0b, 0x02, 0x3d, 0xc3, 0x44,
	0x3d, 0xa9, 0x85, 0x60, 0xc8, 0x22, 0x5a, 0x88, 0x96, 0xd9, 0xa4, 0xbb, 0xd4, 0x60, 0x16, 0xb5,
	0x23, 0x8c, 0x9a, 0xf1, 0xde, 0x88, 0x87, 0x02, 0xab, 0x2d, 0x74, 0xb6, 0xe6, 0x8f, 0x45, 0x98,
	0x4d, 0x75, 0xda, 0xf9, 0x09, 0xff, 0x0c, 0x8a, 0x84, 0x10, 0xf5, 0x4c, 0x2d, 0x02, 0x49, 0x66,
	0xe3, 0xa7, 0x40, 0x89, 0x31, 0xe3, 0x5d, 0xaa, 0xd7, 0xef, 0x07, 0x67, 0xc5, 0x17, 0x52, 0x7c,
	0x5a, 0x7b, 0xc2, 0x80, 0x18, 0x45, 0x27, 0x2d, 0xc6, 0x8c, 0xf2, 0x47, 0xe2, 0x3d, 0x34, 0xd8,
	0x5c, 0x9f, 0x9b, 0x25, 0x00, 0x51, 0x2e, 0xc2, 0xca, 0x9e, 0x83, 0xe3, 0x23, 0x04, 0x44, 0xd4,
	0x51, 0x2b, 0x88, 0x24, 0x05, 0xb4, 0x12, 0x65, 0xf3, 0xa6, 0xb6, 0xe7, 0x61, 0x95, 0x98, 0x6e,
	0xba, 0x4e, 0x89, 0xda, 0x8a, 0xc1, 0xaa, 0x0f, 0x7c, 0xfa, 0x5f, 0x4a, 0x68, 0x75, 0xc0, 0x04,
	0x10, 0xf2, 0x01, 0x9a, 0x6c, 0x68, 0x7b, 0x65, 0xce, 0xc1, 0xe2, 0x21, 0x65, 0x6f, 0x22, 0x2b,
	0x5e, 0x10, 0x57, 0x75, 0x4c, 0x99, 0xed, 0xb4, 0xf3, 0xd3, 0x82, 0x6a, 0x6a, 0x28, 0x51, 0xc7,
	0x1a, 0x49, 0x75, 0x92, 0xfa, 0x2b, 0x4a, 0xe8, 0xde, 0x9e, 0x4f, 0xff, 0x93, 0x84, 0xfe, 0x4a,
	0x8a, 0x06, 0xee, 0xef, 0xa0, 0xf1, 0x24, 0x42, 0xee, 0x1e, 0x10, 0xbf, 0xdc, 0x69, 0xe7, 0x2f,
	0xa5, 0x13, 0x77, 0xf7, 0x88, 0x8a, 0x1b, 0x31, 0xf8, 0xa4, 0x4b, 0x45, 0xd1, 0x1c, 0xca, 0xef,
	0xaf, 0xee, 0x46, 0xf9, 0x54, 0x8a, 0xef, 0xa7, 0x70, 0x14, 0x50, 0xfc, 0x10, 0x8d, 0x7a, 0xd7,
	0x47, 0x99, 0x5f, 0x8f, 0xfe, 0x39, 0x30, 0x93, 0xbe, 0x4d, 0xba, 0x10, 0x8a, 0x0c, 0x9b, 0x04,
	0x0b, 0x01, 0x21, 0x14, 0xa2, 0xa2, 0x4a, 0xb7, 0x12, 0x99, 0x46, 0xb9, 0x28, 0x8f, 0xd7, 0x4d,
	0xad, 0x62, 0xd0, 0x9a, 0x4f, 0x75, 0x1b, 0xe5, 0x53, 0x23, 0x80, 0xe6, 0x0a, 0x1a, 0xa1, 0xe2,
	0x15, 0x9f, 0xba, 0xff, 0x28, 0x38, 0xb8, 0xdd, 0x60, 0x80, 0xa8, 0x7e, 0x88, 0xd7, 0x24, 0x17,
	0x93, 0x9a, 0xc4, 0xbf, 0xd1, 0xd6, 0x11, 0x0a, 0xe8, 0x42, 0xbb, 0x8e, 0x05, 0x47, 0x71, 0x30,
	0x46, 0xd4, 0x13, 0x5d, 0x25, 0xf8, 0x06, 0x1a, 0x65, 0xee, 0x7d, 0x6a, 0x43, 0xda, 0x11, 0x9e,
	0x36, 0x1e, 0xcc, 0x40, 0x68, 0x90, 0xa8, 0x88, 0x3f, 0xf1, 0x44, 0x72, 0x07, 0x4d, 0x25, 0xb3,
	0x01, 0x71, 0xcb, 0x68, 0x84, 0x2f, 0xbd, 0x5e, 0x83, 0x7d, 0x11, 0x12, 0x07, 0x03, 0x9e, 0xa3,
	0x60, 0xcc, 0xd8, 0xaa, 0x5d, 0xfd, 0xeb, 0x02, 0x3a, 0xce, 0xd1, 0xf0, 0xe7, 0x12, 0x1a, 0x16,
	0x7e, 0x10, 0xf7, 0x39, 0xb8, 0xe3, 0x36, 0x54, 0x5e, 0x1d, 0x30, 0x5a, 0xd0, 0x23, 0xb3, 0x1f,
	0xff, 0xfa, 0xe7, 0xb7, 0x47, 0x72, 0x78, 0xaa, 0xe8, 0xbb, 0xe3, 0xdd, 0xb5, 0xf5, 0xc0, 0x21,
	0x0b, 0xcf, 0x89, 0x7f, 0x91, 0xd0, 0x64, 0xaa, 0x8b, 0xc4, 0xaf, 0xee, 0x53, 0x72, 0x3f, 0xa7,
	0x2a, 0xbf, 0x76, 0x70, 0x00, 0x90, 0x51, 0xe0, 0x32, 0xae, 0xe0, 0xf9, 0x64, 0x19, 0x51, 0x33,
	0x1a, 0x15, 0xd4, 0x6b, 0x13, 0xb3, 0x08, 0x4a, 0x74, 0xac, 0x59, 0x04, 0x25, 0x3b, 0xd4, 0xfd,
	0x04, 0x81, 0xd5, 0x2b, 0x57, 0x5a, 0x62, 0x4f, 0xe2, 0x1f, 0x25, 0x34, 0x96, 0x68, 0x31, 0xf1,
	0x4b, 0x83, 0x73, 0x89, 0xb9, 0x57, 0xf9, 0xe5, 0x83, 0x25, 0x83, 0x88, 0x45, 0x2e, 0x62, 0x06,
	0x5f, 0x4e, 0x16, 0xa1, 0x19, 0x46, 0x19, 0x84, 0xe0, 0x27, 0x12, 0x9a, 0xea, 0x67, 0x2d, 0xb1,
	0x32, 0x38, 0x93, 0x34, 0xb3, 0x2b, 0xdf, 0x3a, 0x14, 0x06, 0x88, 0x5a, 0xe3, 0xa2, 0x96, 0xf1,
	0x62, 0xb2, 0xa8, 0xc0, 0xdd, 0x79, 0x8b, 0xc3, 0xed, 0x12, 0x6e, 0x4b, 0xe8, 0x52, 0x5f, 0xdb,
	0x89, 0x6f, 0x65, 0x9a, 0xe7, 0x64, 0x8b, 0x2b, 0x6f, 0x1e, 0x0e, 0x04, 0xf4, 0x5d, 0xe5, 0xfa,
	0x56, 0xf0, 0x52, 0xfa, 0xa2, 0x71, 0x55, 0xe5, 0x40, 0x29, 0xfe, 0xa3, 0x57, 0x60, 0xdc, 0x4f,
	0x66, 0x11, 0x98, 0xea, 0x80, 0xb3, 0x08, 0x4c, 0x37, 0xc6, 0xe4, 0x1a, 0x17, 0xb8, 0x8a, 0x97,
	0x93, 0x05, 0xba, 0x5e, 0x66, 0xd9, 0xd2, 0x74, 0xbb, 0xac, 0xd9, 0x15, 0xa1, 0xd5, 0xc1, 0x3f,
	0x4b, 0xe8, 0x42, 0x8a, 0x8b, 0xc5, 0x37, 0x33, 0xcc, 0x7b, 0xdc, 0x24, 0xcb, 0xaf, 0x1c, 0x34,
	0x1d, 0xf4, 0x2c, 0x73, 0x3d, 0x73, 0x78, 0x26, 0x65, 0xc1, 0xc2, 0xce, 0x19, 0xff, 0x26, 0xa1,
	0x8b, 0x7d, 0xbc, 0x2f, 0xde, 0x18, 0x9c, 0x4c, 0x8a, 0xc5, 0x96, 0x95, 0xc3, 0x40, 0x80, 0xa6,
	0x22, 0xd7, 0xb4, 0x88, 0x17, 0x92, 0x35, 0xc5, 0x3c, 0x37, 0xfe, 0x49, 0x42, 0xe3, 0xc9, 0xae,
	0x19, 0x67, 0x38, 0xc3, 0xe2, 0x9e, 0x5c, 0xbe, 0x79, 0xc0, 0x6c, 0x10, 0xb2, 0xc4, 0x85, 0xcc,
	0x62, 0x92, 0x72, 0x8e, 0x87, 0xdc, 0x37, 0x7e, 0xda, 0xdb, 0x45, 0x71, 0xef, 0x99, 0xa5, 0x8b,
	0x52, 0x7d, 0x6e, 0x96, 0x2e, 0x4a, 0xb7, 0xbf, 0x64, 0x9d, 0x0b, 0x2b, 0xe0, 0x95, 0x64, 0x61,
	0xc9, 0x96, 0x17, 0xff, 0x2d, 0xa1, 0xe9, 0xfd, 0xbe, 0x0e, 0xf0, 0x1b, 0x07, 0x27, 0x18, 0xfe,
	0x1e, 0x91, 0x6f, 0x1f, 0x1a, 0x07, 0xb4, 0xde, 0xe0, 0x5a, 0xd7, 0x70, 0x71, 0x70, 0xad, 0xfc,
	0xbb, 0x24, 0x7a, 0x2b, 0x07, 0x16, 0x3d, 0xcb, 0xad, 0x1c, 0xb3, 0xff, 0x59, 0x6e, 0xe5, 0xf8,
	0x57, 0xc1, 0x7e, 0xb7, 0x72, 0xc8, 0xeb, 0xe3, 0x1f, 0x24, 0x84, 0xe3, 0xc6, 0x1d, 0xff, 0x7f,
	0xf0, 0xfa, 0xbd, 0x5f, 0x03, 0xf2, 0x0b, 0x07, 0xc8, 0x04, 0xda, 0x73, 0x9c, 0x76, 0x1e, 0x5f,
	0x4a, 0xa6, 0x0d, 0x9f, 0x07, 0xf8, 0x7b, 0x09, 0xfd, 0x37, 0xd2, 0x93, 0xf8, 0x7a, 0xb6, 0x1e,
	0xf6, 0xc9, 0xfe, 0x2f, 0x6b, 0x1a, 0x30, 0x25, 0x9c, 0xe9, 0x14, 0x96, 0xd3, 0x7b, 0x5e, 0xb9,
	0xfb, 0xe8, 0x59, 0x4e, 0x7a, 0xfc, 0x2c, 0x27, 0x3d, 0x7d, 0x96, 0x93, 0xbe, 0x7a, 0x9e, 0x1b,
	0x7a, 0xfc, 0x3c, 0x37, 0xf4, 0xfb, 0xf3, 0xdc, 0xd0, 0x7b, 0xeb, 0xa1, 0xff, 0xb4, 0x42, 0xfe,
	0xaa, 0xa1, 0x55, 0x9c, 0x10, 0xd8, 0xf5, 0xe2, 0x5e, 0xe8, 0xbe, 0x6a, 0x59, 0xd4, 0xa9, 0x0c,
	0xf3, 0xe7, 0x6b, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x61, 0x1e, 0x35, 0x74, 0xac, 0x17, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// GetProtoRevNumberOfTrades queries the number of arbitrage trades the module
	// has executed
	GetProtoRevNumberOfTrades(ctx context.Context, in *QueryGetProtoRevNumberOfTradesRequest, opts ...grpc.CallOption) (*QueryGetProtoRevNumberOfTradesResponse, error)
	// GetProtoRevProfitsByDenom queries the profits of the module by denom
	GetProtoRevProfitsByDenom(ctx context.Context, in *QueryGetProtoRevProfitsByDenomRequest, opts ...grpc.CallOption) (*QueryGetProtoRevProfitsByDenomResponse, error)
	// GetProtoRevAllProfits queries all of the profits from the module
	GetProtoRevAllProfits(ctx context.Context, in *QueryGetProtoRevAllProfitsRequest, opts ...grpc.CallOption) (*QueryGetProtoRevAllProfitsResponse, error)
	// GetProtoRevStatisticsByRoute queries the number of arbitrages and profits
	// that have been executed for a given route
	GetProtoRevStatisticsByRoute(ctx context.Context, in *QueryGetProtoRevStatisticsByRouteRequest, opts ...grpc.CallOption) (*QueryGetProtoRevStatisticsByRouteResponse, error)
	// GetProtoRevAllRouteStatistics queries all of routes that the module has
	// arbitraged against and the number of trades and profits that have been
	// accumulated for each route
	GetProtoRevAllRouteStatistics(ctx context.Context, in *QueryGetProtoRevAllRouteStatisticsRequest, opts ...grpc.CallOption) (*QueryGetProtoRevAllRouteStatisticsResponse, error)
	// GetProtoRevTokenPairArbRoutes queries all of the hot routes that the module
	// is currently arbitraging
	GetProtoRevTokenPairArbRoutes(ctx context.Context, in *QueryGetProtoRevTokenPairArbRoutesRequest, opts ...grpc.CallOption) (*QueryGetProtoRevTokenPairArbRoutesResponse, error)
	// GetProtoRevAdminAccount queries the admin account of the module
	GetProtoRevAdminAccount(ctx context.Context, in *QueryGetProtoRevAdminAccountRequest, opts ...grpc.CallOption) (*QueryGetProtoRevAdminAccountResponse, error)
	// GetProtoRevDeveloperAccount queries the developer account of the module
	GetProtoRevDeveloperAccount(ctx context.Context, in *QueryGetProtoRevDeveloperAccountRequest, opts ...grpc.CallOption) (*QueryGetProtoRevDeveloperAccountResponse, error)
	// GetProtoRevPoolWeights queries the weights of each pool type currently
	// being used by the module
	GetProtoRevPoolWeights(ctx context.Context, in *QueryGetProtoRevPoolWeightsRequest, opts ...grpc.CallOption) (*QueryGetProtoRevPoolWeightsResponse, error)
	// GetProtoRevMaxPoolPointsPerTx queries the maximum number of pool points
	// that can be consumed per transaction
	GetProtoRevMaxPoolPointsPerTx(ctx context.Context, in *QueryGetProtoRevMaxPoolPointsPerTxRequest, opts ...grpc.CallOption) (*QueryGetProtoRevMaxPoolPointsPerTxResponse, error)
	// GetProtoRevMaxPoolPointsPerBlock queries the maximum number of pool points
	// that can consumed per block
	GetProtoRevMaxPoolPointsPerBlock(ctx context.Context, in *QueryGetProtoRevMaxPoolPointsPerBlockRequest, opts ...grpc.CallOption) (*QueryGetProtoRevMaxPoolPointsPerBlockResponse, error)
	// GetProtoRevBaseDenoms queries the base denoms that the module is currently
	// utilizing for arbitrage
	GetProtoRevBaseDenoms(ctx context.Context, in *QueryGetProtoRevBaseDenomsRequest, opts ...grpc.CallOption) (*QueryGetProtoRevBaseDenomsResponse, error)
	// GetProtoRevEnabled queries whether the module is enabled or not
	GetProtoRevEnabled(ctx context.Context, in *QueryGetProtoRevEnabledRequest, opts ...grpc.CallOption) (*QueryGetProtoRevEnabledResponse, error)
	// GetProtoRevPool queries the pool id used via the highest liquidity method
	// for arbitrage route building given a pair of denominations
	GetProtoRevPool(ctx context.Context, in *QueryGetProtoRevPoolRequest, opts ...grpc.CallOption) (*QueryGetProtoRevPoolResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/osmosis.protorev.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetProtoRevNumberOfTrades(ctx context.Context, in *QueryGetProtoRevNumberOfTradesRequest, opts ...grpc.CallOption) (*QueryGetProtoRevNumberOfTradesResponse, error) {
	out := new(QueryGetProtoRevNumberOfTradesResponse)
	err := c.cc.Invoke(ctx, "/osmosis.protorev.v1beta1.Query/GetProtoRevNumberOfTrades", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetProtoRevProfitsByDenom(ctx context.Context, in *QueryGetProtoRevProfitsByDenomRequest, opts ...grpc.CallOption) (*QueryGetProtoRevProfitsByDenomResponse, error) {
	out := new(QueryGetProtoRevProfitsByDenomResponse)
	err := c.cc.Invoke(ctx, "/osmosis.protorev.v1beta1.Query/GetProtoRevProfitsByDenom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetProtoRevAllProfits(ctx context.Context, in *QueryGetProtoRevAllProfitsRequest, opts ...grpc.CallOption) (*QueryGetProtoRevAllProfitsResponse, error) {
	out := new(QueryGetProtoRevAllProfitsResponse)
	err := c.cc.Invoke(ctx, "/osmosis.protorev.v1beta1.Query/GetProtoRevAllProfits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetProtoRevStatisticsByRoute(ctx context.Context, in *QueryGetProtoRevStatisticsByRouteRequest, opts ...grpc.CallOption) (*QueryGetProtoRevStatisticsByRouteResponse, error) {
	out := new(QueryGetProtoRevStatisticsByRouteResponse)
	err := c.cc.Invoke(ctx, "/osmosis.protorev.v1beta1.Query/GetProtoRevStatisticsByRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetProtoRevAllRouteStatistics(ctx context.Context, in *QueryGetProtoRevAllRouteStatisticsRequest, opts ...grpc.CallOption) (*QueryGetProtoRevAllRouteStatisticsResponse, error) {
	out := new(QueryGetProtoRevAllRouteStatisticsResponse)
	err := c.cc.Invoke(ctx, "/osmosis.protorev.v1beta1.Query/GetProtoRevAllRouteStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetProtoRevTokenPairArbRoutes(ctx context.Context, in *QueryGetProtoRevTokenPairArbRoutesRequest, opts ...grpc.CallOption) (*QueryGetProtoRevTokenPairArbRoutesResponse, error) {
	out := new(QueryGetProtoRevTokenPairArbRoutesResponse)
	err := c.cc.Invoke(ctx, "/osmosis.protorev.v1beta1.Query/GetProtoRevTokenPairArbRoutes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetProtoRevAdminAccount(ctx context.Context, in *QueryGetProtoRevAdminAccountRequest, opts ...grpc.CallOption) (*QueryGetProtoRevAdminAccountResponse, error) {
	out := new(QueryGetProtoRevAdminAccountResponse)
	err := c.cc.Invoke(ctx, "/osmosis.protorev.v1beta1.Query/GetProtoRevAdminAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetProtoRevDeveloperAccount(ctx context.Context, in *QueryGetProtoRevDeveloperAccountRequest, opts ...grpc.CallOption) (*QueryGetProtoRevDeveloperAccountResponse, error) {
	out := new(QueryGetProtoRevDeveloperAccountResponse)
	err := c.cc.Invoke(ctx, "/osmosis.protorev.v1beta1.Query/GetProtoRevDeveloperAccount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetProtoRevPoolWeights(ctx context.Context, in *QueryGetProtoRevPoolWeightsRequest, opts ...grpc.CallOption) (*QueryGetProtoRevPoolWeightsResponse, error) {
	out := new(QueryGetProtoRevPoolWeightsResponse)
	err := c.cc.Invoke(ctx, "/osmosis.protorev.v1beta1.Query/GetProtoRevPoolWeights", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetProtoRevMaxPoolPointsPerTx(ctx context.Context, in *QueryGetProtoRevMaxPoolPointsPerTxRequest, opts ...grpc.CallOption) (*QueryGetProtoRevMaxPoolPointsPerTxResponse, error) {
	out := new(QueryGetProtoRevMaxPoolPointsPerTxResponse)
	err := c.cc.Invoke(ctx, "/osmosis.protorev.v1beta1.Query/GetProtoRevMaxPoolPointsPerTx", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetProtoRevMaxPoolPointsPerBlock(ctx context.Context, in *QueryGetProtoRevMaxPoolPointsPerBlockRequest, opts ...grpc.CallOption) (*QueryGetProtoRevMaxPoolPointsPerBlockResponse, error) {
	out := new(QueryGetProtoRevMaxPoolPointsPerBlockResponse)
	err := c.cc.Invoke(ctx, "/osmosis.protorev.v1beta1.Query/GetProtoRevMaxPoolPointsPerBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetProtoRevBaseDenoms(ctx context.Context, in *QueryGetProtoRevBaseDenomsRequest, opts ...grpc.CallOption) (*QueryGetProtoRevBaseDenomsResponse, error) {
	out := new(QueryGetProtoRevBaseDenomsResponse)
	err := c.cc.Invoke(ctx, "/osmosis.protorev.v1beta1.Query/GetProtoRevBaseDenoms", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetProtoRevEnabled(ctx context.Context, in *QueryGetProtoRevEnabledRequest, opts ...grpc.CallOption) (*QueryGetProtoRevEnabledResponse, error) {
	out := new(QueryGetProtoRevEnabledResponse)
	err := c.cc.Invoke(ctx, "/osmosis.protorev.v1beta1.Query/GetProtoRevEnabled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetProtoRevPool(ctx context.Context, in *QueryGetProtoRevPoolRequest, opts ...grpc.CallOption) (*QueryGetProtoRevPoolResponse, error) {
	out := new(QueryGetProtoRevPoolResponse)
	err := c.cc.Invoke(ctx, "/osmosis.protorev.v1beta1.Query/GetProtoRevPool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// GetProtoRevNumberOfTrades queries the number of arbitrage trades the module
	// has executed
	GetProtoRevNumberOfTrades(context.Context, *QueryGetProtoRevNumberOfTradesRequest) (*QueryGetProtoRevNumberOfTradesResponse, error)
	// GetProtoRevProfitsByDenom queries the profits of the module by denom
	GetProtoRevProfitsByDenom(context.Context, *QueryGetProtoRevProfitsByDenomRequest) (*QueryGetProtoRevProfitsByDenomResponse, error)
	// GetProtoRevAllProfits queries all of the profits from the module
	GetProtoRevAllProfits(context.Context, *QueryGetProtoRevAllProfitsRequest) (*QueryGetProtoRevAllProfitsResponse, error)
	// GetProtoRevStatisticsByRoute queries the number of arbitrages and profits
	// that have been executed for a given route
	GetProtoRevStatisticsByRoute(context.Context, *QueryGetProtoRevStatisticsByRouteRequest) (*QueryGetProtoRevStatisticsByRouteResponse, error)
	// GetProtoRevAllRouteStatistics queries all of routes that the module has
	// arbitraged against and the number of trades and profits that have been
	// accumulated for each route
	GetProtoRevAllRouteStatistics(context.Context, *QueryGetProtoRevAllRouteStatisticsRequest) (*QueryGetProtoRevAllRouteStatisticsResponse, error)
	// GetProtoRevTokenPairArbRoutes queries all of the hot routes that the module
	// is currently arbitraging
	GetProtoRevTokenPairArbRoutes(context.Context, *QueryGetProtoRevTokenPairArbRoutesRequest) (*QueryGetProtoRevTokenPairArbRoutesResponse, error)
	// GetProtoRevAdminAccount queries the admin account of the module
	GetProtoRevAdminAccount(context.Context, *QueryGetProtoRevAdminAccountRequest) (*QueryGetProtoRevAdminAccountResponse, error)
	// GetProtoRevDeveloperAccount queries the developer account of the module
	GetProtoRevDeveloperAccount(context.Context, *QueryGetProtoRevDeveloperAccountRequest) (*QueryGetProtoRevDeveloperAccountResponse, error)
	// GetProtoRevPoolWeights queries the weights of each pool type currently
	// being used by the module
	GetProtoRevPoolWeights(context.Context, *QueryGetProtoRevPoolWeightsRequest) (*QueryGetProtoRevPoolWeightsResponse, error)
	// GetProtoRevMaxPoolPointsPerTx queries the maximum number of pool points
	// that can be consumed per transaction
	GetProtoRevMaxPoolPointsPerTx(context.Context, *QueryGetProtoRevMaxPoolPointsPerTxRequest) (*QueryGetProtoRevMaxPoolPointsPerTxResponse, error)
	// GetProtoRevMaxPoolPointsPerBlock queries the maximum number of pool points
	// that can consumed per block
	GetProtoRevMaxPoolPointsPerBlock(context.Context, *QueryGetProtoRevMaxPoolPointsPerBlockRequest) (*QueryGetProtoRevMaxPoolPointsPerBlockResponse, error)
	// GetProtoRevBaseDenoms queries the base denoms that the module is currently
	// utilizing for arbitrage
	GetProtoRevBaseDenoms(context.Context, *QueryGetProtoRevBaseDenomsRequest) (*QueryGetProtoRevBaseDenomsResponse, error)
	// GetProtoRevEnabled queries whether the module is enabled or not
	GetProtoRevEnabled(context.Context, *QueryGetProtoRevEnabledRequest) (*QueryGetProtoRevEnabledResponse, error)
	// GetProtoRevPool queries the pool id used via the highest liquidity method
	// for arbitrage route building given a pair of denominations
	GetProtoRevPool(context.Context, *QueryGetProtoRevPoolRequest) (*QueryGetProtoRevPoolResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) GetProtoRevNumberOfTrades(ctx context.Context, req *QueryGetProtoRevNumberOfTradesRequest) (*QueryGetProtoRevNumberOfTradesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProtoRevNumberOfTrades not implemented")
}
func (*UnimplementedQueryServer) GetProtoRevProfitsByDenom(ctx context.Context, req *QueryGetProtoRevProfitsByDenomRequest) (*QueryGetProtoRevProfitsByDenomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProtoRevProfitsByDenom not implemented")
}
func (*UnimplementedQueryServer) GetProtoRevAllProfits(ctx context.Context, req *QueryGetProtoRevAllProfitsRequest) (*QueryGetProtoRevAllProfitsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProtoRevAllProfits not implemented")
}
func (*UnimplementedQueryServer) GetProtoRevStatisticsByRoute(ctx context.Context, req *QueryGetProtoRevStatisticsByRouteRequest) (*QueryGetProtoRevStatisticsByRouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProtoRevStatisticsByRoute not implemented")
}
func (*UnimplementedQueryServer) GetProtoRevAllRouteStatistics(ctx context.Context, req *QueryGetProtoRevAllRouteStatisticsRequest) (*QueryGetProtoRevAllRouteStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProtoRevAllRouteStatistics not implemented")
}
func (*UnimplementedQueryServer) GetProtoRevTokenPairArbRoutes(ctx context.Context, req *QueryGetProtoRevTokenPairArbRoutesRequest) (*QueryGetProtoRevTokenPairArbRoutesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProtoRevTokenPairArbRoutes not implemented")
}
func (*UnimplementedQueryServer) GetProtoRevAdminAccount(ctx context.Context, req *QueryGetProtoRevAdminAccountRequest) (*QueryGetProtoRevAdminAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProtoRevAdminAccount not implemented")
}
func (*UnimplementedQueryServer) GetProtoRevDeveloperAccount(ctx context.Context, req *QueryGetProtoRevDeveloperAccountRequest) (*QueryGetProtoRevDeveloperAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProtoRevDeveloperAccount not implemented")
}
func (*UnimplementedQueryServer) GetProtoRevPoolWeights(ctx context.Context, req *QueryGetProtoRevPoolWeightsRequest) (*QueryGetProtoRevPoolWeightsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProtoRevPoolWeights not implemented")
}
func (*UnimplementedQueryServer) GetProtoRevMaxPoolPointsPerTx(ctx context.Context, req *QueryGetProtoRevMaxPoolPointsPerTxRequest) (*QueryGetProtoRevMaxPoolPointsPerTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProtoRevMaxPoolPointsPerTx not implemented")
}
func (*UnimplementedQueryServer) GetProtoRevMaxPoolPointsPerBlock(ctx context.Context, req *QueryGetProtoRevMaxPoolPointsPerBlockRequest) (*QueryGetProtoRevMaxPoolPointsPerBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProtoRevMaxPoolPointsPerBlock not implemented")
}
func (*UnimplementedQueryServer) GetProtoRevBaseDenoms(ctx context.Context, req *QueryGetProtoRevBaseDenomsRequest) (*QueryGetProtoRevBaseDenomsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProtoRevBaseDenoms not implemented")
}
func (*UnimplementedQueryServer) GetProtoRevEnabled(ctx context.Context, req *QueryGetProtoRevEnabledRequest) (*QueryGetProtoRevEnabledResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProtoRevEnabled not implemented")
}
func (*UnimplementedQueryServer) GetProtoRevPool(ctx context.Context, req *QueryGetProtoRevPoolRequest) (*QueryGetProtoRevPoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProtoRevPool not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.protorev.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetProtoRevNumberOfTrades_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProtoRevNumberOfTradesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetProtoRevNumberOfTrades(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.protorev.v1beta1.Query/GetProtoRevNumberOfTrades",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetProtoRevNumberOfTrades(ctx, req.(*QueryGetProtoRevNumberOfTradesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetProtoRevProfitsByDenom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProtoRevProfitsByDenomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetProtoRevProfitsByDenom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.protorev.v1beta1.Query/GetProtoRevProfitsByDenom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetProtoRevProfitsByDenom(ctx, req.(*QueryGetProtoRevProfitsByDenomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetProtoRevAllProfits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProtoRevAllProfitsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetProtoRevAllProfits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.protorev.v1beta1.Query/GetProtoRevAllProfits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetProtoRevAllProfits(ctx, req.(*QueryGetProtoRevAllProfitsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetProtoRevStatisticsByRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProtoRevStatisticsByRouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetProtoRevStatisticsByRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.protorev.v1beta1.Query/GetProtoRevStatisticsByRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetProtoRevStatisticsByRoute(ctx, req.(*QueryGetProtoRevStatisticsByRouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetProtoRevAllRouteStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProtoRevAllRouteStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetProtoRevAllRouteStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.protorev.v1beta1.Query/GetProtoRevAllRouteStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetProtoRevAllRouteStatistics(ctx, req.(*QueryGetProtoRevAllRouteStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetProtoRevTokenPairArbRoutes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProtoRevTokenPairArbRoutesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetProtoRevTokenPairArbRoutes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.protorev.v1beta1.Query/GetProtoRevTokenPairArbRoutes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetProtoRevTokenPairArbRoutes(ctx, req.(*QueryGetProtoRevTokenPairArbRoutesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetProtoRevAdminAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProtoRevAdminAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetProtoRevAdminAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.protorev.v1beta1.Query/GetProtoRevAdminAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetProtoRevAdminAccount(ctx, req.(*QueryGetProtoRevAdminAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetProtoRevDeveloperAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProtoRevDeveloperAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetProtoRevDeveloperAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.protorev.v1beta1.Query/GetProtoRevDeveloperAccount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetProtoRevDeveloperAccount(ctx, req.(*QueryGetProtoRevDeveloperAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetProtoRevPoolWeights_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProtoRevPoolWeightsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetProtoRevPoolWeights(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.protorev.v1beta1.Query/GetProtoRevPoolWeights",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetProtoRevPoolWeights(ctx, req.(*QueryGetProtoRevPoolWeightsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetProtoRevMaxPoolPointsPerTx_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProtoRevMaxPoolPointsPerTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetProtoRevMaxPoolPointsPerTx(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.protorev.v1beta1.Query/GetProtoRevMaxPoolPointsPerTx",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetProtoRevMaxPoolPointsPerTx(ctx, req.(*QueryGetProtoRevMaxPoolPointsPerTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetProtoRevMaxPoolPointsPerBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProtoRevMaxPoolPointsPerBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetProtoRevMaxPoolPointsPerBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.protorev.v1beta1.Query/GetProtoRevMaxPoolPointsPerBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetProtoRevMaxPoolPointsPerBlock(ctx, req.(*QueryGetProtoRevMaxPoolPointsPerBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetProtoRevBaseDenoms_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProtoRevBaseDenomsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetProtoRevBaseDenoms(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.protorev.v1beta1.Query/GetProtoRevBaseDenoms",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetProtoRevBaseDenoms(ctx, req.(*QueryGetProtoRevBaseDenomsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetProtoRevEnabled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProtoRevEnabledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetProtoRevEnabled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.protorev.v1beta1.Query/GetProtoRevEnabled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetProtoRevEnabled(ctx, req.(*QueryGetProtoRevEnabledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetProtoRevPool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProtoRevPoolRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetProtoRevPool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.protorev.v1beta1.Query/GetProtoRevPool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetProtoRevPool(ctx, req.(*QueryGetProtoRevPoolRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "osmosis.protorev.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetProtoRevNumberOfTrades",
			Handler:    _Query_GetProtoRevNumberOfTrades_Handler,
		},
		{
			MethodName: "GetProtoRevProfitsByDenom",
			Handler:    _Query_GetProtoRevProfitsByDenom_Handler,
		},
		{
			MethodName: "GetProtoRevAllProfits",
			Handler:    _Query_GetProtoRevAllProfits_Handler,
		},
		{
			MethodName: "GetProtoRevStatisticsByRoute",
			Handler:    _Query_GetProtoRevStatisticsByRoute_Handler,
		},
		{
			MethodName: "GetProtoRevAllRouteStatistics",
			Handler:    _Query_GetProtoRevAllRouteStatistics_Handler,
		},
		{
			MethodName: "GetProtoRevTokenPairArbRoutes",
			Handler:    _Query_GetProtoRevTokenPairArbRoutes_Handler,
		},
		{
			MethodName: "GetProtoRevAdminAccount",
			Handler:    _Query_GetProtoRevAdminAccount_Handler,
		},
		{
			MethodName: "GetProtoRevDeveloperAccount",
			Handler:    _Query_GetProtoRevDeveloperAccount_Handler,
		},
		{
			MethodName: "GetProtoRevPoolWeights",
			Handler:    _Query_GetProtoRevPoolWeights_Handler,
		},
		{
			MethodName: "GetProtoRevMaxPoolPointsPerTx",
			Handler:    _Query_GetProtoRevMaxPoolPointsPerTx_Handler,
		},
		{
			MethodName: "GetProtoRevMaxPoolPointsPerBlock",
			Handler:    _Query_GetProtoRevMaxPoolPointsPerBlock_Handler,
		},
		{
			MethodName: "GetProtoRevBaseDenoms",
			Handler:    _Query_GetProtoRevBaseDenoms_Handler,
		},
		{
			MethodName: "GetProtoRevEnabled",
			Handler:    _Query_GetProtoRevEnabled_Handler,
		},
		{
			MethodName: "GetProtoRevPool",
			Handler:    _Query_GetProtoRevPool_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "osmosis/protorev/v1beta1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevNumberOfTradesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevNumberOfTradesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevNumberOfTradesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevNumberOfTradesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevNumberOfTradesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevNumberOfTradesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.NumberOfTrades.Size()
		i -= size
		if _, err := m.NumberOfTrades.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevProfitsByDenomRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevProfitsByDenomRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevProfitsByDenomRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevProfitsByDenomResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevProfitsByDenomResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevProfitsByDenomResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Profit != nil {
		{
			size, err := m.Profit.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevAllProfitsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevAllProfitsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevAllProfitsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevAllProfitsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevAllProfitsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevAllProfitsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Profits) > 0 {
		for iNdEx := len(m.Profits) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Profits[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevStatisticsByRouteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevStatisticsByRouteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevStatisticsByRouteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Route) > 0 {
		dAtA4 := make([]byte, len(m.Route)*10)
		var j3 int
		for _, num := range m.Route {
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintQuery(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevStatisticsByRouteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevStatisticsByRouteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevStatisticsByRouteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Statistics.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevAllRouteStatisticsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevAllRouteStatisticsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevAllRouteStatisticsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevAllRouteStatisticsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevAllRouteStatisticsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevAllRouteStatisticsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Statistics) > 0 {
		for iNdEx := len(m.Statistics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Statistics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevTokenPairArbRoutesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevTokenPairArbRoutesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevTokenPairArbRoutesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevTokenPairArbRoutesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevTokenPairArbRoutesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevTokenPairArbRoutesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Routes) > 0 {
		for iNdEx := len(m.Routes) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Routes[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevAdminAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevAdminAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevAdminAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevAdminAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevAdminAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevAdminAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AdminAccount) > 0 {
		i -= len(m.AdminAccount)
		copy(dAtA[i:], m.AdminAccount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AdminAccount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevDeveloperAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevDeveloperAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevDeveloperAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevDeveloperAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevDeveloperAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevDeveloperAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DeveloperAccount) > 0 {
		i -= len(m.DeveloperAccount)
		copy(dAtA[i:], m.DeveloperAccount)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DeveloperAccount)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevPoolWeightsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevPoolWeightsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevPoolWeightsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevPoolWeightsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevPoolWeightsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevPoolWeightsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.PoolWeights.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevMaxPoolPointsPerBlockRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevMaxPoolPointsPerBlockRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevMaxPoolPointsPerBlockRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevMaxPoolPointsPerBlockResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevMaxPoolPointsPerBlockResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevMaxPoolPointsPerBlockResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxPoolPointsPerBlock != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MaxPoolPointsPerBlock))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevMaxPoolPointsPerTxRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevMaxPoolPointsPerTxRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevMaxPoolPointsPerTxRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevMaxPoolPointsPerTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevMaxPoolPointsPerTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevMaxPoolPointsPerTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MaxPoolPointsPerTx != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.MaxPoolPointsPerTx))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevBaseDenomsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevBaseDenomsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevBaseDenomsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevBaseDenomsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevBaseDenomsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevBaseDenomsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BaseDenoms) > 0 {
		for iNdEx := len(m.BaseDenoms) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.BaseDenoms[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevEnabledRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevEnabledRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevEnabledRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevEnabledResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevEnabledResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevEnabledResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevPoolRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevPoolRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevPoolRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OtherDenom) > 0 {
		i -= len(m.OtherDenom)
		copy(dAtA[i:], m.OtherDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OtherDenom)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BaseDenom) > 0 {
		i -= len(m.BaseDenom)
		copy(dAtA[i:], m.BaseDenom)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BaseDenom)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProtoRevPoolResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProtoRevPoolResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProtoRevPoolResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetProtoRevNumberOfTradesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetProtoRevNumberOfTradesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.NumberOfTrades.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetProtoRevProfitsByDenomRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProtoRevProfitsByDenomResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Profit != nil {
		l = m.Profit.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProtoRevAllProfitsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetProtoRevAllProfitsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Profits) > 0 {
		for _, e := range m.Profits {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetProtoRevStatisticsByRouteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Route) > 0 {
		l = 0
		for _, e := range m.Route {
			l += sovQuery(uint64(e))
		}
		n += 1 + sovQuery(uint64(l)) + l
	}
	return n
}

func (m *QueryGetProtoRevStatisticsByRouteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Statistics.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetProtoRevAllRouteStatisticsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetProtoRevAllRouteStatisticsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Statistics) > 0 {
		for _, e := range m.Statistics {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetProtoRevTokenPairArbRoutesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetProtoRevTokenPairArbRoutesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Routes) > 0 {
		for _, e := range m.Routes {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetProtoRevAdminAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetProtoRevAdminAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AdminAccount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProtoRevDeveloperAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetProtoRevDeveloperAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DeveloperAccount)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProtoRevPoolWeightsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetProtoRevPoolWeightsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.PoolWeights.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetProtoRevMaxPoolPointsPerBlockRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetProtoRevMaxPoolPointsPerBlockResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxPoolPointsPerBlock != 0 {
		n += 1 + sovQuery(uint64(m.MaxPoolPointsPerBlock))
	}
	return n
}

func (m *QueryGetProtoRevMaxPoolPointsPerTxRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetProtoRevMaxPoolPointsPerTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxPoolPointsPerTx != 0 {
		n += 1 + sovQuery(uint64(m.MaxPoolPointsPerTx))
	}
	return n
}

func (m *QueryGetProtoRevBaseDenomsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetProtoRevBaseDenomsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BaseDenoms) > 0 {
		for _, e := range m.BaseDenoms {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetProtoRevEnabledRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetProtoRevEnabledResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	return n
}

func (m *QueryGetProtoRevPoolRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BaseDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.OtherDenom)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProtoRevPoolResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevNumberOfTradesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevNumberOfTradesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevNumberOfTradesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevNumberOfTradesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevNumberOfTradesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevNumberOfTradesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfTrades", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.NumberOfTrades.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevProfitsByDenomRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevProfitsByDenomRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevProfitsByDenomRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevProfitsByDenomResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevProfitsByDenomResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevProfitsByDenomResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Profit == nil {
				m.Profit = &types.Coin{}
			}
			if err := m.Profit.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevAllProfitsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevAllProfitsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevAllProfitsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevAllProfitsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevAllProfitsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevAllProfitsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Profits", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Profits = append(m.Profits, types.Coin{})
			if err := m.Profits[len(m.Profits)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevStatisticsByRouteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevStatisticsByRouteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevStatisticsByRouteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Route = append(m.Route, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowQuery
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthQuery
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthQuery
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Route) == 0 {
					m.Route = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowQuery
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Route = append(m.Route, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Route", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevStatisticsByRouteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevStatisticsByRouteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevStatisticsByRouteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statistics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Statistics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevAllRouteStatisticsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevAllRouteStatisticsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevAllRouteStatisticsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevAllRouteStatisticsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevAllRouteStatisticsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevAllRouteStatisticsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statistics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statistics = append(m.Statistics, RouteStatistics{})
			if err := m.Statistics[len(m.Statistics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevTokenPairArbRoutesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevTokenPairArbRoutesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevTokenPairArbRoutesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevTokenPairArbRoutesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevTokenPairArbRoutesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevTokenPairArbRoutesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Routes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Routes = append(m.Routes, TokenPairArbRoutes{})
			if err := m.Routes[len(m.Routes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevAdminAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevAdminAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevAdminAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevAdminAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevAdminAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevAdminAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AdminAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AdminAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevDeveloperAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevDeveloperAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevDeveloperAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevDeveloperAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevDeveloperAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevDeveloperAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeveloperAccount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeveloperAccount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevPoolWeightsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevPoolWeightsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevPoolWeightsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevPoolWeightsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevPoolWeightsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevPoolWeightsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolWeights", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolWeights.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevMaxPoolPointsPerBlockRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevMaxPoolPointsPerBlockRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevMaxPoolPointsPerBlockRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevMaxPoolPointsPerBlockResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevMaxPoolPointsPerBlockResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevMaxPoolPointsPerBlockResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPoolPointsPerBlock", wireType)
			}
			m.MaxPoolPointsPerBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPoolPointsPerBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevMaxPoolPointsPerTxRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevMaxPoolPointsPerTxRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevMaxPoolPointsPerTxRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevMaxPoolPointsPerTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevMaxPoolPointsPerTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevMaxPoolPointsPerTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxPoolPointsPerTx", wireType)
			}
			m.MaxPoolPointsPerTx = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxPoolPointsPerTx |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevBaseDenomsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevBaseDenomsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevBaseDenomsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevBaseDenomsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevBaseDenomsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevBaseDenomsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenoms", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenoms = append(m.BaseDenoms, BaseDenom{})
			if err := m.BaseDenoms[len(m.BaseDenoms)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevEnabledRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevEnabledRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevEnabledRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevEnabledResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevEnabledResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevEnabledResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevPoolRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevPoolRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevPoolRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BaseDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BaseDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherDenom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OtherDenom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProtoRevPoolResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProtoRevPoolResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProtoRevPoolResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
