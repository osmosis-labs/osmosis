// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/incentives/params.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params holds parameters for the incentives module
type Params struct {
	// distr_epoch_identifier is what epoch type distribution will be triggered by
	// (day, week, etc.)
	DistrEpochIdentifier string `protobuf:"bytes,1,opt,name=distr_epoch_identifier,json=distrEpochIdentifier,proto3" json:"distr_epoch_identifier,omitempty" yaml:"distr_epoch_identifier"`
	// group_creation_fee is the fee required to create a new group
	// It is only charged to all addresses other than incentive module account
	// or addresses in the unrestricted_creator_whitelist
	GroupCreationFee github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=group_creation_fee,json=groupCreationFee,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"group_creation_fee"`
	// unrestricted_creator_whitelist is a list of addresses that are
	// allowed to bypass restrictions on permissionless Group
	// creation. In the future, we might expand these to creating gauges
	// as well.
	// The goal of this is to allow a subdao to manage incentives efficiently
	// without being stopped by 5 day governance process or a high fee.
	// At the same time, it prevents spam by having a fee for all
	// other users.
	UnrestrictedCreatorWhitelist []string `protobuf:"bytes,3,rep,name=unrestricted_creator_whitelist,json=unrestrictedCreatorWhitelist,proto3" json:"unrestricted_creator_whitelist,omitempty" yaml:"unrestricted_creator_whitelist"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_1cc8b460d089f845, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetDistrEpochIdentifier() string {
	if m != nil {
		return m.DistrEpochIdentifier
	}
	return ""
}

func (m *Params) GetGroupCreationFee() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.GroupCreationFee
	}
	return nil
}

func (m *Params) GetUnrestrictedCreatorWhitelist() []string {
	if m != nil {
		return m.UnrestrictedCreatorWhitelist
	}
	return nil
}

func init() {
	proto.RegisterType((*Params)(nil), "osmosis.incentives.Params")
}

func init() { proto.RegisterFile("osmosis/incentives/params.proto", fileDescriptor_1cc8b460d089f845) }

var fileDescriptor_1cc8b460d089f845 = []byte{
	// 365 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xcf, 0x6a, 0xea, 0x40,
	0x14, 0xc6, 0x13, 0x05, 0xc1, 0xdc, 0xcd, 0x25, 0xc8, 0xc5, 0x2b, 0xed, 0xc4, 0x06, 0x0a, 0xe9,
	0xc2, 0x8c, 0x5a, 0xe8, 0xa2, 0xcb, 0x48, 0x0b, 0xdd, 0x89, 0x1b, 0xa1, 0x9b, 0x90, 0x3f, 0xc7,
	0x38, 0xd4, 0x64, 0xc2, 0xcc, 0x68, 0xeb, 0x5b, 0xf4, 0x39, 0xfa, 0x24, 0x6e, 0x0a, 0x2e, 0xbb,
	0xb2, 0x45, 0xdf, 0xc0, 0x27, 0x28, 0x99, 0x89, 0xad, 0x8b, 0xd2, 0xd5, 0xcc, 0x9c, 0xef, 0x37,
	0xe7, 0x7c, 0x1f, 0xc7, 0xb0, 0x28, 0x4f, 0x29, 0x27, 0x1c, 0x93, 0x2c, 0x82, 0x4c, 0x90, 0x05,
	0x70, 0x9c, 0x07, 0x2c, 0x48, 0xb9, 0x9b, 0x33, 0x2a, 0xa8, 0x69, 0x96, 0x80, 0xfb, 0x0d, 0xb4,
	0x1a, 0x09, 0x4d, 0xa8, 0x94, 0x71, 0x71, 0x53, 0x64, 0x0b, 0x45, 0x12, 0xc5, 0x61, 0xc0, 0x01,
	0x2f, 0x7a, 0x21, 0x88, 0xa0, 0x87, 0x23, 0x4a, 0x32, 0xa5, 0xdb, 0xaf, 0x15, 0xa3, 0x36, 0x94,
	0xad, 0xcd, 0xb1, 0xf1, 0x2f, 0x26, 0x5c, 0x30, 0x1f, 0x72, 0x1a, 0x4d, 0x7d, 0x12, 0x17, 0x9d,
	0x27, 0x04, 0x58, 0x53, 0x6f, 0xeb, 0x4e, 0xdd, 0x3b, 0xdb, 0x6f, 0xac, 0xd3, 0x65, 0x90, 0xce,
	0xae, 0xed, 0x9f, 0x39, 0x7b, 0xd4, 0x90, 0xc2, 0x4d, 0x51, 0xbf, 0xfb, 0x2a, 0x9b, 0x4b, 0xc3,
	0x4c, 0x18, 0x9d, 0xe7, 0x7e, 0xc4, 0x20, 0x10, 0x84, 0x66, 0xfe, 0x04, 0xa0, 0x59, 0x69, 0x57,
	0x9d, 0x3f, 0xfd, 0xff, 0xae, 0x32, 0xe8, 0x16, 0x06, 0xdd, 0xd2, 0xa0, 0x3b, 0xa0, 0x24, 0xf3,
	0xba, 0xab, 0x8d, 0xa5, 0xbd, 0xbc, 0x5b, 0x4e, 0x42, 0xc4, 0x74, 0x1e, 0xba, 0x11, 0x4d, 0x71,
	0x99, 0x46, 0x1d, 0x1d, 0x1e, 0x3f, 0x60, 0xb1, 0xcc, 0x81, 0xcb, 0x0f, 0x7c, 0xf4, 0x57, 0x8e,
	0x19, 0x94, 0x53, 0x6e, 0x01, 0x4c, 0x6a, 0xa0, 0x79, 0xc6, 0x80, 0x0b, 0x46, 0x22, 0x01, 0xb1,
	0x72, 0x40, 0x99, 0xff, 0x38, 0x25, 0x02, 0x66, 0x84, 0x8b, 0x66, 0xb5, 0x5d, 0x75, 0xea, 0xde,
	0xc5, 0x7e, 0x63, 0x9d, 0xab, 0x6c, 0xbf, 0xf3, 0xf6, 0xe8, 0xe4, 0x18, 0x18, 0x28, 0x7d, 0x7c,
	0x90, 0xbd, 0xe1, 0x6a, 0x8b, 0xf4, 0xf5, 0x16, 0xe9, 0x1f, 0x5b, 0xa4, 0x3f, 0xef, 0x90, 0xb6,
	0xde, 0x21, 0xed, 0x6d, 0x87, 0xb4, 0xfb, 0xab, 0xa3, 0x18, 0xe5, 0xfa, 0x3a, 0xb3, 0x20, 0xe4,
	0x87, 0x07, 0x5e, 0xf4, 0xbb, 0xf8, 0xe9, 0x78, 0xe5, 0x32, 0x5a, 0x58, 0x93, 0x8b, 0xba, 0xfc,
	0x0c, 0x00, 0x00, 0xff, 0xff, 0xc6, 0x57, 0x0a, 0x8a, 0x15, 0x02, 0x00, 0x00,
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnrestrictedCreatorWhitelist) > 0 {
		for iNdEx := len(m.UnrestrictedCreatorWhitelist) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.UnrestrictedCreatorWhitelist[iNdEx])
			copy(dAtA[i:], m.UnrestrictedCreatorWhitelist[iNdEx])
			i = encodeVarintParams(dAtA, i, uint64(len(m.UnrestrictedCreatorWhitelist[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.GroupCreationFee) > 0 {
		for iNdEx := len(m.GroupCreationFee) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.GroupCreationFee[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintParams(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.DistrEpochIdentifier) > 0 {
		i -= len(m.DistrEpochIdentifier)
		copy(dAtA[i:], m.DistrEpochIdentifier)
		i = encodeVarintParams(dAtA, i, uint64(len(m.DistrEpochIdentifier)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintParams(dAtA []byte, offset int, v uint64) int {
	offset -= sovParams(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DistrEpochIdentifier)
	if l > 0 {
		n += 1 + l + sovParams(uint64(l))
	}
	if len(m.GroupCreationFee) > 0 {
		for _, e := range m.GroupCreationFee {
			l = e.Size()
			n += 1 + l + sovParams(uint64(l))
		}
	}
	if len(m.UnrestrictedCreatorWhitelist) > 0 {
		for _, s := range m.UnrestrictedCreatorWhitelist {
			l = len(s)
			n += 1 + l + sovParams(uint64(l))
		}
	}
	return n
}

func sovParams(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozParams(x uint64) (n int) {
	return sovParams(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowParams
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DistrEpochIdentifier", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DistrEpochIdentifier = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GroupCreationFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GroupCreationFee = append(m.GroupCreationFee, types.Coin{})
			if err := m.GroupCreationFee[len(m.GroupCreationFee)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnrestrictedCreatorWhitelist", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowParams
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthParams
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthParams
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnrestrictedCreatorWhitelist = append(m.UnrestrictedCreatorWhitelist, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipParams(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthParams
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipParams(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowParams
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowParams
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthParams
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupParams
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthParams
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthParams        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowParams          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupParams = fmt.Errorf("proto: unexpected end of group")
)
