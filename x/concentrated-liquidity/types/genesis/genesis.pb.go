// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/concentrated-liquidity/genesis.proto

package genesis

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	_ "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	accum "github.com/osmosis-labs/osmosis/osmoutils/accum"
	model "github.com/osmosis-labs/osmosis/v15/x/concentrated-liquidity/model"
	types1 "github.com/osmosis-labs/osmosis/v15/x/concentrated-liquidity/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// FullTick contains tick index and pool id along with other tick model
// information.
type FullTick struct {
	// pool id associated with the tick.
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	// tick's index.
	TickIndex int64 `protobuf:"varint,2,opt,name=tick_index,json=tickIndex,proto3" json:"tick_index,omitempty" yaml:"tick_index"`
	// tick's info.
	Info model.TickInfo `protobuf:"bytes,3,opt,name=info,proto3" json:"info" yaml:"tick_info"`
}

func (m *FullTick) Reset()         { *m = FullTick{} }
func (m *FullTick) String() string { return proto.CompactTextString(m) }
func (*FullTick) ProtoMessage()    {}
func (*FullTick) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c140d686ee6724a, []int{0}
}
func (m *FullTick) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *FullTick) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_FullTick.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *FullTick) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FullTick.Merge(m, src)
}
func (m *FullTick) XXX_Size() int {
	return m.Size()
}
func (m *FullTick) XXX_DiscardUnknown() {
	xxx_messageInfo_FullTick.DiscardUnknown(m)
}

var xxx_messageInfo_FullTick proto.InternalMessageInfo

func (m *FullTick) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *FullTick) GetTickIndex() int64 {
	if m != nil {
		return m.TickIndex
	}
	return 0
}

func (m *FullTick) GetInfo() model.TickInfo {
	if m != nil {
		return m.Info
	}
	return model.TickInfo{}
}

// PoolData represents a serialized pool along with its ticks
// for genesis state.
type PoolData struct {
	// pool struct
	Pool *types.Any `protobuf:"bytes,1,opt,name=pool,proto3" json:"pool,omitempty"`
	// pool's ticks
	Ticks                  []FullTick    `protobuf:"bytes,2,rep,name=ticks,proto3" json:"ticks" yaml:"ticks"`
	FeeAccumulator         AccumObject   `protobuf:"bytes,3,opt,name=fee_accumulator,json=feeAccumulator,proto3" json:"fee_accumulator" yaml:"fee_accumulator"`
	IncentivesAccumulators []AccumObject `protobuf:"bytes,4,rep,name=incentives_accumulators,json=incentivesAccumulators,proto3" json:"incentives_accumulators" yaml:"incentives_accumulator"`
	// incentive records to be set
	IncentiveRecords []types1.IncentiveRecord `protobuf:"bytes,5,rep,name=incentive_records,json=incentiveRecords,proto3" json:"incentive_records"`
}

func (m *PoolData) Reset()         { *m = PoolData{} }
func (m *PoolData) String() string { return proto.CompactTextString(m) }
func (*PoolData) ProtoMessage()    {}
func (*PoolData) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c140d686ee6724a, []int{1}
}
func (m *PoolData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolData.Merge(m, src)
}
func (m *PoolData) XXX_Size() int {
	return m.Size()
}
func (m *PoolData) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolData.DiscardUnknown(m)
}

var xxx_messageInfo_PoolData proto.InternalMessageInfo

func (m *PoolData) GetPool() *types.Any {
	if m != nil {
		return m.Pool
	}
	return nil
}

func (m *PoolData) GetTicks() []FullTick {
	if m != nil {
		return m.Ticks
	}
	return nil
}

func (m *PoolData) GetFeeAccumulator() AccumObject {
	if m != nil {
		return m.FeeAccumulator
	}
	return AccumObject{}
}

func (m *PoolData) GetIncentivesAccumulators() []AccumObject {
	if m != nil {
		return m.IncentivesAccumulators
	}
	return nil
}

func (m *PoolData) GetIncentiveRecords() []types1.IncentiveRecord {
	if m != nil {
		return m.IncentiveRecords
	}
	return nil
}

type PositionData struct {
	Position       *model.Position `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	LockId         uint64          `protobuf:"varint,2,opt,name=lock_id,json=lockId,proto3" json:"lock_id,omitempty" yaml:"lock_id"`
	FeeAccumRecord accum.Record    `protobuf:"bytes,3,opt,name=fee_accum_record,json=feeAccumRecord,proto3" json:"fee_accum_record"`
}

func (m *PositionData) Reset()         { *m = PositionData{} }
func (m *PositionData) String() string { return proto.CompactTextString(m) }
func (*PositionData) ProtoMessage()    {}
func (*PositionData) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c140d686ee6724a, []int{2}
}
func (m *PositionData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PositionData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PositionData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PositionData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionData.Merge(m, src)
}
func (m *PositionData) XXX_Size() int {
	return m.Size()
}
func (m *PositionData) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionData.DiscardUnknown(m)
}

var xxx_messageInfo_PositionData proto.InternalMessageInfo

func (m *PositionData) GetPosition() *model.Position {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *PositionData) GetLockId() uint64 {
	if m != nil {
		return m.LockId
	}
	return 0
}

func (m *PositionData) GetFeeAccumRecord() accum.Record {
	if m != nil {
		return m.FeeAccumRecord
	}
	return accum.Record{}
}

// GenesisState defines the concentrated liquidity module's genesis state.
type GenesisState struct {
	// params are all the parameters of the module
	Params types1.Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
	// pool data containining serialized pool struct and ticks.
	PoolData       []PoolData     `protobuf:"bytes,2,rep,name=pool_data,json=poolData,proto3" json:"pool_data"`
	PositionData   []PositionData `protobuf:"bytes,3,rep,name=position_data,json=positionData,proto3" json:"position_data"`
	NextPositionId uint64         `protobuf:"varint,4,opt,name=next_position_id,json=nextPositionId,proto3" json:"next_position_id,omitempty" yaml:"next_position_id"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c140d686ee6724a, []int{3}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetParams() types1.Params {
	if m != nil {
		return m.Params
	}
	return types1.Params{}
}

func (m *GenesisState) GetPoolData() []PoolData {
	if m != nil {
		return m.PoolData
	}
	return nil
}

func (m *GenesisState) GetPositionData() []PositionData {
	if m != nil {
		return m.PositionData
	}
	return nil
}

func (m *GenesisState) GetNextPositionId() uint64 {
	if m != nil {
		return m.NextPositionId
	}
	return 0
}

type AccumObject struct {
	// Accumulator's name (pulled from AccumulatorContent)
	Name         string                    `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" yaml:"name"`
	AccumContent *accum.AccumulatorContent `protobuf:"bytes,2,opt,name=accum_content,json=accumContent,proto3" json:"accum_content,omitempty"`
}

func (m *AccumObject) Reset()         { *m = AccumObject{} }
func (m *AccumObject) String() string { return proto.CompactTextString(m) }
func (*AccumObject) ProtoMessage()    {}
func (*AccumObject) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c140d686ee6724a, []int{4}
}
func (m *AccumObject) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccumObject) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccumObject.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccumObject) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccumObject.Merge(m, src)
}
func (m *AccumObject) XXX_Size() int {
	return m.Size()
}
func (m *AccumObject) XXX_DiscardUnknown() {
	xxx_messageInfo_AccumObject.DiscardUnknown(m)
}

var xxx_messageInfo_AccumObject proto.InternalMessageInfo

func (m *AccumObject) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *AccumObject) GetAccumContent() *accum.AccumulatorContent {
	if m != nil {
		return m.AccumContent
	}
	return nil
}

func init() {
	proto.RegisterType((*FullTick)(nil), "osmosis.concentratedliquidity.v1beta1.FullTick")
	proto.RegisterType((*PoolData)(nil), "osmosis.concentratedliquidity.v1beta1.PoolData")
	proto.RegisterType((*PositionData)(nil), "osmosis.concentratedliquidity.v1beta1.PositionData")
	proto.RegisterType((*GenesisState)(nil), "osmosis.concentratedliquidity.v1beta1.GenesisState")
	proto.RegisterType((*AccumObject)(nil), "osmosis.concentratedliquidity.v1beta1.AccumObject")
}

func init() {
	proto.RegisterFile("osmosis/concentrated-liquidity/genesis.proto", fileDescriptor_5c140d686ee6724a)
}

var fileDescriptor_5c140d686ee6724a = []byte{
	// 805 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xdd, 0x4e, 0xe3, 0x46,
	0x14, 0x8e, 0x89, 0x49, 0x93, 0x49, 0x80, 0x60, 0x51, 0x70, 0xa9, 0x70, 0x52, 0x57, 0x48, 0x54,
	0x34, 0xb6, 0x08, 0xa5, 0x17, 0xbd, 0xc3, 0xf4, 0x47, 0x69, 0xd5, 0x16, 0xb9, 0x5c, 0xb5, 0x6a,
	0xa3, 0x89, 0x3d, 0x49, 0xa7, 0x38, 0x9e, 0x34, 0x33, 0x41, 0x89, 0x7a, 0xd7, 0x27, 0x58, 0xed,
	0xdd, 0xbe, 0xc7, 0x3e, 0x04, 0x5a, 0xad, 0x56, 0xdc, 0xed, 0x5e, 0x45, 0x2b, 0x78, 0x83, 0x3c,
	0xc1, 0xca, 0xf3, 0xe3, 0x24, 0x68, 0x51, 0xc2, 0xde, 0x79, 0xe6, 0x7c, 0xe7, 0x3b, 0xdf, 0xf9,
	0x1b, 0x83, 0x2f, 0x09, 0xed, 0x12, 0x8a, 0xa9, 0x1b, 0x90, 0x38, 0x40, 0x31, 0xeb, 0x43, 0x86,
	0xc2, 0x5a, 0x84, 0xff, 0x1d, 0xe0, 0x10, 0xb3, 0x91, 0xdb, 0x41, 0x31, 0xa2, 0x98, 0x3a, 0xbd,
	0x3e, 0x61, 0xc4, 0xd8, 0x97, 0x68, 0x67, 0x16, 0x9d, 0x82, 0x9d, 0xab, 0xa3, 0x16, 0x62, 0xf0,
	0x68, 0x77, 0xab, 0x43, 0x3a, 0x84, 0x7b, 0xb8, 0xc9, 0x97, 0x70, 0xde, 0xfd, 0x24, 0xe0, 0xde,
	0x4d, 0x61, 0x10, 0x07, 0x69, 0xb2, 0xc4, 0xc9, 0x6d, 0x41, 0x8a, 0x5c, 0xc9, 0xe2, 0x06, 0x04,
	0xc7, 0xca, 0xb5, 0x43, 0x48, 0x27, 0x42, 0x2e, 0x3f, 0xb5, 0x06, 0x6d, 0x17, 0xc6, 0x23, 0x69,
	0xfa, 0x4c, 0x25, 0x00, 0x83, 0x60, 0xd0, 0x4d, 0x9d, 0xf9, 0x49, 0x42, 0x0e, 0x17, 0xe4, 0xd8,
	0x83, 0x7d, 0xd8, 0x55, 0x52, 0x6a, 0x8b, 0xc0, 0x84, 0x62, 0x86, 0x49, 0xbc, 0x24, 0x9c, 0xe1,
	0xe0, 0xb2, 0x11, 0xb7, 0x55, 0x0d, 0x4e, 0x16, 0xc0, 0x31, 0xbf, 0xc5, 0x57, 0xa8, 0xd9, 0x47,
	0x01, 0xe9, 0x87, 0xc2, 0xcd, 0x7e, 0xa9, 0x81, 0xfc, 0xf7, 0x83, 0x28, 0xba, 0xc0, 0xc1, 0xa5,
	0x71, 0x08, 0x3e, 0xea, 0x11, 0x12, 0x35, 0x71, 0x68, 0x6a, 0x55, 0xed, 0x40, 0xf7, 0x8c, 0xc9,
	0xb8, 0xb2, 0x3e, 0x82, 0xdd, 0xe8, 0x1b, 0x5b, 0x1a, 0x6c, 0x3f, 0x97, 0x7c, 0x35, 0x42, 0xe3,
	0x2b, 0x00, 0x12, 0x09, 0x4d, 0x1c, 0x87, 0x68, 0x68, 0xae, 0x54, 0xb5, 0x83, 0xac, 0xf7, 0xf1,
	0x64, 0x5c, 0xd9, 0x14, 0xf8, 0xa9, 0xcd, 0xf6, 0x0b, 0x42, 0x6b, 0x88, 0x86, 0xc6, 0x9f, 0x40,
	0xc7, 0x71, 0x9b, 0x98, 0xd9, 0xaa, 0x76, 0x50, 0xac, 0xbb, 0xce, 0x52, 0x6d, 0x77, 0x2e, 0x64,
	0xae, 0x9e, 0x79, 0x3d, 0xae, 0x64, 0x26, 0xe3, 0x4a, 0x79, 0x2e, 0x48, 0x9b, 0xd8, 0x3e, 0xa7,
	0xb5, 0x9f, 0xe9, 0x20, 0x7f, 0x4e, 0x48, 0xf4, 0x2d, 0x64, 0xd0, 0x38, 0x06, 0x7a, 0xa2, 0x95,
	0xe7, 0x52, 0xac, 0x6f, 0x39, 0xa2, 0xd5, 0x8e, 0x6a, 0xb5, 0x73, 0x1a, 0x8f, 0xbc, 0xc2, 0x8b,
	0xe7, 0xb5, 0xd5, 0xc4, 0xa3, 0xe1, 0x73, 0xb0, 0xf1, 0x07, 0x58, 0x4d, 0x58, 0xa9, 0xb9, 0x52,
	0xcd, 0x3e, 0x42, 0xa1, 0xaa, 0xa1, 0xb7, 0x25, 0x15, 0x96, 0xa6, 0x0a, 0xa9, 0xed, 0x0b, 0x4e,
	0xe3, 0x3f, 0xb0, 0xd1, 0x46, 0xa8, 0xc9, 0x47, 0x68, 0x10, 0x41, 0x46, 0xfa, 0xb2, 0x10, 0xf5,
	0x25, 0xc3, 0x9c, 0x26, 0x9e, 0xbf, 0xb6, 0xfe, 0x41, 0x01, 0xf3, 0x2c, 0x19, 0x69, 0x5b, 0x44,
	0xba, 0x47, 0x6c, 0xfb, 0xeb, 0x6d, 0x84, 0x4e, 0xa7, 0x17, 0xc6, 0x53, 0x0d, 0xec, 0xa4, 0x53,
	0x40, 0x67, 0xb1, 0xd4, 0xd4, 0x79, 0xb2, 0x1f, 0xa2, 0x62, 0x5f, 0xaa, 0xd8, 0x13, 0x2a, 0xde,
	0x1f, 0xc0, 0xf6, 0xb7, 0xa7, 0x86, 0x19, 0x4d, 0xd4, 0xc0, 0x60, 0xf3, 0xfe, 0x64, 0x52, 0x73,
	0x95, 0xab, 0xf9, 0x7a, 0x49, 0x35, 0x0d, 0xe5, 0xef, 0x73, 0x77, 0x4f, 0x4f, 0x14, 0xf9, 0x65,
	0x3c, 0x7f, 0x4d, 0xed, 0xd7, 0x1a, 0x28, 0x9d, 0xcb, 0x1d, 0xe3, 0xf3, 0xf1, 0x13, 0xc8, 0xab,
	0x9d, 0x93, 0x33, 0xb2, 0x6c, 0xb7, 0x15, 0x8d, 0x9f, 0x12, 0x24, 0xbb, 0x13, 0x91, 0x64, 0x1a,
	0x43, 0xbe, 0x0b, 0x73, 0xbb, 0x23, 0x0d, 0xb6, 0x9f, 0x4b, 0xbe, 0x1a, 0xa1, 0xf1, 0x33, 0x28,
	0xa7, 0xed, 0x92, 0x59, 0xcb, 0x41, 0xd8, 0x4b, 0x15, 0x88, 0x77, 0x46, 0x45, 0x9c, 0xcb, 0x2d,
	0xed, 0xac, 0xb8, 0xb5, 0x5f, 0xad, 0x80, 0xd2, 0x0f, 0xe2, 0x39, 0xfd, 0x8d, 0x41, 0x86, 0x8c,
	0x33, 0x90, 0x13, 0x4f, 0x8f, 0xcc, 0x6b, 0x7f, 0x41, 0x5e, 0xe7, 0x1c, 0x2c, 0xd9, 0xa5, 0xab,
	0xe1, 0x83, 0x02, 0x5f, 0xfa, 0x10, 0x32, 0xf8, 0xc8, 0x6d, 0x50, 0x2b, 0x28, 0x19, 0xf3, 0x3d,
	0xb5, 0x92, 0x7f, 0x81, 0x35, 0x55, 0x31, 0xc1, 0x9b, 0xe5, 0xbc, 0xc7, 0x8f, 0xac, 0xfb, 0x0c,
	0x77, 0xa9, 0x37, 0xdb, 0xd2, 0xef, 0x40, 0x39, 0x46, 0x43, 0xd6, 0x4c, 0x83, 0xe0, 0xd0, 0xd4,
	0x79, 0x3b, 0x3e, 0x9d, 0x8c, 0x2b, 0x3b, 0xa2, 0x1d, 0xf7, 0x11, 0xb6, 0xbf, 0x9e, 0x5c, 0x29,
	0xf2, 0x46, 0x68, 0xff, 0xaf, 0x81, 0xe2, 0xcc, 0x90, 0x1b, 0x9f, 0x03, 0x3d, 0x86, 0x5d, 0xc4,
	0xab, 0x59, 0xf0, 0x36, 0x26, 0xe3, 0x4a, 0x51, 0x52, 0xc1, 0x2e, 0xb2, 0x7d, 0x6e, 0x34, 0x7e,
	0x01, 0x6b, 0xa2, 0xa1, 0x01, 0x89, 0x19, 0x8a, 0x19, 0x9f, 0x83, 0x62, 0xfd, 0x8b, 0x07, 0x3a,
	0x3a, 0xb3, 0x06, 0x67, 0xc2, 0xc1, 0x2f, 0x71, 0x84, 0x3c, 0x79, 0xe1, 0xf5, 0xad, 0xa5, 0xdd,
	0xdc, 0x5a, 0xda, 0xdb, 0x5b, 0x4b, 0x7b, 0x72, 0x67, 0x65, 0x6e, 0xee, 0xac, 0xcc, 0x9b, 0x3b,
	0x2b, 0xf3, 0xfb, 0x8f, 0x1d, 0xcc, 0xfe, 0x1e, 0xb4, 0x9c, 0x80, 0x74, 0x5d, 0x49, 0x5e, 0x8b,
	0x60, 0x8b, 0xaa, 0x83, 0x7b, 0x75, 0x74, 0xe2, 0x0e, 0x1f, 0xfc, 0x71, 0x8c, 0x7a, 0x88, 0xaa,
	0xdf, 0x6f, 0x2b, 0xc7, 0x9f, 0xc3, 0xe3, 0x77, 0x01, 0x00, 0x00, 0xff, 0xff, 0x06, 0x88, 0x43,
	0xca, 0xaf, 0x07, 0x00, 0x00,
}

func (m *FullTick) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FullTick) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *FullTick) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Info.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.TickIndex != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.TickIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PoolData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IncentiveRecords) > 0 {
		for iNdEx := len(m.IncentiveRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IncentiveRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.IncentivesAccumulators) > 0 {
		for iNdEx := len(m.IncentivesAccumulators) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IncentivesAccumulators[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size, err := m.FeeAccumulator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Ticks) > 0 {
		for iNdEx := len(m.Ticks) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ticks[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Pool != nil {
		{
			size, err := m.Pool.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PositionData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PositionData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PositionData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.FeeAccumRecord.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.LockId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LockId))
		i--
		dAtA[i] = 0x10
	}
	if m.Position != nil {
		{
			size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextPositionId != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.NextPositionId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.PositionData) > 0 {
		for iNdEx := len(m.PositionData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PositionData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.PoolData) > 0 {
		for iNdEx := len(m.PoolData) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolData[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *AccumObject) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccumObject) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccumObject) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccumContent != nil {
		{
			size, err := m.AccumContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGenesis(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *FullTick) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovGenesis(uint64(m.PoolId))
	}
	if m.TickIndex != 0 {
		n += 1 + sovGenesis(uint64(m.TickIndex))
	}
	l = m.Info.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *PoolData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pool != nil {
		l = m.Pool.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	if len(m.Ticks) > 0 {
		for _, e := range m.Ticks {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	l = m.FeeAccumulator.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.IncentivesAccumulators) > 0 {
		for _, e := range m.IncentivesAccumulators {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.IncentiveRecords) > 0 {
		for _, e := range m.IncentiveRecords {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *PositionData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Position != nil {
		l = m.Position.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.LockId != 0 {
		n += 1 + sovGenesis(uint64(m.LockId))
	}
	l = m.FeeAccumRecord.Size()
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if len(m.PoolData) > 0 {
		for _, e := range m.PoolData {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.PositionData) > 0 {
		for _, e := range m.PositionData {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if m.NextPositionId != 0 {
		n += 1 + sovGenesis(uint64(m.NextPositionId))
	}
	return n
}

func (m *AccumObject) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	if m.AccumContent != nil {
		l = m.AccumContent.Size()
		n += 1 + l + sovGenesis(uint64(l))
	}
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *FullTick) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FullTick: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FullTick: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickIndex", wireType)
			}
			m.TickIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TickIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Info", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Info.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pool", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pool == nil {
				m.Pool = &types.Any{}
			}
			if err := m.Pool.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ticks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ticks = append(m.Ticks, FullTick{})
			if err := m.Ticks[len(m.Ticks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeAccumulator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeAccumulator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncentivesAccumulators", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncentivesAccumulators = append(m.IncentivesAccumulators, AccumObject{})
			if err := m.IncentivesAccumulators[len(m.IncentivesAccumulators)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncentiveRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncentiveRecords = append(m.IncentiveRecords, types1.IncentiveRecord{})
			if err := m.IncentiveRecords[len(m.IncentiveRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PositionData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PositionData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PositionData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Position == nil {
				m.Position = &model.Position{}
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LockId", wireType)
			}
			m.LockId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LockId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeAccumRecord", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.FeeAccumRecord.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolData = append(m.PoolData, PoolData{})
			if err := m.PoolData[len(m.PoolData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionData", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PositionData = append(m.PositionData, PositionData{})
			if err := m.PositionData[len(m.PositionData)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextPositionId", wireType)
			}
			m.NextPositionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextPositionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccumObject) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccumObject: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccumObject: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccumContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccumContent == nil {
				m.AccumContent = &accum.AccumulatorContent{}
			}
			if err := m.AccumContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
