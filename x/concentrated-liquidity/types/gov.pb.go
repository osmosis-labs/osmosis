// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/concentrated-liquidity/gov.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// TickSpacingDecreaseProposal is a gov Content type for proposing a tick
// spacing decrease for a pool. The proposal will fail if one of the pools do
// not exist, or if the new tick spacing is not less than the current tick
// spacing.
type TickSpacingDecreaseProposal struct {
	Title                      string                      `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Description                string                      `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	PoolIdToTickSpacingRecords []PoolIdToTickSpacingRecord `protobuf:"bytes,3,rep,name=pool_id_to_tick_spacing_records,json=poolIdToTickSpacingRecords,proto3" json:"pool_id_to_tick_spacing_records"`
}

func (m *TickSpacingDecreaseProposal) Reset()      { *m = TickSpacingDecreaseProposal{} }
func (*TickSpacingDecreaseProposal) ProtoMessage() {}
func (*TickSpacingDecreaseProposal) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6d167276ceeedc2, []int{0}
}
func (m *TickSpacingDecreaseProposal) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TickSpacingDecreaseProposal) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TickSpacingDecreaseProposal.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TickSpacingDecreaseProposal) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TickSpacingDecreaseProposal.Merge(m, src)
}
func (m *TickSpacingDecreaseProposal) XXX_Size() int {
	return m.Size()
}
func (m *TickSpacingDecreaseProposal) XXX_DiscardUnknown() {
	xxx_messageInfo_TickSpacingDecreaseProposal.DiscardUnknown(m)
}

var xxx_messageInfo_TickSpacingDecreaseProposal proto.InternalMessageInfo

// PoolIdToTickSpacingRecord is a struct that contains a pool id to new tick
// spacing pair.
type PoolIdToTickSpacingRecord struct {
	PoolId         uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty"`
	NewTickSpacing uint64 `protobuf:"varint,2,opt,name=new_tick_spacing,json=newTickSpacing,proto3" json:"new_tick_spacing,omitempty"`
}

func (m *PoolIdToTickSpacingRecord) Reset()         { *m = PoolIdToTickSpacingRecord{} }
func (m *PoolIdToTickSpacingRecord) String() string { return proto.CompactTextString(m) }
func (*PoolIdToTickSpacingRecord) ProtoMessage()    {}
func (*PoolIdToTickSpacingRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_e6d167276ceeedc2, []int{1}
}
func (m *PoolIdToTickSpacingRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolIdToTickSpacingRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolIdToTickSpacingRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolIdToTickSpacingRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolIdToTickSpacingRecord.Merge(m, src)
}
func (m *PoolIdToTickSpacingRecord) XXX_Size() int {
	return m.Size()
}
func (m *PoolIdToTickSpacingRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolIdToTickSpacingRecord.DiscardUnknown(m)
}

var xxx_messageInfo_PoolIdToTickSpacingRecord proto.InternalMessageInfo

func (m *PoolIdToTickSpacingRecord) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *PoolIdToTickSpacingRecord) GetNewTickSpacing() uint64 {
	if m != nil {
		return m.NewTickSpacing
	}
	return 0
}

func init() {
	proto.RegisterType((*TickSpacingDecreaseProposal)(nil), "osmosis.concentratedliquidity.v1beta1.TickSpacingDecreaseProposal")
	proto.RegisterType((*PoolIdToTickSpacingRecord)(nil), "osmosis.concentratedliquidity.v1beta1.PoolIdToTickSpacingRecord")
}

func init() {
	proto.RegisterFile("osmosis/concentrated-liquidity/gov.proto", fileDescriptor_e6d167276ceeedc2)
}

var fileDescriptor_e6d167276ceeedc2 = []byte{
	// 359 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xb1, 0x4b, 0xfb, 0x40,
	0x14, 0xc7, 0x73, 0xbf, 0xe6, 0x57, 0xf1, 0x2a, 0x22, 0xa1, 0x60, 0xad, 0x90, 0x94, 0x82, 0x90,
	0xa5, 0x09, 0x55, 0x5c, 0x3a, 0x49, 0x71, 0x71, 0x2b, 0xb1, 0x93, 0x08, 0x21, 0xb9, 0x1c, 0xf1,
	0x68, 0x9a, 0x77, 0xde, 0x5d, 0x5b, 0xfb, 0x1f, 0x08, 0x2e, 0x8e, 0x8e, 0xfd, 0x73, 0x3a, 0x76,
	0x74, 0x12, 0x69, 0x17, 0x57, 0xff, 0x03, 0x69, 0x52, 0x25, 0x0e, 0x05, 0xb7, 0x7b, 0xf7, 0xbe,
	0xef, 0xfb, 0xbe, 0x1f, 0x1e, 0xb6, 0x41, 0x0e, 0x41, 0x32, 0xe9, 0x12, 0x48, 0x09, 0x4d, 0x95,
	0x08, 0x14, 0x8d, 0x5a, 0x09, 0xbb, 0x1f, 0xb1, 0x88, 0xa9, 0xa9, 0x1b, 0xc3, 0xd8, 0xe1, 0x02,
	0x14, 0x18, 0x27, 0x1b, 0xa5, 0x53, 0x54, 0xfe, 0x08, 0x9d, 0x71, 0x3b, 0xa4, 0x2a, 0x68, 0xd7,
	0xab, 0x31, 0xc4, 0x90, 0x4d, 0xb8, 0xeb, 0x57, 0x3e, 0xdc, 0xfc, 0x44, 0xf8, 0xb8, 0xcf, 0xc8,
	0xe0, 0x9a, 0x07, 0x84, 0xa5, 0xf1, 0x25, 0x25, 0x82, 0x06, 0x92, 0xf6, 0x04, 0x70, 0x90, 0x41,
	0x62, 0x54, 0xf1, 0x7f, 0xc5, 0x54, 0x42, 0x6b, 0xa8, 0x81, 0xec, 0x5d, 0x2f, 0x2f, 0x8c, 0x06,
	0xae, 0x44, 0x54, 0x12, 0xc1, 0xb8, 0x62, 0x90, 0xd6, 0xfe, 0x65, 0xbd, 0xe2, 0x97, 0xf1, 0x84,
	0xb0, 0xc5, 0x01, 0x12, 0x9f, 0x45, 0xbe, 0x02, 0x5f, 0x31, 0x32, 0xf0, 0x65, 0xbe, 0xc3, 0x17,
	0x94, 0x80, 0x88, 0x64, 0xad, 0xd4, 0x28, 0xd9, 0x95, 0xd3, 0x0b, 0xe7, 0x4f, 0xf9, 0x9d, 0x1e,
	0x40, 0x72, 0x15, 0xf5, 0xa1, 0x90, 0xd6, 0xcb, 0x8c, 0xba, 0xfa, 0xfc, 0xcd, 0xd2, 0xbc, 0x3a,
	0xdf, 0x26, 0x90, 0x9d, 0xbd, 0xc7, 0x99, 0xa5, 0xbd, 0xcc, 0x2c, 0xed, 0x63, 0x66, 0xa1, 0x66,
	0x84, 0x8f, 0xb6, 0x9a, 0x19, 0x87, 0x78, 0x67, 0x93, 0x3b, 0x43, 0xd6, 0xbd, 0x72, 0xee, 0x6b,
	0xd8, 0xf8, 0x20, 0xa5, 0x93, 0x5f, 0x24, 0x19, 0xb8, 0xee, 0xed, 0xa7, 0x74, 0x52, 0x30, 0xea,
	0xe8, 0xeb, 0x2d, 0xdd, 0xdb, 0xf9, 0xd2, 0x44, 0x8b, 0xa5, 0x89, 0xde, 0x97, 0x26, 0x7a, 0x5e,
	0x99, 0xda, 0x62, 0x65, 0x6a, 0xaf, 0x2b, 0x53, 0xbb, 0xe9, 0xc6, 0x4c, 0xdd, 0x8d, 0x42, 0x87,
	0xc0, 0xd0, 0xdd, 0xb0, 0xb7, 0x92, 0x20, 0x94, 0xdf, 0x85, 0x3b, 0x6e, 0x9f, 0xbb, 0x0f, 0xdb,
	0x0e, 0xaf, 0xa6, 0x9c, 0xca, 0xb0, 0x9c, 0x9d, 0xef, 0xec, 0x2b, 0x00, 0x00, 0xff, 0xff, 0x2e,
	0xa7, 0x6b, 0x98, 0x27, 0x02, 0x00, 0x00,
}

func (this *TickSpacingDecreaseProposal) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*TickSpacingDecreaseProposal)
	if !ok {
		that2, ok := that.(TickSpacingDecreaseProposal)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Title != that1.Title {
		return false
	}
	if this.Description != that1.Description {
		return false
	}
	if len(this.PoolIdToTickSpacingRecords) != len(that1.PoolIdToTickSpacingRecords) {
		return false
	}
	for i := range this.PoolIdToTickSpacingRecords {
		if !this.PoolIdToTickSpacingRecords[i].Equal(&that1.PoolIdToTickSpacingRecords[i]) {
			return false
		}
	}
	return true
}
func (this *PoolIdToTickSpacingRecord) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PoolIdToTickSpacingRecord)
	if !ok {
		that2, ok := that.(PoolIdToTickSpacingRecord)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.PoolId != that1.PoolId {
		return false
	}
	if this.NewTickSpacing != that1.NewTickSpacing {
		return false
	}
	return true
}
func (m *TickSpacingDecreaseProposal) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TickSpacingDecreaseProposal) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TickSpacingDecreaseProposal) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PoolIdToTickSpacingRecords) > 0 {
		for iNdEx := len(m.PoolIdToTickSpacingRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PoolIdToTickSpacingRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGov(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintGov(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PoolIdToTickSpacingRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolIdToTickSpacingRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolIdToTickSpacingRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NewTickSpacing != 0 {
		i = encodeVarintGov(dAtA, i, uint64(m.NewTickSpacing))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolId != 0 {
		i = encodeVarintGov(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGov(dAtA []byte, offset int, v uint64) int {
	offset -= sovGov(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *TickSpacingDecreaseProposal) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovGov(uint64(l))
	}
	if len(m.PoolIdToTickSpacingRecords) > 0 {
		for _, e := range m.PoolIdToTickSpacingRecords {
			l = e.Size()
			n += 1 + l + sovGov(uint64(l))
		}
	}
	return n
}

func (m *PoolIdToTickSpacingRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovGov(uint64(m.PoolId))
	}
	if m.NewTickSpacing != 0 {
		n += 1 + sovGov(uint64(m.NewTickSpacing))
	}
	return n
}

func sovGov(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGov(x uint64) (n int) {
	return sovGov(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *TickSpacingDecreaseProposal) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGov
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TickSpacingDecreaseProposal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TickSpacingDecreaseProposal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolIdToTickSpacingRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGov
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGov
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolIdToTickSpacingRecords = append(m.PoolIdToTickSpacingRecords, PoolIdToTickSpacingRecord{})
			if err := m.PoolIdToTickSpacingRecords[len(m.PoolIdToTickSpacingRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGov(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGov
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolIdToTickSpacingRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGov
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolIdToTickSpacingRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolIdToTickSpacingRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewTickSpacing", wireType)
			}
			m.NewTickSpacing = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGov
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NewTickSpacing |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGov(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGov
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGov(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGov
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGov
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGov
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGov
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGov
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGov
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGov        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGov          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGov = fmt.Errorf("proto: unexpected end of group")
)
