// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/concentrated-liquidity/query.proto

package queryproto

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	types "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types2 "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	model "github.com/osmosis-labs/osmosis/v16/x/concentrated-liquidity/model"
	types1 "github.com/osmosis-labs/osmosis/v16/x/concentrated-liquidity/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// =============================== UserPositions
type UserPositionsRequest struct {
	Address    string             `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty" yaml:"address"`
	PoolId     uint64             `protobuf:"varint,2,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	Pagination *query.PageRequest `protobuf:"bytes,3,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *UserPositionsRequest) Reset()         { *m = UserPositionsRequest{} }
func (m *UserPositionsRequest) String() string { return proto.CompactTextString(m) }
func (*UserPositionsRequest) ProtoMessage()    {}
func (*UserPositionsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c83e18b11fd607d, []int{0}
}
func (m *UserPositionsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserPositionsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserPositionsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserPositionsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPositionsRequest.Merge(m, src)
}
func (m *UserPositionsRequest) XXX_Size() int {
	return m.Size()
}
func (m *UserPositionsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPositionsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserPositionsRequest proto.InternalMessageInfo

func (m *UserPositionsRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *UserPositionsRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *UserPositionsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type UserPositionsResponse struct {
	Positions  []model.FullPositionBreakdown `protobuf:"bytes,1,rep,name=positions,proto3" json:"positions"`
	Pagination *query.PageResponse           `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *UserPositionsResponse) Reset()         { *m = UserPositionsResponse{} }
func (m *UserPositionsResponse) String() string { return proto.CompactTextString(m) }
func (*UserPositionsResponse) ProtoMessage()    {}
func (*UserPositionsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c83e18b11fd607d, []int{1}
}
func (m *UserPositionsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UserPositionsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UserPositionsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UserPositionsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserPositionsResponse.Merge(m, src)
}
func (m *UserPositionsResponse) XXX_Size() int {
	return m.Size()
}
func (m *UserPositionsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserPositionsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserPositionsResponse proto.InternalMessageInfo

func (m *UserPositionsResponse) GetPositions() []model.FullPositionBreakdown {
	if m != nil {
		return m.Positions
	}
	return nil
}

func (m *UserPositionsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// =============================== PositionById
type PositionByIdRequest struct {
	PositionId uint64 `protobuf:"varint,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty" yaml:"position_id"`
}

func (m *PositionByIdRequest) Reset()         { *m = PositionByIdRequest{} }
func (m *PositionByIdRequest) String() string { return proto.CompactTextString(m) }
func (*PositionByIdRequest) ProtoMessage()    {}
func (*PositionByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c83e18b11fd607d, []int{2}
}
func (m *PositionByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PositionByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PositionByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PositionByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionByIdRequest.Merge(m, src)
}
func (m *PositionByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *PositionByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PositionByIdRequest proto.InternalMessageInfo

func (m *PositionByIdRequest) GetPositionId() uint64 {
	if m != nil {
		return m.PositionId
	}
	return 0
}

type PositionByIdResponse struct {
	Position model.FullPositionBreakdown `protobuf:"bytes,1,opt,name=position,proto3" json:"position"`
}

func (m *PositionByIdResponse) Reset()         { *m = PositionByIdResponse{} }
func (m *PositionByIdResponse) String() string { return proto.CompactTextString(m) }
func (*PositionByIdResponse) ProtoMessage()    {}
func (*PositionByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c83e18b11fd607d, []int{3}
}
func (m *PositionByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PositionByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PositionByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PositionByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PositionByIdResponse.Merge(m, src)
}
func (m *PositionByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *PositionByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PositionByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PositionByIdResponse proto.InternalMessageInfo

func (m *PositionByIdResponse) GetPosition() model.FullPositionBreakdown {
	if m != nil {
		return m.Position
	}
	return model.FullPositionBreakdown{}
}

// =============================== Pools
type PoolsRequest struct {
	// pagination defines an optional pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *PoolsRequest) Reset()         { *m = PoolsRequest{} }
func (m *PoolsRequest) String() string { return proto.CompactTextString(m) }
func (*PoolsRequest) ProtoMessage()    {}
func (*PoolsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c83e18b11fd607d, []int{4}
}
func (m *PoolsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolsRequest.Merge(m, src)
}
func (m *PoolsRequest) XXX_Size() int {
	return m.Size()
}
func (m *PoolsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PoolsRequest proto.InternalMessageInfo

func (m *PoolsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type PoolsResponse struct {
	Pools []*types.Any `protobuf:"bytes,1,rep,name=pools,proto3" json:"pools,omitempty"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *PoolsResponse) Reset()         { *m = PoolsResponse{} }
func (m *PoolsResponse) String() string { return proto.CompactTextString(m) }
func (*PoolsResponse) ProtoMessage()    {}
func (*PoolsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c83e18b11fd607d, []int{5}
}
func (m *PoolsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolsResponse.Merge(m, src)
}
func (m *PoolsResponse) XXX_Size() int {
	return m.Size()
}
func (m *PoolsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PoolsResponse proto.InternalMessageInfo

func (m *PoolsResponse) GetPools() []*types.Any {
	if m != nil {
		return m.Pools
	}
	return nil
}

func (m *PoolsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

// =============================== ModuleParams
type ParamsRequest struct {
}

func (m *ParamsRequest) Reset()         { *m = ParamsRequest{} }
func (m *ParamsRequest) String() string { return proto.CompactTextString(m) }
func (*ParamsRequest) ProtoMessage()    {}
func (*ParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c83e18b11fd607d, []int{6}
}
func (m *ParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParamsRequest.Merge(m, src)
}
func (m *ParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ParamsRequest proto.InternalMessageInfo

type ParamsResponse struct {
	Params types1.Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *ParamsResponse) Reset()         { *m = ParamsResponse{} }
func (m *ParamsResponse) String() string { return proto.CompactTextString(m) }
func (*ParamsResponse) ProtoMessage()    {}
func (*ParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c83e18b11fd607d, []int{7}
}
func (m *ParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ParamsResponse.Merge(m, src)
}
func (m *ParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ParamsResponse proto.InternalMessageInfo

func (m *ParamsResponse) GetParams() types1.Params {
	if m != nil {
		return m.Params
	}
	return types1.Params{}
}

type TickLiquidityNet struct {
	LiquidityNet github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=liquidity_net,json=liquidityNet,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"liquidity_net" yaml:"liquidity_net"`
	TickIndex    int64                                  `protobuf:"varint,2,opt,name=tick_index,json=tickIndex,proto3" json:"tick_index,omitempty" yaml:"tick_index"`
}

func (m *TickLiquidityNet) Reset()         { *m = TickLiquidityNet{} }
func (m *TickLiquidityNet) String() string { return proto.CompactTextString(m) }
func (*TickLiquidityNet) ProtoMessage()    {}
func (*TickLiquidityNet) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c83e18b11fd607d, []int{8}
}
func (m *TickLiquidityNet) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TickLiquidityNet) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TickLiquidityNet.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TickLiquidityNet) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TickLiquidityNet.Merge(m, src)
}
func (m *TickLiquidityNet) XXX_Size() int {
	return m.Size()
}
func (m *TickLiquidityNet) XXX_DiscardUnknown() {
	xxx_messageInfo_TickLiquidityNet.DiscardUnknown(m)
}

var xxx_messageInfo_TickLiquidityNet proto.InternalMessageInfo

func (m *TickLiquidityNet) GetTickIndex() int64 {
	if m != nil {
		return m.TickIndex
	}
	return 0
}

type LiquidityDepthWithRange struct {
	LiquidityAmount github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,1,opt,name=liquidity_amount,json=liquidityAmount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"liquidity_amount" yaml:"liquidity_net"`
	LowerTick       int64                                  `protobuf:"varint,2,opt,name=lower_tick,json=lowerTick,proto3" json:"lower_tick,omitempty" yaml:"lower_tick"`
	UpperTick       int64                                  `protobuf:"varint,3,opt,name=upper_tick,json=upperTick,proto3" json:"upper_tick,omitempty" yaml:"upper_tick"`
}

func (m *LiquidityDepthWithRange) Reset()         { *m = LiquidityDepthWithRange{} }
func (m *LiquidityDepthWithRange) String() string { return proto.CompactTextString(m) }
func (*LiquidityDepthWithRange) ProtoMessage()    {}
func (*LiquidityDepthWithRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c83e18b11fd607d, []int{9}
}
func (m *LiquidityDepthWithRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityDepthWithRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityDepthWithRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityDepthWithRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityDepthWithRange.Merge(m, src)
}
func (m *LiquidityDepthWithRange) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityDepthWithRange) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityDepthWithRange.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityDepthWithRange proto.InternalMessageInfo

func (m *LiquidityDepthWithRange) GetLowerTick() int64 {
	if m != nil {
		return m.LowerTick
	}
	return 0
}

func (m *LiquidityDepthWithRange) GetUpperTick() int64 {
	if m != nil {
		return m.UpperTick
	}
	return 0
}

// =============================== LiquidityNetInDirection
type LiquidityNetInDirectionRequest struct {
	PoolId     uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	TokenIn    string `protobuf:"bytes,2,opt,name=token_in,json=tokenIn,proto3" json:"token_in,omitempty" yaml:"token_in"`
	StartTick  int64  `protobuf:"varint,3,opt,name=start_tick,json=startTick,proto3" json:"start_tick,omitempty" yaml:"start_tick"`
	UseCurTick bool   `protobuf:"varint,4,opt,name=use_cur_tick,json=useCurTick,proto3" json:"use_cur_tick,omitempty" yaml:"use_cur_tick"`
	BoundTick  int64  `protobuf:"varint,5,opt,name=bound_tick,json=boundTick,proto3" json:"bound_tick,omitempty" yaml:"bound_tick"`
	UseNoBound bool   `protobuf:"varint,6,opt,name=use_no_bound,json=useNoBound,proto3" json:"use_no_bound,omitempty" yaml:"use_no_bound"`
}

func (m *LiquidityNetInDirectionRequest) Reset()         { *m = LiquidityNetInDirectionRequest{} }
func (m *LiquidityNetInDirectionRequest) String() string { return proto.CompactTextString(m) }
func (*LiquidityNetInDirectionRequest) ProtoMessage()    {}
func (*LiquidityNetInDirectionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c83e18b11fd607d, []int{10}
}
func (m *LiquidityNetInDirectionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityNetInDirectionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityNetInDirectionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityNetInDirectionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityNetInDirectionRequest.Merge(m, src)
}
func (m *LiquidityNetInDirectionRequest) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityNetInDirectionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityNetInDirectionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityNetInDirectionRequest proto.InternalMessageInfo

func (m *LiquidityNetInDirectionRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *LiquidityNetInDirectionRequest) GetTokenIn() string {
	if m != nil {
		return m.TokenIn
	}
	return ""
}

func (m *LiquidityNetInDirectionRequest) GetStartTick() int64 {
	if m != nil {
		return m.StartTick
	}
	return 0
}

func (m *LiquidityNetInDirectionRequest) GetUseCurTick() bool {
	if m != nil {
		return m.UseCurTick
	}
	return false
}

func (m *LiquidityNetInDirectionRequest) GetBoundTick() int64 {
	if m != nil {
		return m.BoundTick
	}
	return 0
}

func (m *LiquidityNetInDirectionRequest) GetUseNoBound() bool {
	if m != nil {
		return m.UseNoBound
	}
	return false
}

type LiquidityNetInDirectionResponse struct {
	LiquidityDepths  []TickLiquidityNet                     `protobuf:"bytes,1,rep,name=liquidity_depths,json=liquidityDepths,proto3" json:"liquidity_depths"`
	CurrentTick      int64                                  `protobuf:"varint,2,opt,name=current_tick,json=currentTick,proto3" json:"current_tick,omitempty"`
	CurrentLiquidity github_com_cosmos_cosmos_sdk_types.Dec `protobuf:"bytes,3,opt,name=current_liquidity,json=currentLiquidity,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Dec" json:"current_liquidity" yaml:"current_liquidity"`
}

func (m *LiquidityNetInDirectionResponse) Reset()         { *m = LiquidityNetInDirectionResponse{} }
func (m *LiquidityNetInDirectionResponse) String() string { return proto.CompactTextString(m) }
func (*LiquidityNetInDirectionResponse) ProtoMessage()    {}
func (*LiquidityNetInDirectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c83e18b11fd607d, []int{11}
}
func (m *LiquidityNetInDirectionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityNetInDirectionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityNetInDirectionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityNetInDirectionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityNetInDirectionResponse.Merge(m, src)
}
func (m *LiquidityNetInDirectionResponse) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityNetInDirectionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityNetInDirectionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityNetInDirectionResponse proto.InternalMessageInfo

func (m *LiquidityNetInDirectionResponse) GetLiquidityDepths() []TickLiquidityNet {
	if m != nil {
		return m.LiquidityDepths
	}
	return nil
}

func (m *LiquidityNetInDirectionResponse) GetCurrentTick() int64 {
	if m != nil {
		return m.CurrentTick
	}
	return 0
}

// =============================== LiquidityPerTickRange
type LiquidityPerTickRangeRequest struct {
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
}

func (m *LiquidityPerTickRangeRequest) Reset()         { *m = LiquidityPerTickRangeRequest{} }
func (m *LiquidityPerTickRangeRequest) String() string { return proto.CompactTextString(m) }
func (*LiquidityPerTickRangeRequest) ProtoMessage()    {}
func (*LiquidityPerTickRangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c83e18b11fd607d, []int{12}
}
func (m *LiquidityPerTickRangeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityPerTickRangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityPerTickRangeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityPerTickRangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityPerTickRangeRequest.Merge(m, src)
}
func (m *LiquidityPerTickRangeRequest) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityPerTickRangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityPerTickRangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityPerTickRangeRequest proto.InternalMessageInfo

func (m *LiquidityPerTickRangeRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

type LiquidityPerTickRangeResponse struct {
	Liquidity []LiquidityDepthWithRange `protobuf:"bytes,1,rep,name=liquidity,proto3" json:"liquidity"`
}

func (m *LiquidityPerTickRangeResponse) Reset()         { *m = LiquidityPerTickRangeResponse{} }
func (m *LiquidityPerTickRangeResponse) String() string { return proto.CompactTextString(m) }
func (*LiquidityPerTickRangeResponse) ProtoMessage()    {}
func (*LiquidityPerTickRangeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c83e18b11fd607d, []int{13}
}
func (m *LiquidityPerTickRangeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LiquidityPerTickRangeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LiquidityPerTickRangeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LiquidityPerTickRangeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LiquidityPerTickRangeResponse.Merge(m, src)
}
func (m *LiquidityPerTickRangeResponse) XXX_Size() int {
	return m.Size()
}
func (m *LiquidityPerTickRangeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LiquidityPerTickRangeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LiquidityPerTickRangeResponse proto.InternalMessageInfo

func (m *LiquidityPerTickRangeResponse) GetLiquidity() []LiquidityDepthWithRange {
	if m != nil {
		return m.Liquidity
	}
	return nil
}

// ===================== QueryClaimableSpreadRewards
type ClaimableSpreadRewardsRequest struct {
	PositionId uint64 `protobuf:"varint,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty" yaml:"position_id"`
}

func (m *ClaimableSpreadRewardsRequest) Reset()         { *m = ClaimableSpreadRewardsRequest{} }
func (m *ClaimableSpreadRewardsRequest) String() string { return proto.CompactTextString(m) }
func (*ClaimableSpreadRewardsRequest) ProtoMessage()    {}
func (*ClaimableSpreadRewardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c83e18b11fd607d, []int{14}
}
func (m *ClaimableSpreadRewardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimableSpreadRewardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimableSpreadRewardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimableSpreadRewardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimableSpreadRewardsRequest.Merge(m, src)
}
func (m *ClaimableSpreadRewardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ClaimableSpreadRewardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimableSpreadRewardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimableSpreadRewardsRequest proto.InternalMessageInfo

func (m *ClaimableSpreadRewardsRequest) GetPositionId() uint64 {
	if m != nil {
		return m.PositionId
	}
	return 0
}

type ClaimableSpreadRewardsResponse struct {
	ClaimableSpreadRewards []types2.Coin `protobuf:"bytes,1,rep,name=claimable_spread_rewards,json=claimableSpreadRewards,proto3" json:"claimable_spread_rewards" yaml:"claimable_spread_rewards"`
}

func (m *ClaimableSpreadRewardsResponse) Reset()         { *m = ClaimableSpreadRewardsResponse{} }
func (m *ClaimableSpreadRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*ClaimableSpreadRewardsResponse) ProtoMessage()    {}
func (*ClaimableSpreadRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c83e18b11fd607d, []int{15}
}
func (m *ClaimableSpreadRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimableSpreadRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimableSpreadRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimableSpreadRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimableSpreadRewardsResponse.Merge(m, src)
}
func (m *ClaimableSpreadRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ClaimableSpreadRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimableSpreadRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimableSpreadRewardsResponse proto.InternalMessageInfo

func (m *ClaimableSpreadRewardsResponse) GetClaimableSpreadRewards() []types2.Coin {
	if m != nil {
		return m.ClaimableSpreadRewards
	}
	return nil
}

// ===================== QueryClaimableIncentives
type ClaimableIncentivesRequest struct {
	PositionId uint64 `protobuf:"varint,1,opt,name=position_id,json=positionId,proto3" json:"position_id,omitempty" yaml:"position_id"`
}

func (m *ClaimableIncentivesRequest) Reset()         { *m = ClaimableIncentivesRequest{} }
func (m *ClaimableIncentivesRequest) String() string { return proto.CompactTextString(m) }
func (*ClaimableIncentivesRequest) ProtoMessage()    {}
func (*ClaimableIncentivesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c83e18b11fd607d, []int{16}
}
func (m *ClaimableIncentivesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimableIncentivesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimableIncentivesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimableIncentivesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimableIncentivesRequest.Merge(m, src)
}
func (m *ClaimableIncentivesRequest) XXX_Size() int {
	return m.Size()
}
func (m *ClaimableIncentivesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimableIncentivesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimableIncentivesRequest proto.InternalMessageInfo

func (m *ClaimableIncentivesRequest) GetPositionId() uint64 {
	if m != nil {
		return m.PositionId
	}
	return 0
}

type ClaimableIncentivesResponse struct {
	ClaimableIncentives []types2.Coin `protobuf:"bytes,1,rep,name=claimable_incentives,json=claimableIncentives,proto3" json:"claimable_incentives" yaml:"claimable_incentives"`
	ForfeitedIncentives []types2.Coin `protobuf:"bytes,2,rep,name=forfeited_incentives,json=forfeitedIncentives,proto3" json:"forfeited_incentives" yaml:"forfeited_incentives"`
}

func (m *ClaimableIncentivesResponse) Reset()         { *m = ClaimableIncentivesResponse{} }
func (m *ClaimableIncentivesResponse) String() string { return proto.CompactTextString(m) }
func (*ClaimableIncentivesResponse) ProtoMessage()    {}
func (*ClaimableIncentivesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c83e18b11fd607d, []int{17}
}
func (m *ClaimableIncentivesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClaimableIncentivesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClaimableIncentivesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClaimableIncentivesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClaimableIncentivesResponse.Merge(m, src)
}
func (m *ClaimableIncentivesResponse) XXX_Size() int {
	return m.Size()
}
func (m *ClaimableIncentivesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ClaimableIncentivesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ClaimableIncentivesResponse proto.InternalMessageInfo

func (m *ClaimableIncentivesResponse) GetClaimableIncentives() []types2.Coin {
	if m != nil {
		return m.ClaimableIncentives
	}
	return nil
}

func (m *ClaimableIncentivesResponse) GetForfeitedIncentives() []types2.Coin {
	if m != nil {
		return m.ForfeitedIncentives
	}
	return nil
}

// ===================== QueryPoolAccumulatorRewards
type PoolAccumulatorRewardsRequest struct {
	PoolId uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
}

func (m *PoolAccumulatorRewardsRequest) Reset()         { *m = PoolAccumulatorRewardsRequest{} }
func (m *PoolAccumulatorRewardsRequest) String() string { return proto.CompactTextString(m) }
func (*PoolAccumulatorRewardsRequest) ProtoMessage()    {}
func (*PoolAccumulatorRewardsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c83e18b11fd607d, []int{18}
}
func (m *PoolAccumulatorRewardsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolAccumulatorRewardsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolAccumulatorRewardsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolAccumulatorRewardsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolAccumulatorRewardsRequest.Merge(m, src)
}
func (m *PoolAccumulatorRewardsRequest) XXX_Size() int {
	return m.Size()
}
func (m *PoolAccumulatorRewardsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolAccumulatorRewardsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PoolAccumulatorRewardsRequest proto.InternalMessageInfo

func (m *PoolAccumulatorRewardsRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

type PoolAccumulatorRewardsResponse struct {
	SpreadRewardGrowthGlobal github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,1,rep,name=spread_reward_growth_global,json=spreadRewardGrowthGlobal,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"spread_reward_growth_global"`
	UptimeGrowthGlobal       []model.UptimeTracker                       `protobuf:"bytes,2,rep,name=uptime_growth_global,json=uptimeGrowthGlobal,proto3" json:"uptime_growth_global" yaml:"uptime_growth_global"`
}

func (m *PoolAccumulatorRewardsResponse) Reset()         { *m = PoolAccumulatorRewardsResponse{} }
func (m *PoolAccumulatorRewardsResponse) String() string { return proto.CompactTextString(m) }
func (*PoolAccumulatorRewardsResponse) ProtoMessage()    {}
func (*PoolAccumulatorRewardsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c83e18b11fd607d, []int{19}
}
func (m *PoolAccumulatorRewardsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolAccumulatorRewardsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolAccumulatorRewardsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolAccumulatorRewardsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolAccumulatorRewardsResponse.Merge(m, src)
}
func (m *PoolAccumulatorRewardsResponse) XXX_Size() int {
	return m.Size()
}
func (m *PoolAccumulatorRewardsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolAccumulatorRewardsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PoolAccumulatorRewardsResponse proto.InternalMessageInfo

func (m *PoolAccumulatorRewardsResponse) GetSpreadRewardGrowthGlobal() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.SpreadRewardGrowthGlobal
	}
	return nil
}

func (m *PoolAccumulatorRewardsResponse) GetUptimeGrowthGlobal() []model.UptimeTracker {
	if m != nil {
		return m.UptimeGrowthGlobal
	}
	return nil
}

// ===================== QueryTickAccumulatorTrackers
type TickAccumulatorTrackersRequest struct {
	PoolId    uint64 `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	TickIndex int64  `protobuf:"varint,2,opt,name=tick_index,json=tickIndex,proto3" json:"tick_index,omitempty" yaml:"tick_index"`
}

func (m *TickAccumulatorTrackersRequest) Reset()         { *m = TickAccumulatorTrackersRequest{} }
func (m *TickAccumulatorTrackersRequest) String() string { return proto.CompactTextString(m) }
func (*TickAccumulatorTrackersRequest) ProtoMessage()    {}
func (*TickAccumulatorTrackersRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c83e18b11fd607d, []int{20}
}
func (m *TickAccumulatorTrackersRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TickAccumulatorTrackersRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TickAccumulatorTrackersRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TickAccumulatorTrackersRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TickAccumulatorTrackersRequest.Merge(m, src)
}
func (m *TickAccumulatorTrackersRequest) XXX_Size() int {
	return m.Size()
}
func (m *TickAccumulatorTrackersRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TickAccumulatorTrackersRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TickAccumulatorTrackersRequest proto.InternalMessageInfo

func (m *TickAccumulatorTrackersRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *TickAccumulatorTrackersRequest) GetTickIndex() int64 {
	if m != nil {
		return m.TickIndex
	}
	return 0
}

type TickAccumulatorTrackersResponse struct {
	SpreadRewardGrowthOppositeDirectionOfLastTraversal github_com_cosmos_cosmos_sdk_types.DecCoins `protobuf:"bytes,1,rep,name=spread_reward_growth_opposite_direction_of_last_traversal,json=spreadRewardGrowthOppositeDirectionOfLastTraversal,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.DecCoins" json:"spread_reward_growth_opposite_direction_of_last_traversal"`
	UptimeTrackers                                     []model.UptimeTracker                       `protobuf:"bytes,2,rep,name=uptime_trackers,json=uptimeTrackers,proto3" json:"uptime_trackers" yaml:"uptime_trackers"`
}

func (m *TickAccumulatorTrackersResponse) Reset()         { *m = TickAccumulatorTrackersResponse{} }
func (m *TickAccumulatorTrackersResponse) String() string { return proto.CompactTextString(m) }
func (*TickAccumulatorTrackersResponse) ProtoMessage()    {}
func (*TickAccumulatorTrackersResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c83e18b11fd607d, []int{21}
}
func (m *TickAccumulatorTrackersResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TickAccumulatorTrackersResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TickAccumulatorTrackersResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TickAccumulatorTrackersResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TickAccumulatorTrackersResponse.Merge(m, src)
}
func (m *TickAccumulatorTrackersResponse) XXX_Size() int {
	return m.Size()
}
func (m *TickAccumulatorTrackersResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TickAccumulatorTrackersResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TickAccumulatorTrackersResponse proto.InternalMessageInfo

func (m *TickAccumulatorTrackersResponse) GetSpreadRewardGrowthOppositeDirectionOfLastTraversal() github_com_cosmos_cosmos_sdk_types.DecCoins {
	if m != nil {
		return m.SpreadRewardGrowthOppositeDirectionOfLastTraversal
	}
	return nil
}

func (m *TickAccumulatorTrackersResponse) GetUptimeTrackers() []model.UptimeTracker {
	if m != nil {
		return m.UptimeTrackers
	}
	return nil
}

// ===================== QueryIncentiveRecords
type IncentiveRecordsRequest struct {
	PoolId     uint64             `protobuf:"varint,1,opt,name=pool_id,json=poolId,proto3" json:"pool_id,omitempty" yaml:"pool_id"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *IncentiveRecordsRequest) Reset()         { *m = IncentiveRecordsRequest{} }
func (m *IncentiveRecordsRequest) String() string { return proto.CompactTextString(m) }
func (*IncentiveRecordsRequest) ProtoMessage()    {}
func (*IncentiveRecordsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c83e18b11fd607d, []int{22}
}
func (m *IncentiveRecordsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncentiveRecordsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncentiveRecordsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncentiveRecordsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncentiveRecordsRequest.Merge(m, src)
}
func (m *IncentiveRecordsRequest) XXX_Size() int {
	return m.Size()
}
func (m *IncentiveRecordsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IncentiveRecordsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IncentiveRecordsRequest proto.InternalMessageInfo

func (m *IncentiveRecordsRequest) GetPoolId() uint64 {
	if m != nil {
		return m.PoolId
	}
	return 0
}

func (m *IncentiveRecordsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type IncentiveRecordsResponse struct {
	IncentiveRecords []types1.IncentiveRecord `protobuf:"bytes,1,rep,name=incentive_records,json=incentiveRecords,proto3" json:"incentive_records"`
	// pagination defines the pagination in the response.
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *IncentiveRecordsResponse) Reset()         { *m = IncentiveRecordsResponse{} }
func (m *IncentiveRecordsResponse) String() string { return proto.CompactTextString(m) }
func (*IncentiveRecordsResponse) ProtoMessage()    {}
func (*IncentiveRecordsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5c83e18b11fd607d, []int{23}
}
func (m *IncentiveRecordsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncentiveRecordsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncentiveRecordsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncentiveRecordsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncentiveRecordsResponse.Merge(m, src)
}
func (m *IncentiveRecordsResponse) XXX_Size() int {
	return m.Size()
}
func (m *IncentiveRecordsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IncentiveRecordsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IncentiveRecordsResponse proto.InternalMessageInfo

func (m *IncentiveRecordsResponse) GetIncentiveRecords() []types1.IncentiveRecord {
	if m != nil {
		return m.IncentiveRecords
	}
	return nil
}

func (m *IncentiveRecordsResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*UserPositionsRequest)(nil), "osmosis.concentratedliquidity.v1beta1.UserPositionsRequest")
	proto.RegisterType((*UserPositionsResponse)(nil), "osmosis.concentratedliquidity.v1beta1.UserPositionsResponse")
	proto.RegisterType((*PositionByIdRequest)(nil), "osmosis.concentratedliquidity.v1beta1.PositionByIdRequest")
	proto.RegisterType((*PositionByIdResponse)(nil), "osmosis.concentratedliquidity.v1beta1.PositionByIdResponse")
	proto.RegisterType((*PoolsRequest)(nil), "osmosis.concentratedliquidity.v1beta1.PoolsRequest")
	proto.RegisterType((*PoolsResponse)(nil), "osmosis.concentratedliquidity.v1beta1.PoolsResponse")
	proto.RegisterType((*ParamsRequest)(nil), "osmosis.concentratedliquidity.v1beta1.ParamsRequest")
	proto.RegisterType((*ParamsResponse)(nil), "osmosis.concentratedliquidity.v1beta1.ParamsResponse")
	proto.RegisterType((*TickLiquidityNet)(nil), "osmosis.concentratedliquidity.v1beta1.TickLiquidityNet")
	proto.RegisterType((*LiquidityDepthWithRange)(nil), "osmosis.concentratedliquidity.v1beta1.LiquidityDepthWithRange")
	proto.RegisterType((*LiquidityNetInDirectionRequest)(nil), "osmosis.concentratedliquidity.v1beta1.LiquidityNetInDirectionRequest")
	proto.RegisterType((*LiquidityNetInDirectionResponse)(nil), "osmosis.concentratedliquidity.v1beta1.LiquidityNetInDirectionResponse")
	proto.RegisterType((*LiquidityPerTickRangeRequest)(nil), "osmosis.concentratedliquidity.v1beta1.LiquidityPerTickRangeRequest")
	proto.RegisterType((*LiquidityPerTickRangeResponse)(nil), "osmosis.concentratedliquidity.v1beta1.LiquidityPerTickRangeResponse")
	proto.RegisterType((*ClaimableSpreadRewardsRequest)(nil), "osmosis.concentratedliquidity.v1beta1.ClaimableSpreadRewardsRequest")
	proto.RegisterType((*ClaimableSpreadRewardsResponse)(nil), "osmosis.concentratedliquidity.v1beta1.ClaimableSpreadRewardsResponse")
	proto.RegisterType((*ClaimableIncentivesRequest)(nil), "osmosis.concentratedliquidity.v1beta1.ClaimableIncentivesRequest")
	proto.RegisterType((*ClaimableIncentivesResponse)(nil), "osmosis.concentratedliquidity.v1beta1.ClaimableIncentivesResponse")
	proto.RegisterType((*PoolAccumulatorRewardsRequest)(nil), "osmosis.concentratedliquidity.v1beta1.PoolAccumulatorRewardsRequest")
	proto.RegisterType((*PoolAccumulatorRewardsResponse)(nil), "osmosis.concentratedliquidity.v1beta1.PoolAccumulatorRewardsResponse")
	proto.RegisterType((*TickAccumulatorTrackersRequest)(nil), "osmosis.concentratedliquidity.v1beta1.TickAccumulatorTrackersRequest")
	proto.RegisterType((*TickAccumulatorTrackersResponse)(nil), "osmosis.concentratedliquidity.v1beta1.TickAccumulatorTrackersResponse")
	proto.RegisterType((*IncentiveRecordsRequest)(nil), "osmosis.concentratedliquidity.v1beta1.IncentiveRecordsRequest")
	proto.RegisterType((*IncentiveRecordsResponse)(nil), "osmosis.concentratedliquidity.v1beta1.IncentiveRecordsResponse")
}

func init() {
	proto.RegisterFile("osmosis/concentrated-liquidity/query.proto", fileDescriptor_5c83e18b11fd607d)
}

var fileDescriptor_5c83e18b11fd607d = []byte{
	// 1832 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x59, 0x4f, 0x6c, 0x1b, 0x4b,
	0x19, 0xcf, 0x38, 0x4d, 0x5a, 0x4f, 0x92, 0x26, 0x9d, 0xa4, 0x89, 0x9f, 0xdb, 0xda, 0x61, 0xd0,
	0x7b, 0x2f, 0x7a, 0x7d, 0xb1, 0xd5, 0x34, 0x79, 0xa5, 0x49, 0xdf, 0x7b, 0xc4, 0xc9, 0x4b, 0x64,
	0xa8, 0xf2, 0xc2, 0xd2, 0x00, 0xe2, 0xc0, 0xb2, 0xde, 0x9d, 0x38, 0xab, 0xac, 0x77, 0x9c, 0xfd,
	0x93, 0xd4, 0x82, 0x5e, 0xe8, 0x11, 0x09, 0x2a, 0x71, 0xe7, 0x0a, 0x42, 0x1c, 0xe1, 0xc0, 0x11,
	0x0e, 0xa8, 0xe2, 0x50, 0x55, 0x42, 0x48, 0x88, 0x83, 0x0b, 0x2d, 0x42, 0x48, 0x45, 0x1c, 0xc2,
	0x85, 0x23, 0xda, 0xd9, 0x99, 0xdd, 0xb5, 0xbd, 0x8e, 0xd7, 0x4e, 0x38, 0xc5, 0xb3, 0xdf, 0xdf,
	0xdf, 0xf7, 0x7d, 0xf3, 0xcd, 0x37, 0x13, 0xf8, 0x01, 0xb5, 0x6b, 0xd4, 0xd6, 0xed, 0xa2, 0x4a,
	0x4d, 0x95, 0x98, 0x8e, 0xa5, 0x38, 0x44, 0x5b, 0x34, 0xf4, 0x23, 0x57, 0xd7, 0x74, 0xa7, 0x51,
	0x3c, 0x72, 0x89, 0xd5, 0x28, 0xd4, 0x2d, 0xea, 0x50, 0xf4, 0x2e, 0xe7, 0x2d, 0x44, 0x79, 0x03,
	0xd6, 0xc2, 0xf1, 0x9d, 0x0a, 0x71, 0x94, 0x3b, 0xd9, 0x99, 0x2a, 0xad, 0x52, 0x26, 0x51, 0xf4,
	0x7e, 0xf9, 0xc2, 0xd9, 0xdb, 0x3d, 0x0c, 0xd5, 0x15, 0x4b, 0xa9, 0xd9, 0x9c, 0x79, 0xb1, 0x07,
	0xb3, 0xa3, 0xab, 0x87, 0x65, 0x73, 0x5f, 0xe8, 0xce, 0xa9, 0x8c, 0xbf, 0x58, 0x51, 0x6c, 0x52,
	0xe4, 0x6e, 0x14, 0x55, 0xaa, 0x9b, 0x9c, 0xfe, 0x41, 0x94, 0xce, 0x10, 0x05, 0x5c, 0x75, 0xa5,
	0xaa, 0x9b, 0x8a, 0xa3, 0x53, 0xc1, 0x7b, 0xb3, 0x4a, 0x69, 0xd5, 0x20, 0x45, 0xa5, 0xae, 0x17,
	0x15, 0xd3, 0xa4, 0x0e, 0x23, 0x0a, 0xc7, 0xde, 0xe1, 0x54, 0xb6, 0xaa, 0xb8, 0xfb, 0x45, 0xc5,
	0x6c, 0x08, 0x92, 0x6f, 0x44, 0xf6, 0x91, 0xfb, 0x0b, 0x4e, 0xca, 0xb7, 0x4b, 0x39, 0x7a, 0x8d,
	0xd8, 0x8e, 0x52, 0xab, 0x0b, 0x00, 0xed, 0x0c, 0x9a, 0x6b, 0x45, 0x9d, 0xea, 0x15, 0x8f, 0x3a,
	0xb5, 0xf5, 0x08, 0xfb, 0x4a, 0x0f, 0x76, 0x9d, 0x7d, 0xd5, 0x8f, 0x89, 0x6c, 0x11, 0x95, 0x5a,
	0x9a, 0x2f, 0x86, 0x7f, 0x03, 0xe0, 0xcc, 0x9e, 0x4d, 0xac, 0x5d, 0xae, 0xcd, 0x96, 0xc8, 0x91,
	0x4b, 0x6c, 0x07, 0x7d, 0x08, 0x2f, 0x2b, 0x9a, 0x66, 0x11, 0xdb, 0xce, 0x80, 0x79, 0xb0, 0x90,
	0x2e, 0xa1, 0xd3, 0x66, 0xfe, 0x6a, 0x43, 0xa9, 0x19, 0xab, 0x98, 0x13, 0xb0, 0x24, 0x58, 0xd0,
	0x6d, 0x78, 0xb9, 0x4e, 0xa9, 0x21, 0xeb, 0x5a, 0x26, 0x35, 0x0f, 0x16, 0x2e, 0x45, 0xb9, 0x39,
	0x01, 0x4b, 0xa3, 0xde, 0xaf, 0xb2, 0x86, 0xb6, 0x20, 0x0c, 0x53, 0x90, 0x19, 0x9e, 0x07, 0x0b,
	0x63, 0x4b, 0xef, 0x15, 0x78, 0xf4, 0xbc, 0x7c, 0x15, 0xfc, 0x0a, 0xe4, 0xf9, 0x2a, 0xec, 0x2a,
	0x55, 0xc2, 0xdd, 0x92, 0x22, 0x92, 0xf8, 0x77, 0x00, 0x5e, 0x6f, 0xf3, 0xdd, 0xae, 0x53, 0xd3,
	0x26, 0xe8, 0xbb, 0x30, 0x2d, 0xc2, 0xe3, 0xb9, 0x3f, 0xbc, 0x30, 0xb6, 0xf4, 0xa0, 0x90, 0xa8,
	0x92, 0x0b, 0x5b, 0xae, 0x61, 0x08, 0x85, 0x25, 0x8b, 0x28, 0x87, 0x1a, 0x3d, 0x31, 0x4b, 0x97,
	0x9e, 0x37, 0xf3, 0x43, 0x52, 0xa8, 0x14, 0x6d, 0xb7, 0x60, 0x48, 0x31, 0x0c, 0xef, 0xf7, 0xc4,
	0xe0, 0xbb, 0xd7, 0x02, 0x62, 0x07, 0x4e, 0x07, 0xe6, 0x1a, 0x65, 0x4d, 0x84, 0xff, 0x1e, 0x1c,
	0x13, 0xc6, 0xbc, 0xa0, 0x02, 0x16, 0xd4, 0xd9, 0xd3, 0x66, 0x1e, 0x89, 0xa0, 0x06, 0x44, 0x2c,
	0x41, 0xb1, 0x2a, 0x6b, 0xf8, 0x18, 0xce, 0xb4, 0xea, 0xe3, 0x21, 0xf9, 0x0e, 0xbc, 0x22, 0xb8,
	0x98, 0xb6, 0x8b, 0x89, 0x48, 0xa0, 0x13, 0x7f, 0x03, 0x8e, 0xef, 0x52, 0x6a, 0x04, 0xf5, 0xb3,
	0x15, 0x13, 0xa0, 0x41, 0x92, 0xfc, 0x63, 0x00, 0x27, 0xb8, 0x62, 0x8e, 0x64, 0x05, 0x8e, 0x78,
	0x85, 0x24, 0x12, 0x3b, 0x53, 0xf0, 0x37, 0x52, 0x41, 0x6c, 0xa4, 0xc2, 0xba, 0xd9, 0x28, 0xa5,
	0xff, 0xf0, 0xab, 0xc5, 0x11, 0x4f, 0xae, 0x2c, 0xf9, 0xdc, 0x17, 0x97, 0xb1, 0x49, 0x38, 0xb1,
	0xcb, 0x1a, 0x17, 0x77, 0x17, 0xef, 0xc1, 0xab, 0xe2, 0x03, 0x77, 0x71, 0x03, 0x8e, 0xfa, 0xbd,
	0x8d, 0x87, 0xfa, 0xdd, 0x1e, 0xa1, 0xf6, 0xc5, 0x79, 0x4c, 0xb9, 0x28, 0xfe, 0x35, 0x80, 0x53,
	0x8f, 0x74, 0xf5, 0xf0, 0xa1, 0x60, 0xdb, 0x21, 0x0e, 0x3a, 0x84, 0x13, 0x81, 0x98, 0x6c, 0x12,
	0x87, 0x6f, 0xce, 0x2d, 0x4f, 0xf2, 0x2f, 0xcd, 0xfc, 0x7b, 0x55, 0xdd, 0x39, 0x70, 0x2b, 0x05,
	0x95, 0xd6, 0x78, 0x3b, 0xe2, 0x7f, 0x16, 0x6d, 0xed, 0xb0, 0xe8, 0x34, 0xea, 0xc4, 0x2e, 0x6c,
	0x12, 0xf5, 0xb4, 0x99, 0x9f, 0xf1, 0xeb, 0xa8, 0x45, 0x19, 0x96, 0xc6, 0x8d, 0xa8, 0xb1, 0x65,
	0x08, 0xbd, 0xae, 0x2b, 0xeb, 0xa6, 0x46, 0x1e, 0xb3, 0x90, 0x0d, 0x97, 0xae, 0x9f, 0x36, 0xf3,
	0xd7, 0x7c, 0xd9, 0x90, 0x86, 0xa5, 0xb4, 0xdf, 0x9e, 0xbd, 0xdf, 0xff, 0x05, 0x70, 0x2e, 0xf0,
	0x79, 0x93, 0xd4, 0x9d, 0x83, 0x6f, 0xea, 0xce, 0x81, 0xa4, 0x98, 0x55, 0x82, 0x8e, 0xe0, 0x54,
	0x68, 0x51, 0xa9, 0x51, 0xd7, 0xbc, 0x68, 0x04, 0x93, 0xc1, 0x7a, 0x9d, 0xa9, 0xf7, 0x40, 0x18,
	0xf4, 0x84, 0x58, 0xb2, 0xe7, 0x61, 0x27, 0x88, 0x90, 0x86, 0xa5, 0x34, 0x5b, 0x78, 0x31, 0xf7,
	0xa4, 0xdc, 0x7a, 0x5d, 0x48, 0x0d, 0xb7, 0x4b, 0x85, 0x34, 0x2c, 0xa5, 0xd9, 0xc2, 0x93, 0xc2,
	0xaf, 0x52, 0x30, 0x17, 0x4d, 0x57, 0xd9, 0xdc, 0xd4, 0x2d, 0xa2, 0x7a, 0x65, 0x23, 0xf6, 0x45,
	0xa4, 0x53, 0x82, 0x9e, 0x9d, 0xb2, 0x00, 0xaf, 0x38, 0xf4, 0x90, 0x98, 0xb2, 0xee, 0x57, 0x6c,
	0xba, 0x34, 0x7d, 0xda, 0xcc, 0x4f, 0xf2, 0xf0, 0x73, 0x0a, 0x96, 0x2e, 0xb3, 0x9f, 0x65, 0xd3,
	0xf3, 0xda, 0x76, 0x14, 0xcb, 0xe9, 0xe2, 0x75, 0x48, 0xc3, 0x52, 0x9a, 0x2d, 0x18, 0xd6, 0xfb,
	0x70, 0xdc, 0xb5, 0x89, 0xac, 0xba, 0x1c, 0xed, 0xa5, 0x79, 0xb0, 0x70, 0xa5, 0x34, 0x77, 0xda,
	0xcc, 0x4f, 0x73, 0xb4, 0x11, 0x2a, 0x96, 0xa0, 0x6b, 0x93, 0x0d, 0x37, 0x08, 0x53, 0x85, 0xba,
	0xa6, 0xe6, 0x0b, 0x8e, 0xb4, 0x1b, 0x0c, 0x69, 0x58, 0x4a, 0xb3, 0x45, 0xd4, 0xa0, 0x49, 0x65,
	0xf6, 0x2d, 0x33, 0x1a, 0x67, 0x50, 0x50, 0x7d, 0x83, 0x3b, 0xb4, 0xc4, 0x16, 0x3f, 0x4b, 0xc1,
	0x7c, 0xd7, 0x08, 0xf3, 0xdd, 0x77, 0x10, 0x2d, 0x32, 0xcd, 0x2b, 0x40, 0xd1, 0x2b, 0xee, 0x25,
	0x6c, 0x79, 0xed, 0xdb, 0x8e, 0xef, 0xcc, 0xb0, 0xb6, 0x58, 0x59, 0xdb, 0xe8, 0x0b, 0x70, 0x5c,
	0x75, 0x2d, 0x8b, 0x98, 0x4e, 0xa4, 0xba, 0xa4, 0x31, 0xfe, 0x8d, 0x61, 0x3d, 0x81, 0xd7, 0x04,
	0x4b, 0x20, 0xcd, 0x32, 0x93, 0x2e, 0x7d, 0xa5, 0xef, 0x92, 0xcf, 0xf8, 0xe1, 0xe9, 0x50, 0x88,
	0xa5, 0x29, 0xfe, 0x2d, 0xf0, 0x1a, 0x7f, 0x15, 0xde, 0x0c, 0x16, 0xbb, 0x7e, 0x7d, 0xb2, 0x3d,
	0x38, 0x48, 0x21, 0xe2, 0xa7, 0x00, 0xde, 0xea, 0xa2, 0x8d, 0x07, 0xbd, 0x02, 0xd3, 0x21, 0x3e,
	0x3f, 0xda, 0x9f, 0x24, 0x8c, 0x76, 0x97, 0x66, 0x21, 0x0e, 0xdd, 0x10, 0xe5, 0xb7, 0xe0, 0xad,
	0x0d, 0x43, 0xd1, 0x6b, 0x4a, 0xc5, 0x20, 0x5f, 0xaf, 0x5b, 0x44, 0xd1, 0x24, 0x72, 0xa2, 0x58,
	0x9a, 0x7d, 0xee, 0x53, 0xf3, 0xa7, 0x00, 0xe6, 0xba, 0xa9, 0xe6, 0x00, 0xbf, 0x0f, 0x33, 0xaa,
	0xe0, 0x90, 0x6d, 0xc6, 0x22, 0x5b, 0x3e, 0x0f, 0xc7, 0xfb, 0x4e, 0xcb, 0x69, 0x22, 0xd0, 0x6d,
	0x50, 0xdd, 0x2c, 0xbd, 0xef, 0x41, 0x39, 0x6d, 0xe6, 0xf3, 0x3c, 0x81, 0x5d, 0x14, 0x61, 0x69,
	0x56, 0x8d, 0xf5, 0x02, 0xef, 0xc1, 0x6c, 0xe0, 0x5f, 0x59, 0x8c, 0x72, 0xe7, 0xc7, 0xfd, 0x34,
	0x05, 0x6f, 0xc4, 0xea, 0xe5, 0xa0, 0x8f, 0xe0, 0x4c, 0xe8, 0x6b, 0x30, 0x42, 0x26, 0x00, 0xfc,
	0x45, 0x0e, 0xf8, 0x46, 0x3b, 0xe0, 0x50, 0x09, 0x96, 0xa6, 0xd5, 0x4e, 0xd3, 0x9e, 0xc9, 0x7d,
	0x6a, 0xed, 0x13, 0xdd, 0x21, 0x5a, 0xd4, 0x64, 0xaa, 0x4f, 0x93, 0x71, 0x4a, 0xb0, 0x34, 0x1d,
	0x7c, 0x0e, 0x4d, 0xe2, 0x87, 0xf0, 0x96, 0x37, 0x2a, 0xac, 0xab, 0xaa, 0x5b, 0x73, 0x0d, 0xc5,
	0xa1, 0x56, 0x5b, 0x5d, 0xf5, 0xb5, 0x57, 0x7e, 0x9b, 0x82, 0xb9, 0x6e, 0xea, 0x78, 0x58, 0x9f,
	0x01, 0x78, 0xa3, 0x25, 0xf3, 0x72, 0xd5, 0xa2, 0x27, 0xce, 0x81, 0x5c, 0x35, 0x68, 0x45, 0x31,
	0x78, 0x78, 0x6f, 0xc6, 0x62, 0xdd, 0x24, 0x2a, 0x83, 0x7b, 0xd7, 0x83, 0xfb, 0x8b, 0x57, 0xf9,
	0xdb, 0xc9, 0xba, 0x87, 0x27, 0x63, 0x4b, 0x19, 0x3b, 0x52, 0x55, 0xdb, 0xcc, 0xe6, 0x36, 0x33,
	0x89, 0x7e, 0x08, 0xe0, 0x8c, 0x5b, 0xf7, 0x2e, 0x29, 0x6d, 0xbe, 0xf8, 0x71, 0x5f, 0x4e, 0xb8,
	0x97, 0xf7, 0x98, 0x8a, 0x47, 0x96, 0xa2, 0x1e, 0x12, 0xab, 0x3d, 0x25, 0x71, 0xfa, 0xb1, 0x84,
	0xfc, 0xcf, 0x51, 0x6f, 0xbc, 0x7e, 0x93, 0xf3, 0x7a, 0x4c, 0x24, 0x86, 0x5c, 0xe7, 0x40, 0x39,
	0x19, 0x70, 0x92, 0x79, 0x9b, 0x82, 0xf9, 0xae, 0x5e, 0xf0, 0x54, 0x3e, 0x07, 0xf0, 0x7e, 0x6c,
	0x2a, 0x69, 0x9d, 0xed, 0x33, 0x22, 0x6b, 0xe2, 0x80, 0x92, 0xe9, 0xbe, 0x6c, 0x28, 0xb6, 0x23,
	0x3b, 0x96, 0x72, 0x4c, 0x2c, 0xfb, 0xff, 0x99, 0xe8, 0xa5, 0xce, 0x44, 0x7f, 0xce, 0x1d, 0x0a,
	0x0e, 0xcc, 0xcf, 0xf7, 0x1f, 0x2a, 0xb6, 0xf3, 0x48, 0x38, 0x83, 0x9e, 0xc0, 0x49, 0x9e, 0x21,
	0x87, 0xa3, 0x3c, 0x57, 0xf2, 0x73, 0x3c, 0xf9, 0xb3, 0x2d, 0xc9, 0x17, 0xaa, 0xb1, 0x74, 0xd5,
	0x8d, 0xb2, 0xdb, 0xf8, 0x47, 0x00, 0xce, 0x05, 0x9b, 0x52, 0x62, 0x97, 0xd4, 0xc1, 0x92, 0x7d,
	0x51, 0x57, 0x8f, 0x17, 0x00, 0x66, 0x3a, 0x1d, 0xe2, 0x79, 0xd7, 0xe1, 0xb5, 0xf6, 0x2b, 0xb5,
	0x68, 0x8b, 0x1f, 0x25, 0x0c, 0x57, 0x9b, 0x6e, 0x7e, 0xde, 0x4d, 0xe9, 0x6d, 0x26, 0x2f, 0xec,
	0xe6, 0xb2, 0xf4, 0x0f, 0x04, 0x47, 0xbe, 0xe6, 0xb1, 0xa2, 0x9f, 0x03, 0xc8, 0x6e, 0x47, 0x36,
	0xba, 0x9b, 0xd0, 0xd9, 0xe8, 0xe5, 0x2e, 0xbb, 0xdc, 0x9f, 0x90, 0xef, 0x0a, 0x5e, 0xfe, 0xc1,
	0x1f, 0xff, 0xfe, 0x93, 0x54, 0x01, 0x7d, 0x58, 0x8c, 0x7b, 0xab, 0x08, 0x9f, 0x2a, 0x82, 0x77,
	0x1a, 0xe6, 0xe0, 0x2f, 0x01, 0x1c, 0xf5, 0xef, 0x47, 0x28, 0xb1, 0xd9, 0xe8, 0xf5, 0x2c, 0xbb,
	0xd2, 0xa7, 0x14, 0xf7, 0x76, 0x85, 0x79, 0x5b, 0x44, 0x8b, 0x49, 0xbd, 0xf5, 0x7d, 0x7c, 0x01,
	0xe0, 0x44, 0xcb, 0xa3, 0x04, 0x5a, 0x4b, 0xba, 0x7b, 0x62, 0x9e, 0x61, 0xb2, 0x0f, 0x06, 0x13,
	0xe6, 0x18, 0x4a, 0x0c, 0xc3, 0x03, 0xb4, 0x9a, 0x38, 0xe2, 0x5c, 0x43, 0xf1, 0x7b, 0xfc, 0x65,
	0xe7, 0x09, 0x7a, 0x0b, 0xe0, 0xf5, 0xd8, 0xd1, 0x0f, 0x6d, 0xf4, 0x3b, 0xdf, 0xc5, 0x8c, 0xa1,
	0xd9, 0xcd, 0xf3, 0x29, 0xe1, 0x40, 0xb7, 0x19, 0xd0, 0x75, 0xf4, 0x69, 0x42, 0xa0, 0xe1, 0xfd,
	0x40, 0xdc, 0xe3, 0x64, 0x8b, 0x61, 0xfa, 0x4f, 0xf4, 0xf2, 0xda, 0x7a, 0xbf, 0x40, 0x9f, 0xf5,
	0xeb, 0x6a, 0xec, 0x0d, 0x30, 0xbb, 0x75, 0x5e, 0x35, 0x1c, 0x73, 0x99, 0x61, 0xde, 0x40, 0xeb,
	0x7d, 0x63, 0x36, 0x89, 0x23, 0xeb, 0x66, 0x78, 0x30, 0xa1, 0x7f, 0x03, 0x38, 0x1b, 0x3f, 0xfe,
	0xa2, 0xa4, 0xf9, 0x39, 0x73, 0x30, 0xcf, 0x7e, 0x76, 0x4e, 0x2d, 0x03, 0xa6, 0xb9, 0xdb, 0x9c,
	0x8d, 0xfe, 0x06, 0xe0, 0x74, 0xcc, 0xdc, 0x8b, 0xd6, 0xfb, 0xf5, 0xb3, 0x63, 0x16, 0xcf, 0x96,
	0xce, 0xa3, 0x82, 0xe3, 0xdc, 0x60, 0x38, 0x3f, 0x46, 0x6b, 0x7d, 0xe3, 0x0c, 0x67, 0x5d, 0xf4,
	0x7b, 0x00, 0xc7, 0xa3, 0x4f, 0x81, 0x68, 0x35, 0x71, 0xd7, 0xee, 0x78, 0x8f, 0xcc, 0xae, 0x0d,
	0x24, 0xcb, 0xe1, 0x7c, 0xcc, 0xe0, 0xdc, 0x43, 0x2b, 0x7d, 0xb6, 0x21, 0xb9, 0xd2, 0x90, 0x75,
	0x0d, 0xfd, 0x13, 0xc0, 0xd9, 0xf8, 0x81, 0x3a, 0x71, 0x75, 0x9e, 0x39, 0xde, 0x27, 0xae, 0xce,
	0xb3, 0xa7, 0x7a, 0xbc, 0xce, 0x60, 0xae, 0xa1, 0xfb, 0x7d, 0x9c, 0x6f, 0xb2, 0xe2, 0xe9, 0x0b,
	0xea, 0xf2, 0x4f, 0x00, 0x4e, 0xb5, 0x8f, 0x1c, 0xe8, 0x93, 0xc1, 0xe6, 0x89, 0x00, 0xde, 0xa7,
	0x03, 0xcb, 0x73, 0x60, 0x5f, 0x66, 0xc0, 0x56, 0xd1, 0x97, 0x12, 0x02, 0xeb, 0x18, 0x8c, 0xd0,
	0xbf, 0x00, 0x9c, 0xeb, 0x32, 0x49, 0x27, 0x6e, 0xab, 0x67, 0xdf, 0x07, 0x12, 0xb7, 0xd5, 0x1e,
	0x03, 0x7d, 0xdf, 0x67, 0x26, 0x3b, 0x3c, 0xfc, 0x2c, 0x8a, 0xd9, 0xb6, 0x74, 0xf0, 0xfc, 0x75,
	0x0e, 0xbc, 0x7c, 0x9d, 0x03, 0x7f, 0x7d, 0x9d, 0x03, 0xcf, 0xde, 0xe4, 0x86, 0x5e, 0xbe, 0xc9,
	0x0d, 0xfd, 0xf9, 0x4d, 0x6e, 0xe8, 0xdb, 0x3b, 0x91, 0x21, 0x9e, 0xeb, 0x5f, 0x34, 0x94, 0x8a,
	0x1d, 0x18, 0x3b, 0xbe, 0xf3, 0x51, 0xf1, 0x71, 0xb7, 0x7f, 0xe2, 0xa8, 0x86, 0x4e, 0x4c, 0xc7,
	0xff, 0x77, 0x96, 0xff, 0xdc, 0x3d, 0xca, 0xfe, 0xdc, 0xfd, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xf0, 0xa4, 0x15, 0x3f, 0xd4, 0x1b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Pools returns all concentrated liquidity pools
	Pools(ctx context.Context, in *PoolsRequest, opts ...grpc.CallOption) (*PoolsResponse, error)
	// Params returns concentrated liquidity module params.
	Params(ctx context.Context, in *ParamsRequest, opts ...grpc.CallOption) (*ParamsResponse, error)
	// UserPositions returns all concentrated postitions of some address.
	UserPositions(ctx context.Context, in *UserPositionsRequest, opts ...grpc.CallOption) (*UserPositionsResponse, error)
	// LiquidityPerTickRange returns the amount of liquidity per every tick range
	// existing within the given pool
	LiquidityPerTickRange(ctx context.Context, in *LiquidityPerTickRangeRequest, opts ...grpc.CallOption) (*LiquidityPerTickRangeResponse, error)
	// LiquidityNetInDirection returns liquidity net in the direction given.
	// Uses the bound if specified, if not uses either min tick / max tick
	// depending on the direction.
	LiquidityNetInDirection(ctx context.Context, in *LiquidityNetInDirectionRequest, opts ...grpc.CallOption) (*LiquidityNetInDirectionResponse, error)
	// ClaimableSpreadRewards returns the amount of spread rewards that can be
	// claimed by a position with the given id.
	ClaimableSpreadRewards(ctx context.Context, in *ClaimableSpreadRewardsRequest, opts ...grpc.CallOption) (*ClaimableSpreadRewardsResponse, error)
	// ClaimableIncentives returns the amount of incentives that can be claimed
	// and how many would be forfeited by a position with the given id.
	ClaimableIncentives(ctx context.Context, in *ClaimableIncentivesRequest, opts ...grpc.CallOption) (*ClaimableIncentivesResponse, error)
	// PositionById returns a position with the given id.
	PositionById(ctx context.Context, in *PositionByIdRequest, opts ...grpc.CallOption) (*PositionByIdResponse, error)
	// PoolAccumulatorRewards returns the pool-global accumulator rewards.
	// Contains spread factor rewards and uptime rewards.
	PoolAccumulatorRewards(ctx context.Context, in *PoolAccumulatorRewardsRequest, opts ...grpc.CallOption) (*PoolAccumulatorRewardsResponse, error)
	// IncentiveRecords returns the incentive records for a given poolId
	IncentiveRecords(ctx context.Context, in *IncentiveRecordsRequest, opts ...grpc.CallOption) (*IncentiveRecordsResponse, error)
	// TickAccumulatorTrackers returns the tick accumulator trackers.
	// Contains spread factor and uptime accumulator trackers.
	TickAccumulatorTrackers(ctx context.Context, in *TickAccumulatorTrackersRequest, opts ...grpc.CallOption) (*TickAccumulatorTrackersResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Pools(ctx context.Context, in *PoolsRequest, opts ...grpc.CallOption) (*PoolsResponse, error) {
	out := new(PoolsResponse)
	err := c.cc.Invoke(ctx, "/osmosis.concentratedliquidity.v1beta1.Query/Pools", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Params(ctx context.Context, in *ParamsRequest, opts ...grpc.CallOption) (*ParamsResponse, error) {
	out := new(ParamsResponse)
	err := c.cc.Invoke(ctx, "/osmosis.concentratedliquidity.v1beta1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserPositions(ctx context.Context, in *UserPositionsRequest, opts ...grpc.CallOption) (*UserPositionsResponse, error) {
	out := new(UserPositionsResponse)
	err := c.cc.Invoke(ctx, "/osmosis.concentratedliquidity.v1beta1.Query/UserPositions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidityPerTickRange(ctx context.Context, in *LiquidityPerTickRangeRequest, opts ...grpc.CallOption) (*LiquidityPerTickRangeResponse, error) {
	out := new(LiquidityPerTickRangeResponse)
	err := c.cc.Invoke(ctx, "/osmosis.concentratedliquidity.v1beta1.Query/LiquidityPerTickRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LiquidityNetInDirection(ctx context.Context, in *LiquidityNetInDirectionRequest, opts ...grpc.CallOption) (*LiquidityNetInDirectionResponse, error) {
	out := new(LiquidityNetInDirectionResponse)
	err := c.cc.Invoke(ctx, "/osmosis.concentratedliquidity.v1beta1.Query/LiquidityNetInDirection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClaimableSpreadRewards(ctx context.Context, in *ClaimableSpreadRewardsRequest, opts ...grpc.CallOption) (*ClaimableSpreadRewardsResponse, error) {
	out := new(ClaimableSpreadRewardsResponse)
	err := c.cc.Invoke(ctx, "/osmosis.concentratedliquidity.v1beta1.Query/ClaimableSpreadRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ClaimableIncentives(ctx context.Context, in *ClaimableIncentivesRequest, opts ...grpc.CallOption) (*ClaimableIncentivesResponse, error) {
	out := new(ClaimableIncentivesResponse)
	err := c.cc.Invoke(ctx, "/osmosis.concentratedliquidity.v1beta1.Query/ClaimableIncentives", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PositionById(ctx context.Context, in *PositionByIdRequest, opts ...grpc.CallOption) (*PositionByIdResponse, error) {
	out := new(PositionByIdResponse)
	err := c.cc.Invoke(ctx, "/osmosis.concentratedliquidity.v1beta1.Query/PositionById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PoolAccumulatorRewards(ctx context.Context, in *PoolAccumulatorRewardsRequest, opts ...grpc.CallOption) (*PoolAccumulatorRewardsResponse, error) {
	out := new(PoolAccumulatorRewardsResponse)
	err := c.cc.Invoke(ctx, "/osmosis.concentratedliquidity.v1beta1.Query/PoolAccumulatorRewards", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IncentiveRecords(ctx context.Context, in *IncentiveRecordsRequest, opts ...grpc.CallOption) (*IncentiveRecordsResponse, error) {
	out := new(IncentiveRecordsResponse)
	err := c.cc.Invoke(ctx, "/osmosis.concentratedliquidity.v1beta1.Query/IncentiveRecords", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TickAccumulatorTrackers(ctx context.Context, in *TickAccumulatorTrackersRequest, opts ...grpc.CallOption) (*TickAccumulatorTrackersResponse, error) {
	out := new(TickAccumulatorTrackersResponse)
	err := c.cc.Invoke(ctx, "/osmosis.concentratedliquidity.v1beta1.Query/TickAccumulatorTrackers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Pools returns all concentrated liquidity pools
	Pools(context.Context, *PoolsRequest) (*PoolsResponse, error)
	// Params returns concentrated liquidity module params.
	Params(context.Context, *ParamsRequest) (*ParamsResponse, error)
	// UserPositions returns all concentrated postitions of some address.
	UserPositions(context.Context, *UserPositionsRequest) (*UserPositionsResponse, error)
	// LiquidityPerTickRange returns the amount of liquidity per every tick range
	// existing within the given pool
	LiquidityPerTickRange(context.Context, *LiquidityPerTickRangeRequest) (*LiquidityPerTickRangeResponse, error)
	// LiquidityNetInDirection returns liquidity net in the direction given.
	// Uses the bound if specified, if not uses either min tick / max tick
	// depending on the direction.
	LiquidityNetInDirection(context.Context, *LiquidityNetInDirectionRequest) (*LiquidityNetInDirectionResponse, error)
	// ClaimableSpreadRewards returns the amount of spread rewards that can be
	// claimed by a position with the given id.
	ClaimableSpreadRewards(context.Context, *ClaimableSpreadRewardsRequest) (*ClaimableSpreadRewardsResponse, error)
	// ClaimableIncentives returns the amount of incentives that can be claimed
	// and how many would be forfeited by a position with the given id.
	ClaimableIncentives(context.Context, *ClaimableIncentivesRequest) (*ClaimableIncentivesResponse, error)
	// PositionById returns a position with the given id.
	PositionById(context.Context, *PositionByIdRequest) (*PositionByIdResponse, error)
	// PoolAccumulatorRewards returns the pool-global accumulator rewards.
	// Contains spread factor rewards and uptime rewards.
	PoolAccumulatorRewards(context.Context, *PoolAccumulatorRewardsRequest) (*PoolAccumulatorRewardsResponse, error)
	// IncentiveRecords returns the incentive records for a given poolId
	IncentiveRecords(context.Context, *IncentiveRecordsRequest) (*IncentiveRecordsResponse, error)
	// TickAccumulatorTrackers returns the tick accumulator trackers.
	// Contains spread factor and uptime accumulator trackers.
	TickAccumulatorTrackers(context.Context, *TickAccumulatorTrackersRequest) (*TickAccumulatorTrackersResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Pools(ctx context.Context, req *PoolsRequest) (*PoolsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pools not implemented")
}
func (*UnimplementedQueryServer) Params(ctx context.Context, req *ParamsRequest) (*ParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) UserPositions(ctx context.Context, req *UserPositionsRequest) (*UserPositionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPositions not implemented")
}
func (*UnimplementedQueryServer) LiquidityPerTickRange(ctx context.Context, req *LiquidityPerTickRangeRequest) (*LiquidityPerTickRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidityPerTickRange not implemented")
}
func (*UnimplementedQueryServer) LiquidityNetInDirection(ctx context.Context, req *LiquidityNetInDirectionRequest) (*LiquidityNetInDirectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LiquidityNetInDirection not implemented")
}
func (*UnimplementedQueryServer) ClaimableSpreadRewards(ctx context.Context, req *ClaimableSpreadRewardsRequest) (*ClaimableSpreadRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimableSpreadRewards not implemented")
}
func (*UnimplementedQueryServer) ClaimableIncentives(ctx context.Context, req *ClaimableIncentivesRequest) (*ClaimableIncentivesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimableIncentives not implemented")
}
func (*UnimplementedQueryServer) PositionById(ctx context.Context, req *PositionByIdRequest) (*PositionByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PositionById not implemented")
}
func (*UnimplementedQueryServer) PoolAccumulatorRewards(ctx context.Context, req *PoolAccumulatorRewardsRequest) (*PoolAccumulatorRewardsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PoolAccumulatorRewards not implemented")
}
func (*UnimplementedQueryServer) IncentiveRecords(ctx context.Context, req *IncentiveRecordsRequest) (*IncentiveRecordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncentiveRecords not implemented")
}
func (*UnimplementedQueryServer) TickAccumulatorTrackers(ctx context.Context, req *TickAccumulatorTrackersRequest) (*TickAccumulatorTrackersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TickAccumulatorTrackers not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Pools_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Pools(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.concentratedliquidity.v1beta1.Query/Pools",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Pools(ctx, req.(*PoolsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.concentratedliquidity.v1beta1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*ParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserPositions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPositionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserPositions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.concentratedliquidity.v1beta1.Query/UserPositions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserPositions(ctx, req.(*UserPositionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidityPerTickRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiquidityPerTickRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidityPerTickRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.concentratedliquidity.v1beta1.Query/LiquidityPerTickRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidityPerTickRange(ctx, req.(*LiquidityPerTickRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LiquidityNetInDirection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LiquidityNetInDirectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LiquidityNetInDirection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.concentratedliquidity.v1beta1.Query/LiquidityNetInDirection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LiquidityNetInDirection(ctx, req.(*LiquidityNetInDirectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClaimableSpreadRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimableSpreadRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClaimableSpreadRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.concentratedliquidity.v1beta1.Query/ClaimableSpreadRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClaimableSpreadRewards(ctx, req.(*ClaimableSpreadRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ClaimableIncentives_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimableIncentivesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ClaimableIncentives(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.concentratedliquidity.v1beta1.Query/ClaimableIncentives",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ClaimableIncentives(ctx, req.(*ClaimableIncentivesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PositionById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PositionById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.concentratedliquidity.v1beta1.Query/PositionById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PositionById(ctx, req.(*PositionByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PoolAccumulatorRewards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PoolAccumulatorRewardsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PoolAccumulatorRewards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.concentratedliquidity.v1beta1.Query/PoolAccumulatorRewards",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PoolAccumulatorRewards(ctx, req.(*PoolAccumulatorRewardsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IncentiveRecords_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncentiveRecordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IncentiveRecords(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.concentratedliquidity.v1beta1.Query/IncentiveRecords",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IncentiveRecords(ctx, req.(*IncentiveRecordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TickAccumulatorTrackers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TickAccumulatorTrackersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TickAccumulatorTrackers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.concentratedliquidity.v1beta1.Query/TickAccumulatorTrackers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TickAccumulatorTrackers(ctx, req.(*TickAccumulatorTrackersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "osmosis.concentratedliquidity.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Pools",
			Handler:    _Query_Pools_Handler,
		},
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "UserPositions",
			Handler:    _Query_UserPositions_Handler,
		},
		{
			MethodName: "LiquidityPerTickRange",
			Handler:    _Query_LiquidityPerTickRange_Handler,
		},
		{
			MethodName: "LiquidityNetInDirection",
			Handler:    _Query_LiquidityNetInDirection_Handler,
		},
		{
			MethodName: "ClaimableSpreadRewards",
			Handler:    _Query_ClaimableSpreadRewards_Handler,
		},
		{
			MethodName: "ClaimableIncentives",
			Handler:    _Query_ClaimableIncentives_Handler,
		},
		{
			MethodName: "PositionById",
			Handler:    _Query_PositionById_Handler,
		},
		{
			MethodName: "PoolAccumulatorRewards",
			Handler:    _Query_PoolAccumulatorRewards_Handler,
		},
		{
			MethodName: "IncentiveRecords",
			Handler:    _Query_IncentiveRecords_Handler,
		},
		{
			MethodName: "TickAccumulatorTrackers",
			Handler:    _Query_TickAccumulatorTrackers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "osmosis/concentrated-liquidity/query.proto",
}

func (m *UserPositionsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPositionsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserPositionsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UserPositionsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UserPositionsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UserPositionsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Positions) > 0 {
		for iNdEx := len(m.Positions) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Positions[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PositionByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PositionByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PositionByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PositionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PositionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PositionByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PositionByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PositionByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *PoolsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *PoolsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pools) > 0 {
		for iNdEx := len(m.Pools) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pools[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *ParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *TickLiquidityNet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TickLiquidityNet) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TickLiquidityNet) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TickIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TickIndex))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.LiquidityNet.Size()
		i -= size
		if _, err := m.LiquidityNet.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LiquidityDepthWithRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityDepthWithRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityDepthWithRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpperTick != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.UpperTick))
		i--
		dAtA[i] = 0x18
	}
	if m.LowerTick != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LowerTick))
		i--
		dAtA[i] = 0x10
	}
	{
		size := m.LiquidityAmount.Size()
		i -= size
		if _, err := m.LiquidityAmount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *LiquidityNetInDirectionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityNetInDirectionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityNetInDirectionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UseNoBound {
		i--
		if m.UseNoBound {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.BoundTick != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.BoundTick))
		i--
		dAtA[i] = 0x28
	}
	if m.UseCurTick {
		i--
		if m.UseCurTick {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.StartTick != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.StartTick))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TokenIn) > 0 {
		i -= len(m.TokenIn)
		copy(dAtA[i:], m.TokenIn)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TokenIn)))
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LiquidityNetInDirectionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityNetInDirectionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityNetInDirectionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.CurrentLiquidity.Size()
		i -= size
		if _, err := m.CurrentLiquidity.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.CurrentTick != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.CurrentTick))
		i--
		dAtA[i] = 0x10
	}
	if len(m.LiquidityDepths) > 0 {
		for iNdEx := len(m.LiquidityDepths) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LiquidityDepths[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *LiquidityPerTickRangeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityPerTickRangeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityPerTickRangeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *LiquidityPerTickRangeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LiquidityPerTickRangeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LiquidityPerTickRangeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Liquidity) > 0 {
		for iNdEx := len(m.Liquidity) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Liquidity[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ClaimableSpreadRewardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimableSpreadRewardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimableSpreadRewardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PositionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PositionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClaimableSpreadRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimableSpreadRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimableSpreadRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ClaimableSpreadRewards) > 0 {
		for iNdEx := len(m.ClaimableSpreadRewards) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClaimableSpreadRewards[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ClaimableIncentivesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimableIncentivesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimableIncentivesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PositionId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PositionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ClaimableIncentivesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClaimableIncentivesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClaimableIncentivesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ForfeitedIncentives) > 0 {
		for iNdEx := len(m.ForfeitedIncentives) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ForfeitedIncentives[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.ClaimableIncentives) > 0 {
		for iNdEx := len(m.ClaimableIncentives) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ClaimableIncentives[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PoolAccumulatorRewardsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolAccumulatorRewardsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolAccumulatorRewardsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PoolAccumulatorRewardsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolAccumulatorRewardsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolAccumulatorRewardsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UptimeGrowthGlobal) > 0 {
		for iNdEx := len(m.UptimeGrowthGlobal) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UptimeGrowthGlobal[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SpreadRewardGrowthGlobal) > 0 {
		for iNdEx := len(m.SpreadRewardGrowthGlobal) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SpreadRewardGrowthGlobal[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *TickAccumulatorTrackersRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TickAccumulatorTrackersRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TickAccumulatorTrackersRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TickIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TickIndex))
		i--
		dAtA[i] = 0x10
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TickAccumulatorTrackersResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TickAccumulatorTrackersResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TickAccumulatorTrackersResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UptimeTrackers) > 0 {
		for iNdEx := len(m.UptimeTrackers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.UptimeTrackers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SpreadRewardGrowthOppositeDirectionOfLastTraversal) > 0 {
		for iNdEx := len(m.SpreadRewardGrowthOppositeDirectionOfLastTraversal) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SpreadRewardGrowthOppositeDirectionOfLastTraversal[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *IncentiveRecordsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncentiveRecordsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncentiveRecordsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PoolId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.PoolId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IncentiveRecordsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncentiveRecordsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncentiveRecordsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.IncentiveRecords) > 0 {
		for iNdEx := len(m.IncentiveRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.IncentiveRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *UserPositionsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *UserPositionsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Positions) > 0 {
		for _, e := range m.Positions {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *PositionByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PositionId != 0 {
		n += 1 + sovQuery(uint64(m.PositionId))
	}
	return n
}

func (m *PositionByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Position.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *PoolsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *PoolsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pools) > 0 {
		for _, e := range m.Pools {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *ParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *ParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *TickLiquidityNet) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LiquidityNet.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.TickIndex != 0 {
		n += 1 + sovQuery(uint64(m.TickIndex))
	}
	return n
}

func (m *LiquidityDepthWithRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LiquidityAmount.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.LowerTick != 0 {
		n += 1 + sovQuery(uint64(m.LowerTick))
	}
	if m.UpperTick != 0 {
		n += 1 + sovQuery(uint64(m.UpperTick))
	}
	return n
}

func (m *LiquidityNetInDirectionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	l = len(m.TokenIn)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.StartTick != 0 {
		n += 1 + sovQuery(uint64(m.StartTick))
	}
	if m.UseCurTick {
		n += 2
	}
	if m.BoundTick != 0 {
		n += 1 + sovQuery(uint64(m.BoundTick))
	}
	if m.UseNoBound {
		n += 2
	}
	return n
}

func (m *LiquidityNetInDirectionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LiquidityDepths) > 0 {
		for _, e := range m.LiquidityDepths {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.CurrentTick != 0 {
		n += 1 + sovQuery(uint64(m.CurrentTick))
	}
	l = m.CurrentLiquidity.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *LiquidityPerTickRangeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	return n
}

func (m *LiquidityPerTickRangeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Liquidity) > 0 {
		for _, e := range m.Liquidity {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *ClaimableSpreadRewardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PositionId != 0 {
		n += 1 + sovQuery(uint64(m.PositionId))
	}
	return n
}

func (m *ClaimableSpreadRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ClaimableSpreadRewards) > 0 {
		for _, e := range m.ClaimableSpreadRewards {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *ClaimableIncentivesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PositionId != 0 {
		n += 1 + sovQuery(uint64(m.PositionId))
	}
	return n
}

func (m *ClaimableIncentivesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ClaimableIncentives) > 0 {
		for _, e := range m.ClaimableIncentives {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.ForfeitedIncentives) > 0 {
		for _, e := range m.ForfeitedIncentives {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *PoolAccumulatorRewardsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	return n
}

func (m *PoolAccumulatorRewardsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SpreadRewardGrowthGlobal) > 0 {
		for _, e := range m.SpreadRewardGrowthGlobal {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.UptimeGrowthGlobal) > 0 {
		for _, e := range m.UptimeGrowthGlobal {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *TickAccumulatorTrackersRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	if m.TickIndex != 0 {
		n += 1 + sovQuery(uint64(m.TickIndex))
	}
	return n
}

func (m *TickAccumulatorTrackersResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SpreadRewardGrowthOppositeDirectionOfLastTraversal) > 0 {
		for _, e := range m.SpreadRewardGrowthOppositeDirectionOfLastTraversal {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if len(m.UptimeTrackers) > 0 {
		for _, e := range m.UptimeTrackers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *IncentiveRecordsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PoolId != 0 {
		n += 1 + sovQuery(uint64(m.PoolId))
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *IncentiveRecordsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.IncentiveRecords) > 0 {
		for _, e := range m.IncentiveRecords {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *UserPositionsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPositionsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPositionsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UserPositionsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UserPositionsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UserPositionsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Positions", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Positions = append(m.Positions, model.FullPositionBreakdown{})
			if err := m.Positions[len(m.Positions)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PositionByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PositionByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PositionByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			m.PositionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PositionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PositionByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PositionByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PositionByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pools", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pools = append(m.Pools, &types.Any{})
			if err := m.Pools[len(m.Pools)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TickLiquidityNet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TickLiquidityNet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TickLiquidityNet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityNet", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidityNet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickIndex", wireType)
			}
			m.TickIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TickIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityDepthWithRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityDepthWithRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityDepthWithRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityAmount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LiquidityAmount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LowerTick", wireType)
			}
			m.LowerTick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LowerTick |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpperTick", wireType)
			}
			m.UpperTick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpperTick |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityNetInDirectionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityNetInDirectionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityNetInDirectionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenIn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenIn = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartTick", wireType)
			}
			m.StartTick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartTick |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseCurTick", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseCurTick = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BoundTick", wireType)
			}
			m.BoundTick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BoundTick |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UseNoBound", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.UseNoBound = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityNetInDirectionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityNetInDirectionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityNetInDirectionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LiquidityDepths", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LiquidityDepths = append(m.LiquidityDepths, TickLiquidityNet{})
			if err := m.LiquidityDepths[len(m.LiquidityDepths)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentTick", wireType)
			}
			m.CurrentTick = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentTick |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentLiquidity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.CurrentLiquidity.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityPerTickRangeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityPerTickRangeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityPerTickRangeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LiquidityPerTickRangeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LiquidityPerTickRangeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LiquidityPerTickRangeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Liquidity", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Liquidity = append(m.Liquidity, LiquidityDepthWithRange{})
			if err := m.Liquidity[len(m.Liquidity)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimableSpreadRewardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimableSpreadRewardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimableSpreadRewardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			m.PositionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PositionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimableSpreadRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimableSpreadRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimableSpreadRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimableSpreadRewards", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimableSpreadRewards = append(m.ClaimableSpreadRewards, types2.Coin{})
			if err := m.ClaimableSpreadRewards[len(m.ClaimableSpreadRewards)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimableIncentivesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimableIncentivesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimableIncentivesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PositionId", wireType)
			}
			m.PositionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PositionId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ClaimableIncentivesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClaimableIncentivesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClaimableIncentivesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClaimableIncentives", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClaimableIncentives = append(m.ClaimableIncentives, types2.Coin{})
			if err := m.ClaimableIncentives[len(m.ClaimableIncentives)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ForfeitedIncentives", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ForfeitedIncentives = append(m.ForfeitedIncentives, types2.Coin{})
			if err := m.ForfeitedIncentives[len(m.ForfeitedIncentives)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolAccumulatorRewardsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolAccumulatorRewardsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolAccumulatorRewardsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PoolAccumulatorRewardsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolAccumulatorRewardsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolAccumulatorRewardsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpreadRewardGrowthGlobal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpreadRewardGrowthGlobal = append(m.SpreadRewardGrowthGlobal, types2.DecCoin{})
			if err := m.SpreadRewardGrowthGlobal[len(m.SpreadRewardGrowthGlobal)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UptimeGrowthGlobal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UptimeGrowthGlobal = append(m.UptimeGrowthGlobal, model.UptimeTracker{})
			if err := m.UptimeGrowthGlobal[len(m.UptimeGrowthGlobal)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TickAccumulatorTrackersRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TickAccumulatorTrackersRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TickAccumulatorTrackersRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TickIndex", wireType)
			}
			m.TickIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TickIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TickAccumulatorTrackersResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TickAccumulatorTrackersResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TickAccumulatorTrackersResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpreadRewardGrowthOppositeDirectionOfLastTraversal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpreadRewardGrowthOppositeDirectionOfLastTraversal = append(m.SpreadRewardGrowthOppositeDirectionOfLastTraversal, types2.DecCoin{})
			if err := m.SpreadRewardGrowthOppositeDirectionOfLastTraversal[len(m.SpreadRewardGrowthOppositeDirectionOfLastTraversal)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UptimeTrackers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UptimeTrackers = append(m.UptimeTrackers, model.UptimeTracker{})
			if err := m.UptimeTrackers[len(m.UptimeTrackers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncentiveRecordsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncentiveRecordsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncentiveRecordsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			m.PoolId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PoolId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncentiveRecordsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncentiveRecordsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncentiveRecordsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncentiveRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IncentiveRecords = append(m.IncentiveRecords, types1.IncentiveRecord{})
			if err := m.IncentiveRecords[len(m.IncentiveRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
