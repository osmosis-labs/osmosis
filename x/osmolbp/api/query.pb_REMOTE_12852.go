// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: osmosis/osmolbp/v1/query.proto

package api

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryLBPs struct {
	// pagination defines an pagination for the request.
	Pagination *query.PageRequest `protobuf:"bytes,4,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryLBPs) Reset()         { *m = QueryLBPs{} }
func (m *QueryLBPs) String() string { return proto.CompactTextString(m) }
func (*QueryLBPs) ProtoMessage()    {}
func (*QueryLBPs) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b2073352589b05c, []int{0}
}
func (m *QueryLBPs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLBPs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLBPs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLBPs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLBPs.Merge(m, src)
}
func (m *QueryLBPs) XXX_Size() int {
	return m.Size()
}
func (m *QueryLBPs) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLBPs.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLBPs proto.InternalMessageInfo

type QueryLBPsResponse struct {
	Lbps       []LBP               `protobuf:"bytes,1,rep,name=lbps,proto3" json:"lbps"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryLBPsResponse) Reset()         { *m = QueryLBPsResponse{} }
func (m *QueryLBPsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLBPsResponse) ProtoMessage()    {}
func (*QueryLBPsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b2073352589b05c, []int{1}
}
func (m *QueryLBPsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLBPsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLBPsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLBPsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLBPsResponse.Merge(m, src)
}
func (m *QueryLBPsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLBPsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLBPsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLBPsResponse proto.InternalMessageInfo

// Request type for Query/LBP
type QueryLBP struct {
	// LBP ID
	LbpId uint64 `protobuf:"varint,1,opt,name=lbp_id,json=lbpId,proto3" json:"lbp_id,omitempty"`
}

func (m *QueryLBP) Reset()         { *m = QueryLBP{} }
func (m *QueryLBP) String() string { return proto.CompactTextString(m) }
func (*QueryLBP) ProtoMessage()    {}
func (*QueryLBP) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b2073352589b05c, []int{2}
}
func (m *QueryLBP) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLBP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLBP.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLBP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLBP.Merge(m, src)
}
func (m *QueryLBP) XXX_Size() int {
	return m.Size()
}
func (m *QueryLBP) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLBP.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLBP proto.InternalMessageInfo

type QueryLBPResponse struct {
	Lbp LBP `protobuf:"bytes,1,opt,name=lbp,proto3" json:"lbp"`
}

func (m *QueryLBPResponse) Reset()         { *m = QueryLBPResponse{} }
func (m *QueryLBPResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLBPResponse) ProtoMessage()    {}
func (*QueryLBPResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b2073352589b05c, []int{3}
}
func (m *QueryLBPResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLBPResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLBPResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLBPResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLBPResponse.Merge(m, src)
}
func (m *QueryLBPResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLBPResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLBPResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLBPResponse proto.InternalMessageInfo

// Request type for Query/LBP
type QueryUserPosition struct {
	// ID of the LBP
	LbpId uint64 `protobuf:"varint,1,opt,name=lbp_id,json=lbpId,proto3" json:"lbp_id,omitempty"`
	// user account address
	User string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
}

func (m *QueryUserPosition) Reset()         { *m = QueryUserPosition{} }
func (m *QueryUserPosition) String() string { return proto.CompactTextString(m) }
func (*QueryUserPosition) ProtoMessage()    {}
func (*QueryUserPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b2073352589b05c, []int{4}
}
func (m *QueryUserPosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserPosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserPosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserPosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserPosition.Merge(m, src)
}
func (m *QueryUserPosition) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserPosition) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserPosition.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserPosition proto.InternalMessageInfo

type QueryUserPositionResponse struct {
	UserPosition UserPosition `protobuf:"bytes,1,opt,name=user_position,json=userPosition,proto3" json:"user_position"`
}

func (m *QueryUserPositionResponse) Reset()         { *m = QueryUserPositionResponse{} }
func (m *QueryUserPositionResponse) String() string { return proto.CompactTextString(m) }
func (*QueryUserPositionResponse) ProtoMessage()    {}
func (*QueryUserPositionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_6b2073352589b05c, []int{5}
}
func (m *QueryUserPositionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryUserPositionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryUserPositionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryUserPositionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryUserPositionResponse.Merge(m, src)
}
func (m *QueryUserPositionResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryUserPositionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryUserPositionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryUserPositionResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*QueryLBPs)(nil), "osmosis.osmolbp.v1.QueryLBPs")
	proto.RegisterType((*QueryLBPsResponse)(nil), "osmosis.osmolbp.v1.QueryLBPsResponse")
	proto.RegisterType((*QueryLBP)(nil), "osmosis.osmolbp.v1.QueryLBP")
	proto.RegisterType((*QueryLBPResponse)(nil), "osmosis.osmolbp.v1.QueryLBPResponse")
	proto.RegisterType((*QueryUserPosition)(nil), "osmosis.osmolbp.v1.QueryUserPosition")
	proto.RegisterType((*QueryUserPositionResponse)(nil), "osmosis.osmolbp.v1.QueryUserPositionResponse")
}

func init() { proto.RegisterFile("osmosis/osmolbp/v1/query.proto", fileDescriptor_6b2073352589b05c) }

var fileDescriptor_6b2073352589b05c = []byte{
	// 517 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x93, 0x4f, 0x6f, 0xd3, 0x30,
	0x18, 0xc6, 0x93, 0x35, 0x9b, 0x98, 0x37, 0x24, 0xb0, 0x40, 0xeb, 0xa2, 0x91, 0x85, 0x08, 0x58,
	0x41, 0xaa, 0xad, 0x94, 0x3b, 0x87, 0x22, 0x81, 0xd0, 0x76, 0x28, 0x41, 0x5c, 0xb8, 0x4c, 0xf6,
	0x66, 0x65, 0x91, 0xd2, 0xd8, 0xab, 0x93, 0x0a, 0x34, 0xed, 0x02, 0x1f, 0x00, 0x24, 0xc4, 0x77,
	0xea, 0x71, 0x12, 0x17, 0x4e, 0x08, 0x5a, 0x3e, 0x08, 0xb2, 0xe3, 0x86, 0x54, 0xeb, 0x1f, 0x4e,
	0x71, 0xf2, 0x3c, 0x7e, 0x9f, 0xdf, 0xeb, 0xd7, 0x01, 0x1e, 0x97, 0x7d, 0x2e, 0x13, 0x89, 0xd5,
	0x33, 0xa5, 0x02, 0x0f, 0x43, 0x7c, 0x5e, 0xb0, 0xc1, 0x07, 0x24, 0x06, 0x3c, 0xe7, 0x10, 0x1a,
	0x1d, 0x19, 0x1d, 0x0d, 0x43, 0xf7, 0x4e, 0xcc, 0x63, 0xae, 0x65, 0xac, 0x56, 0xa5, 0xd3, 0xdd,
	0x8b, 0x39, 0x8f, 0x53, 0x86, 0x89, 0x48, 0x30, 0xc9, 0x32, 0x9e, 0x93, 0x3c, 0xe1, 0x99, 0x34,
	0xea, 0x93, 0x13, 0x5d, 0x08, 0x53, 0x22, 0x59, 0x19, 0x80, 0x87, 0x21, 0x65, 0x39, 0x09, 0xb1,
	0x20, 0x71, 0x92, 0x69, 0xb3, 0xf1, 0xce, 0x63, 0x92, 0x39, 0xc9, 0x59, 0xa9, 0x07, 0x6f, 0xc0,
	0xe6, 0x6b, 0x55, 0xe1, 0xa8, 0xdb, 0x93, 0xf0, 0x05, 0x00, 0xff, 0x0a, 0x34, 0x1d, 0xdf, 0x6e,
	0x6d, 0x75, 0x1e, 0xa1, 0x32, 0x0d, 0xa9, 0x34, 0x54, 0xb6, 0x63, 0xd2, 0x50, 0x8f, 0xc4, 0x2c,
	0x62, 0xe7, 0x05, 0x93, 0x79, 0x54, 0xdb, 0x19, 0x7c, 0xb6, 0xc1, 0xed, 0xaa, 0x6a, 0xc4, 0xa4,
	0xe0, 0x99, 0x64, 0x30, 0x04, 0x4e, 0x4a, 0x85, 0x6c, 0xda, 0x7e, 0xa3, 0xb5, 0xd5, 0xd9, 0x41,
	0xd7, 0x4f, 0x03, 0x1d, 0x75, 0x7b, 0x5d, 0x67, 0xf4, 0x73, 0xdf, 0x8a, 0xb4, 0x15, 0xbe, 0x9c,
	0x01, 0x5a, 0xd3, 0x40, 0x07, 0x2b, 0x81, 0xca, 0xbc, 0x19, 0xa2, 0xfb, 0xe0, 0xc6, 0x14, 0x08,
	0xde, 0x05, 0x1b, 0x29, 0x15, 0xc7, 0xc9, 0x69, 0xd3, 0xf6, 0xed, 0x96, 0x13, 0xad, 0xa7, 0x54,
	0xbc, 0x3a, 0x0d, 0x9e, 0x83, 0x5b, 0x53, 0x4b, 0x85, 0x8c, 0x41, 0x23, 0xa5, 0x42, 0xfb, 0x56,
	0x12, 0x2b, 0x67, 0xf0, 0xcc, 0x34, 0xfe, 0x56, 0xb2, 0x41, 0x8f, 0xcb, 0x44, 0x85, 0x2f, 0x08,
	0x84, 0x10, 0x38, 0x85, 0x64, 0x03, 0xdd, 0xd6, 0x66, 0xa4, 0xd7, 0xc1, 0x19, 0xd8, 0xbd, 0xb6,
	0xbf, 0xa2, 0x39, 0x04, 0x37, 0x95, 0xe9, 0x58, 0x18, 0xc1, 0x70, 0xf9, 0xf3, 0xb8, 0xea, 0x05,
	0x0c, 0xe0, 0x76, 0x51, 0xfb, 0xd6, 0xf9, 0xd4, 0x00, 0xeb, 0x3a, 0x0a, 0xf6, 0x81, 0xa3, 0xa7,
	0x7f, 0x6f, 0x5e, 0x9d, 0x6a, 0x8c, 0xee, 0xc3, 0xa5, 0xf2, 0x14, 0x32, 0xd8, 0xff, 0xf8, 0xfd,
	0xcf, 0xd7, 0xb5, 0x5d, 0xb8, 0x83, 0xcd, 0x2d, 0xad, 0x5d, 0x3c, 0x3d, 0x53, 0x09, 0x1a, 0x6a,
	0x0a, 0x7b, 0xcb, 0xca, 0xb9, 0x0f, 0x96, 0xa9, 0x55, 0x56, 0x4b, 0x67, 0x05, 0xd0, 0x5f, 0x90,
	0x85, 0x2f, 0xca, 0x73, 0xbf, 0x84, 0xdf, 0x6c, 0xb0, 0x3d, 0x33, 0x93, 0xc5, 0xdd, 0xd4, 0x6d,
	0x6e, 0xfb, 0xbf, 0x6c, 0x15, 0x10, 0xd6, 0x40, 0x8f, 0xe1, 0xc1, 0x2a, 0x20, 0x7c, 0xa1, 0x86,
	0x71, 0xd9, 0x3d, 0x1c, 0xfd, 0xf6, 0xac, 0xd1, 0xd8, 0xb3, 0xaf, 0xc6, 0x9e, 0xfd, 0x6b, 0xec,
	0xd9, 0x5f, 0x26, 0x9e, 0x75, 0x35, 0xf1, 0xac, 0x1f, 0x13, 0xcf, 0x7a, 0xd7, 0x8e, 0x93, 0xfc,
	0xac, 0xa0, 0xe8, 0x84, 0xf7, 0xb1, 0xe1, 0x68, 0xa7, 0x84, 0xca, 0xe9, 0x0b, 0x7e, 0x5f, 0x05,
	0x10, 0x91, 0xd0, 0x0d, 0xfd, 0x4b, 0x3f, 0xfd, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x0e, 0x12, 0x76,
	0x73, 0x88, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Returns list of LBPs ordered by the creation time
	LBPs(ctx context.Context, in *QueryLBPs, opts ...grpc.CallOption) (*QueryLBPsResponse, error)
	// Returns the specific LBP object
	LBP(ctx context.Context, in *QueryLBP, opts ...grpc.CallOption) (*QueryLBPResponse, error)
	UserPosition(ctx context.Context, in *QueryUserPosition, opts ...grpc.CallOption) (*QueryUserPositionResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) LBPs(ctx context.Context, in *QueryLBPs, opts ...grpc.CallOption) (*QueryLBPsResponse, error) {
	out := new(QueryLBPsResponse)
	err := c.cc.Invoke(ctx, "/osmosis.osmolbp.v1.Query/LBPs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LBP(ctx context.Context, in *QueryLBP, opts ...grpc.CallOption) (*QueryLBPResponse, error) {
	out := new(QueryLBPResponse)
	err := c.cc.Invoke(ctx, "/osmosis.osmolbp.v1.Query/LBP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) UserPosition(ctx context.Context, in *QueryUserPosition, opts ...grpc.CallOption) (*QueryUserPositionResponse, error) {
	out := new(QueryUserPositionResponse)
	err := c.cc.Invoke(ctx, "/osmosis.osmolbp.v1.Query/UserPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Returns list of LBPs ordered by the creation time
	LBPs(context.Context, *QueryLBPs) (*QueryLBPsResponse, error)
	// Returns the specific LBP object
	LBP(context.Context, *QueryLBP) (*QueryLBPResponse, error)
	UserPosition(context.Context, *QueryUserPosition) (*QueryUserPositionResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) LBPs(ctx context.Context, req *QueryLBPs) (*QueryLBPsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LBPs not implemented")
}
func (*UnimplementedQueryServer) LBP(ctx context.Context, req *QueryLBP) (*QueryLBPResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LBP not implemented")
}
func (*UnimplementedQueryServer) UserPosition(ctx context.Context, req *QueryUserPosition) (*QueryUserPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserPosition not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_LBPs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLBPs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LBPs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.osmolbp.v1.Query/LBPs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LBPs(ctx, req.(*QueryLBPs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LBP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLBP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LBP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.osmolbp.v1.Query/LBP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LBP(ctx, req.(*QueryLBP))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_UserPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryUserPosition)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).UserPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/osmosis.osmolbp.v1.Query/UserPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).UserPosition(ctx, req.(*QueryUserPosition))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "osmosis.osmolbp.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LBPs",
			Handler:    _Query_LBPs_Handler,
		},
		{
			MethodName: "LBP",
			Handler:    _Query_LBP_Handler,
		},
		{
			MethodName: "UserPosition",
			Handler:    _Query_UserPosition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "osmosis/osmolbp/v1/query.proto",
}

func (m *QueryLBPs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLBPs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLBPs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	return len(dAtA) - i, nil
}

func (m *QueryLBPsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLBPsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLBPsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Lbps) > 0 {
		for iNdEx := len(m.Lbps) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Lbps[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLBP) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLBP) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLBP) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LbpId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LbpId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLBPResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLBPResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLBPResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Lbp.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryUserPosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserPosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserPosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0x12
	}
	if m.LbpId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LbpId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryUserPositionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryUserPositionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryUserPositionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.UserPosition.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryLBPs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLBPsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Lbps) > 0 {
		for _, e := range m.Lbps {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryLBP) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LbpId != 0 {
		n += 1 + sovQuery(uint64(m.LbpId))
	}
	return n
}

func (m *QueryLBPResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Lbp.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryUserPosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LbpId != 0 {
		n += 1 + sovQuery(uint64(m.LbpId))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryUserPositionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.UserPosition.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryLBPs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLBPs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLBPs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLBPsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLBPsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLBPsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lbps", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Lbps = append(m.Lbps, LBP{})
			if err := m.Lbps[len(m.Lbps)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLBP) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLBP: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLBP: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LbpId", wireType)
			}
			m.LbpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LbpId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLBPResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLBPResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLBPResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lbp", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Lbp.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserPosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserPosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserPosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LbpId", wireType)
			}
			m.LbpId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LbpId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryUserPositionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryUserPositionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryUserPositionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserPosition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.UserPosition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
