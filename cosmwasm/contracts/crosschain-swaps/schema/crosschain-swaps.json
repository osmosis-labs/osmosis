{
  "contract_name": "crosschain-swaps",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "description": "Message type for `instantiate` entry_point",
    "type": "object",
    "required": [
      "channels",
      "governor",
      "swap_contract"
    ],
    "properties": {
      "channels": {
        "description": "These are the channels that will be accepted by the contract. This is needed to avoid sending packets to addresses not supported by the receiving chain. The channels are specified as (bech32_prefix, channel_id)",
        "type": "array",
        "items": {
          "type": "array",
          "items": [
            {
              "type": "string"
            },
            {
              "type": "string"
            }
          ],
          "maxItems": 2,
          "minItems": 2
        }
      },
      "governor": {
        "description": "The address that will be allowed to manage the channel registry",
        "type": "string"
      },
      "swap_contract": {
        "description": "This should be an instance of the Osmosis swaprouter contract",
        "type": "string"
      }
    },
    "additionalProperties": false
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "description": "message type for `execute` entry_point",
    "oneOf": [
      {
        "description": "Execute a swap and forward it to the receiver address on the specified ibc channel",
        "type": "object",
        "required": [
          "osmosis_swap"
        ],
        "properties": {
          "osmosis_swap": {
            "type": "object",
            "required": [
              "on_failed_delivery",
              "output_denom",
              "receiver",
              "slippage"
            ],
            "properties": {
              "next_memo": {
                "description": "IBC packets can contain an optional memo. If a sender wants the sent packet to include a memo, this is the field where they can specify it. If provided, the memo is expected to be a valid JSON object",
                "anyOf": [
                  {
                    "$ref": "#/definitions/JSON"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "on_failed_delivery": {
                "description": "If for any reason the swap were to fail, users can specify a \"recovery address\" that can clain the funds on osmosis after a confirmed failure.",
                "allOf": [
                  {
                    "$ref": "#/definitions/FailedDeliveryAction"
                  }
                ]
              },
              "output_denom": {
                "description": "The final denom to be received (as represented on osmosis)",
                "type": "string"
              },
              "receiver": {
                "description": "The receiver of the IBC packet to be sent after the swap",
                "type": "string"
              },
              "slippage": {
                "description": "Slippage for the swap",
                "allOf": [
                  {
                    "$ref": "#/definitions/Slippage"
                  }
                ]
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Executing a recover will transfer any recoverable tokens that the sender has in this contract to its account.\n\nThis is only usable if the contract is configured with track_ibc_sends.\n\nThe only tokens that are considered recoverable for a \"sender\" are those returned by an IBC transfer sent by this contract, that are known to have failed, and that originated with a message specifying the \"sender\" as its recovery address.",
        "type": "object",
        "required": [
          "recover"
        ],
        "properties": {
          "recover": {
            "type": "object",
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "set_channel"
        ],
        "properties": {
          "set_channel": {
            "type": "object",
            "required": [
              "channel",
              "prefix"
            ],
            "properties": {
              "channel": {
                "type": "string"
              },
              "prefix": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "disable_prefix"
        ],
        "properties": {
          "disable_prefix": {
            "type": "object",
            "required": [
              "prefix"
            ],
            "properties": {
              "prefix": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "re_enable_prefix"
        ],
        "properties": {
          "re_enable_prefix": {
            "type": "object",
            "required": [
              "prefix"
            ],
            "properties": {
              "prefix": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "transfer_ownership"
        ],
        "properties": {
          "transfer_ownership": {
            "type": "object",
            "required": [
              "new_governor"
            ],
            "properties": {
              "new_governor": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      },
      {
        "type": "object",
        "required": [
          "set_swap_contract"
        ],
        "properties": {
          "set_swap_contract": {
            "type": "object",
            "required": [
              "new_contract"
            ],
            "properties": {
              "new_contract": {
                "type": "string"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      },
      "Decimal": {
        "description": "A fixed-point decimal value with 18 fractional digits, i.e. Decimal(1_000_000_000_000_000_000) == 1.0\n\nThe greatest possible value that can be represented is 340282366920938463463.374607431768211455 (which is (2^128 - 1) / 10^18)",
        "type": "string"
      },
      "FailedDeliveryAction": {
        "description": "An enum specifying what resolution the user expects in the case of a bad IBC delviery",
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "do_nothing"
            ]
          },
          {
            "description": "An osmosis addres used to recover any tokens that get stuck in the contract due to IBC failures",
            "type": "object",
            "required": [
              "local_recovery_addr"
            ],
            "properties": {
              "local_recovery_addr": {
                "$ref": "#/definitions/Addr"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "JSON": true,
      "Slippage": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "twap"
            ],
            "properties": {
              "twap": {
                "type": "object",
                "required": [
                  "slippage_percentage"
                ],
                "properties": {
                  "slippage_percentage": {
                    "$ref": "#/definitions/Decimal"
                  },
                  "window_seconds": {
                    "type": [
                      "integer",
                      "null"
                    ],
                    "format": "uint64",
                    "minimum": 0.0
                  }
                },
                "additionalProperties": false
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "min_output_amount"
            ],
            "properties": {
              "min_output_amount": {
                "$ref": "#/definitions/Uint128"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "description": "Message type for `query` entry_point",
    "oneOf": [
      {
        "description": "Returns the list of transfers that are recoverable for an Addr",
        "type": "object",
        "required": [
          "recoverable"
        ],
        "properties": {
          "recoverable": {
            "type": "object",
            "required": [
              "addr"
            ],
            "properties": {
              "addr": {
                "$ref": "#/definitions/Addr"
              }
            },
            "additionalProperties": false
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Addr": {
        "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
        "type": "string"
      }
    }
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "recoverable": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Array_of_IBCTransfer",
      "type": "array",
      "items": {
        "$ref": "#/definitions/IBCTransfer"
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "IBCTransfer": {
          "description": "A transfer packet sent by this contract that is expected to be received but needs to be tracked in case the receive fails or times-out",
          "type": "object",
          "required": [
            "amount",
            "channel_id",
            "denom",
            "recovery_addr",
            "sequence",
            "status"
          ],
          "properties": {
            "amount": {
              "type": "integer",
              "format": "uint128",
              "minimum": 0.0
            },
            "channel_id": {
              "type": "string"
            },
            "denom": {
              "type": "string"
            },
            "recovery_addr": {
              "$ref": "#/definitions/Addr"
            },
            "sequence": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            },
            "status": {
              "$ref": "#/definitions/PacketLifecycleStatus"
            }
          },
          "additionalProperties": false
        },
        "PacketLifecycleStatus": {
          "type": "string",
          "enum": [
            "sent",
            "ack_success",
            "ack_failure",
            "timed_out"
          ]
        }
      }
    }
  }
}
